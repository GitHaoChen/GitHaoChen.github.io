<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hal的博客</title>
  <subtitle>愿你走出半生，仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-19T06:21:15.798Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring 自动扫描组件</title>
    <link href="http://yoursite.com/2017/08/17/Spring_0700_component/"/>
    <id>http://yoursite.com/2017/08/17/Spring_0700_component/</id>
    <published>2017-08-17T05:07:31.000Z</published>
    <updated>2017-09-19T06:21:15.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-自动扫描组件"><a href="#Spring-自动扫描组件" class="headerlink" title="Spring 自动扫描组件"></a>Spring 自动扫描组件</h3><p>&emsp;&emsp;通常情况下，要声明所有的Bean类或组件的XML bean配置文件，这样Spring容器可以检测并注册Bean类或组件。 其实，Spring是能够自动扫描，检测和预定义的项目包并实例化bean的，可以在XML文件中省略繁琐的Bean类声明。<br><a id="more"></a></p>
<h4 id="1-手动声明方式"><a href="#1-手动声明方式" class="headerlink" title="1. 手动声明方式"></a>1. 手动声明方式</h4><p>&emsp;&emsp;手动声明xml配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;customerDAO&quot; ref=&quot;customerDAO&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.CustomerDAO&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-自动扫描组件"><a href="#2-自动扫描组件" class="headerlink" title="2. 自动扫描组件"></a>2. 自动扫描组件</h4><h5 id="2-1-DAO层，添加-Component，表明这也是一个自动扫描组件。"><a href="#2-1-DAO层，添加-Component，表明这也是一个自动扫描组件。" class="headerlink" title="2.1 DAO层，添加@Component，表明这也是一个自动扫描组件。"></a>2.1 DAO层，添加@Component，表明这也是一个自动扫描组件。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line">@Component</div><div class="line">public class CustomerService </div><div class="line">&#123;</div><div class="line">	@Autowired</div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;CustomerService [customerDAO=&quot; + customerDAO + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-2-注册自动扫描组件"><a href="#2-2-注册自动扫描组件" class="headerlink" title="2.2 注册自动扫描组件"></a>2.2 注册自动扫描组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.customer&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>“context:component”在bean配置文件，意味着，在Spring中启用自动扫描功能。base-package是指明存储组件，Spring将扫描该文件夹，并找出Bean(注解为@Component)并注册到Spring容器。</p>
</blockquote>
<h4 id="3-自定义自动扫描组件名称"><a href="#3-自定义自动扫描组件名称" class="headerlink" title="3. 自定义自动扫描组件名称"></a>3. 自定义自动扫描组件名称</h4><p>&emsp;&emsp;默认情况下，Spring 将小写部件的第一字符,从’CustomerService’到’customerService’。可以检索该组件名称为”CustomerService”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);</div></pre></td></tr></table></figure></p>
<p>要创建组件的自定义名称，可以这样自定义名称：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Service(&quot;AAA&quot;)</div><div class="line">public class CustomerService </div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>现在，可以用’AAA’这个名称进行检索了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)context.getBean(&quot;AAA&quot;);</div></pre></td></tr></table></figure></p>
<h4 id="4-自动扫描组件注释类型"><a href="#4-自动扫描组件注释类型" class="headerlink" title="4. 自动扫描组件注释类型"></a>4. 自动扫描组件注释类型</h4><p>&emsp;&emsp;在Spring2.5中，有4种类型的自动扫描组件注释类型</p>
<ul>
<li>@Component:指示自动扫描组件。</li>
<li>@Repository:表示在持久层DAO组件。</li>
<li>@Service:表示在业务层服务组件。</li>
<li>@Controller:表示在表示层控制器组件。</li>
</ul>
<blockquote>
<p>查看@Component，@Repository，@Service 或 @Controller 源代码可以发现，所有的 @Repository, @Service 或 @Controller 被注解为 @Component。因此，我们可以只使用 @Component 对所有组件进行自动扫描。但为便于阅读，应该始终声明@Repository，@ Service或@Controller在指定的层。</p>
</blockquote>
<h4 id="5-过滤自动扫描组件"><a href="#5-过滤自动扫描组件" class="headerlink" title="5. 过滤自动扫描组件"></a>5. 过滤自动扫描组件</h4><p>&emsp;&emsp;使用过滤自动扫描组件，Spring会”过滤”扫描并注册匹配定义”regex”，即使该类组件的名称未标注@Component。<br>&emsp;&emsp;DAO层：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao;</div><div class="line"></div><div class="line">public class CustomerDAO </div><div class="line">&#123;</div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Hello , This is CustomerDAO&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Service层:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line">public class CustomerService </div><div class="line">&#123;</div><div class="line">	@Autowired</div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;CustomerService [customerDAO=&quot; + customerDAO + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Spring过滤，包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid&quot; &gt;</div><div class="line"></div><div class="line">		&lt;context:include-filter type=&quot;regex&quot; </div><div class="line">                       expression=&quot;com.lidolid.customer.dao.*DAO.*&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;context:include-filter type=&quot;regex&quot; </div><div class="line">                       expression=&quot;com.lidolid.customer.services.*Service.*&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在这个XML过滤中，所有文件的名称中包含DAO或Service(<em>DAO.</em>, <em>Services.</em>)单词将被检测并在 Spring 容器中注册。</p>
</blockquote>
<p>&emsp;&emsp;Spring过滤，不包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;context:component-scan base-package=&quot;com.yiibai&quot; &gt;</div><div class="line">		&lt;context:exclude-filter type=&quot;regex&quot; </div><div class="line">			expression=&quot;com.yiibai.customer.dao.*DAO.*&quot; /&gt;		</div><div class="line">&lt;/context:component-scan&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>不包括那些包含DAO这个词组文件名</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-自动扫描组件&quot;&gt;&lt;a href=&quot;#Spring-自动扫描组件&quot; class=&quot;headerlink&quot; title=&quot;Spring 自动扫描组件&quot;&gt;&lt;/a&gt;Spring 自动扫描组件&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;通常情况下，要声明所有的Bean类或组件的XML bean配置文件，这样Spring容器可以检测并注册Bean类或组件。 其实，Spring是能够自动扫描，检测和预定义的项目包并实例化bean的，可以在XML文件中省略繁琐的Bean类声明。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring EL表达式</title>
    <link href="http://yoursite.com/2017/08/16/Spring_0600_EL/"/>
    <id>http://yoursite.com/2017/08/16/Spring_0600_EL/</id>
    <published>2017-08-16T12:13:52.000Z</published>
    <updated>2017-09-19T05:06:59.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-EL表达式"><a href="#Spring-EL表达式" class="headerlink" title="Spring EL表达式"></a>Spring EL表达式</h3><p>&emsp;&emsp;Spring EL与OGNL和JSF EL相似，计算评估或在bean创建时执行。此外，所有的Spring表达式都可以通过XML或注解。本文简单介绍如何使用Spring EL表达式注入字符串，整数，Bean到属性。<br><a id="more"></a></p>
<h4 id="1-Spring-Beans定义"><a href="#1-Spring-Beans定义" class="headerlink" title="1. Spring Beans定义"></a>1. Spring Beans定义</h4><p>&emsp;&emsp;Item Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">public class Item &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private int qty;</div><div class="line"></div><div class="line">	public Item() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getQty() &#123;</div><div class="line">		return qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setQty(int qty) &#123;</div><div class="line">		this.qty = qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Item [name=&quot; + name + &quot;, qty=&quot; + qty + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	private Item item;</div><div class="line">	private String itemName;</div><div class="line"></div><div class="line">	public Item getItem() &#123;</div><div class="line">		return item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItem(Item item) &#123;</div><div class="line">		this.item = item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getItemName() &#123;</div><div class="line">		return itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItemName(String itemName) &#123;</div><div class="line">		this.itemName = itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [item=&quot; + item + &quot;, itemName=&quot; + itemName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-Spring-EL以XML形式"><a href="#2-Spring-EL以XML形式" class="headerlink" title="2. Spring EL以XML形式"></a>2. Spring EL以XML形式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;itemBean&quot; class=&quot;com.lidolid.core.Item&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;itemA&quot; /&gt;</div><div class="line">		&lt;property name=&quot;qty&quot; value=&quot;10&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerBean&quot; class=&quot;com.lidolid.core.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;item&quot; value=&quot;#&#123;itemBean&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;itemName&quot; value=&quot;#&#123;itemBean.name&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>#{itemBean} – 注入“itemBean”到“customerBean”Bean 的“item”属性。</li>
<li>#{itemBean.name} – 注入“itemBean”的“name”属性到 “customerBean” bean的”itemname”属性。</li>
</ul>
</blockquote>
<h4 id="3-Spring-EL以注解形式"><a href="#3-Spring-EL以注解形式" class="headerlink" title="3. Spring EL以注解形式"></a>3. Spring EL以注解形式</h4><p>&emsp;&emsp;Item Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">@Component(&quot;itemBean&quot;)</div><div class="line">public class Item &#123;</div><div class="line"></div><div class="line">	@Value(&quot;itemA&quot;) //inject String directly</div><div class="line">	private String name;</div><div class="line">	@Value(&quot;10&quot;) //inject interger directly</div><div class="line">	private int qty;</div><div class="line">	</div><div class="line">	public Item() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getQty() &#123;</div><div class="line">		return qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setQty(int qty) &#123;</div><div class="line">		this.qty = qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Item [name=&quot; + name + &quot;, qty=&quot; + qty + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">@Component(&quot;customerBean&quot;)</div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;itemBean&#125;&quot;)</div><div class="line">	private Item item;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;itemBean.name&#125;&quot;)</div><div class="line">	private String itemName;</div><div class="line"></div><div class="line">	public Item getItem() &#123;</div><div class="line">		return item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItem(Item item) &#123;</div><div class="line">		this.item = item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getItemName() &#123;</div><div class="line">		return itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItemName(String itemName) &#123;</div><div class="line">		this.itemName = itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [item=&quot; + item + &quot;, itemName=&quot; + itemName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：要在注解使用使用SpEL，必须通过注解自动扫描组件，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.core&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-EL表达式&quot;&gt;&lt;a href=&quot;#Spring-EL表达式&quot; class=&quot;headerlink&quot; title=&quot;Spring EL表达式&quot;&gt;&lt;/a&gt;Spring EL表达式&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring EL与OGNL和JSF EL相似，计算评估或在bean创建时执行。此外，所有的Spring表达式都可以通过XML或注解。本文简单介绍如何使用Spring EL表达式注入字符串，整数，Bean到属性。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="EL" scheme="http://yoursite.com/tags/EL/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean配置继承</title>
    <link href="http://yoursite.com/2017/08/15/Spring_0507_extendsbean/"/>
    <id>http://yoursite.com/2017/08/15/Spring_0507_extendsbean/</id>
    <published>2017-08-15T14:29:51.000Z</published>
    <updated>2017-09-19T04:23:41.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean配置继承"><a href="#Spring-Bean配置继承" class="headerlink" title="Spring Bean配置继承"></a>Spring Bean配置继承</h3><p>&emsp;&emsp;在 Spring，继承是用为支持bean设置一个bean来分享共同的值，属性或配置。一个子bean或继承的bean可以继承其父bean的配置，属性和一些属性。另外，子Bean允许覆盖继承的值。Bean继承可分为以下三类：</p>
<ul>
<li>普通继承：仅在父类中声明class，子类则只需要声明parent，父类Bean和子类Bean均可以实例化</li>
<li>抽象继承：父类中声明class和abstract=true ，子类只需要声明Parent，父类Bean不可以实例化</li>
<li>纯模板继承：父类不声明class，只作为模板出现，用来设置共享属性<a id="more"></a>
</li>
</ul>
<h4 id="1-普通继承"><a href="#1-普通继承" class="headerlink" title="1. 普通继承"></a>1. 普通继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 普通继承 --&gt;</div><div class="line">	&lt;bean id=&quot;BaseCustomerMalaysia&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;country&quot; value=&quot;Malaysia&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; parent=&quot;BaseCustomerMalaysia&quot;&gt;</div><div class="line">		&lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>“BaseCustomerMalaysia”Bean中含有的 country 属性的值，而”CustomerBean”Bean 继承其父(‘BaseCustomerMalaysia’)这个值。<br>‘BaseCustomerMalaysia’ 仍然能够实例化，例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Customer cust = (Customer)context.getBean(&quot;BaseCustomerMalaysia&quot;);</div><div class="line">``` </div><div class="line"></div><div class="line">#### 2. 抽象继承</div><div class="line">&amp;emsp;&amp;emsp;如果要让这个bean作为一个基础模板，不允许别人来实例化它，可以在一个&amp;lt;bean&amp;gt;元素中添加一个“abstract”的属性。</div></pre></td></tr></table></figure>
</blockquote>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util" xsi:schemalocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-2.5.xsd">

<pre><code>&lt;!-- 抽象继承 --&gt;
&lt;bean id=&quot;BaseCustomerMalaysia&quot; class=&quot;com.lidolid.common.Customer&quot; abstract=&quot;true&quot;&gt;
    &lt;property name=&quot;country&quot; value=&quot;Malaysia&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;CustomerBean&quot; parent=&quot;BaseCustomerMalaysia&quot;&gt;
    &lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;
    &lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;
    &lt;!-- 子类bean可覆盖父类 --&gt;
    &lt;property name=&quot;country&quot; value=&quot;China&quot; /&gt;
&lt;/bean&gt;
</code></pre><p></p></beans><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 3. 纯模板继承</div><div class="line">&amp;emsp;&amp;emsp;父bean不需要定义类的属性，很多时候，你可能只需要一个共同的属性共享，可以使用纯模板继承。</div></pre></td></tr></table></figure><p></p>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util" xsi:schemalocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-2.5.xsd">

<pre><code>&lt;!-- 模板继承 --&gt;
&lt;bean id=&quot;BaseCustomerMalaysia&quot; abstract=&quot;true&quot;&gt;
    &lt;property name=&quot;country&quot; value=&quot;Malaysia&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;CustomerBean&quot; parent=&quot;BaseCustomerMalaysia&quot; 
    class=&quot;com.lidolid.common.Customer&quot;&gt;

    &lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;
    &lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;
&lt;/bean&gt;
</code></pre><p></p></beans><br>```<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean配置继承&quot;&gt;&lt;a href=&quot;#Spring-Bean配置继承&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean配置继承&quot;&gt;&lt;/a&gt;Spring Bean配置继承&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在 Spring，继承是用为支持bean设置一个bean来分享共同的值，属性或配置。一个子bean或继承的bean可以继承其父bean的配置，属性和一些属性。另外，子Bean允许覆盖继承的值。Bean继承可分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通继承：仅在父类中声明class，子类则只需要声明parent，父类Bean和子类Bean均可以实例化&lt;/li&gt;
&lt;li&gt;抽象继承：父类中声明class和abstract=true ，子类只需要声明Parent，父类Bean不可以实例化&lt;/li&gt;
&lt;li&gt;纯模板继承：父类不声明class，只作为模板出现，用来设置共享属性
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="继承" scheme="http://yoursite.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer</title>
    <link href="http://yoursite.com/2017/08/14/Spring_0506_PropertyPlaceholderConfigurer/"/>
    <id>http://yoursite.com/2017/08/14/Spring_0506_PropertyPlaceholderConfigurer/</id>
    <published>2017-08-14T12:17:53.000Z</published>
    <updated>2017-09-19T03:21:08.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring使用properties文件注入bean属性值-PropertyPlaceholderConfigurer"><a href="#Spring使用properties文件注入bean属性值-PropertyPlaceholderConfigurer" class="headerlink" title="Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer"></a>Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer</h3><p>&emsp;&emsp;很多时候，大多数Spring开发人员只是把整个部署的详细信息(数据库的详细信息，日志文件的路径)写在XML bean配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerSimpleDAO&quot; class=&quot;com.lidolid.customer.dao.impl.SimpleJdbcCustomerDAO&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/lidolidjava&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;password&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;但是，在企业环境中，部署的细节通常只可以由系统管理员或数据库管理员来’触碰’，他们可能会拒绝直接访问你的bean的配置文件，它们会要求部署配置一个单独的文件，例如，一个简单的性能(properties)文件，仅具有部署细节。本文展示通过PropertyPlaceholderConfigurer使用properties文件注入值到bean。<br><a id="more"></a></p>
<h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p><img src="https://i.imgur.com/AT8PgZs.png" alt=""></p>
<h4 id="2-properties文件"><a href="#2-properties文件" class="headerlink" title="2. properties文件"></a>2. properties文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql://localhost:3306/spring</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=cupdata</div></pre></td></tr></table></figure>
<h4 id="3-bean配置文件"><a href="#3-bean配置文件" class="headerlink" title="3. bean配置文件"></a>3. bean配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean</div><div class="line">		class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;location&quot;&gt;</div><div class="line">			&lt;value&gt;databaspro/database.properties&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意： PropertyPlaceholderConfigurer的location属性是指明properties文件路径，默认根路径为<strong><em>classpath</em></strong><br>值得注入方式为：${jdbc.driverClassName}</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring使用properties文件注入bean属性值-PropertyPlaceholderConfigurer&quot;&gt;&lt;a href=&quot;#Spring使用properties文件注入bean属性值-PropertyPlaceholderConfigurer&quot; class=&quot;headerlink&quot; title=&quot;Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer&quot;&gt;&lt;/a&gt;Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;很多时候，大多数Spring开发人员只是把整个部署的详细信息(数据库的详细信息，日志文件的路径)写在XML bean配置文件如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;bean id=&amp;quot;customerDAO&amp;quot; class=&amp;quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;bean id=&amp;quot;customerSimpleDAO&amp;quot; class=&amp;quot;com.lidolid.customer.dao.impl.SimpleJdbcCustomerDAO&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;bean id=&amp;quot;dataSource&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		class=&amp;quot;org.springframework.jdbc.datasource.DriverManagerDataSource&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;com.mysql.jdbc.Driver&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://localhost:3306/lidolidjava&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;password&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;但是，在企业环境中，部署的细节通常只可以由系统管理员或数据库管理员来’触碰’，他们可能会拒绝直接访问你的bean的配置文件，它们会要求部署配置一个单独的文件，例如，一个简单的性能(properties)文件，仅具有部署细节。本文展示通过PropertyPlaceholderConfigurer使用properties文件注入值到bean。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="PropertyPlaceholderConfigurer" scheme="http://yoursite.com/tags/PropertyPlaceholderConfigurer/"/>
    
  </entry>
  
  <entry>
    <title>Spring注入日期到bean属性</title>
    <link href="http://yoursite.com/2017/08/13/Spring_0505_dateinjection/"/>
    <id>http://yoursite.com/2017/08/13/Spring_0505_dateinjection/</id>
    <published>2017-08-13T15:13:35.000Z</published>
    <updated>2017-09-19T03:05:16.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring注入日期到bean属性"><a href="#Spring注入日期到bean属性" class="headerlink" title="Spring注入日期到bean属性"></a>Spring注入日期到bean属性</h3><p>&emsp;&emsp;本文展示如何为bean属性注入一个”日期”。<br><a id="more"></a></p>
<h4 id="1-Customer类定义"><a href="#1-Customer类定义" class="headerlink" title="1. Customer类定义"></a>1. Customer类定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	Date date;</div><div class="line"></div><div class="line">	public Date getDate() &#123;</div><div class="line">		return date;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setDate(Date date) &#123;</div><div class="line">		this.date = date;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [date=&quot; + date + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-bean配置文件，不做日期转换，直接将字符串格式的日期注入"><a href="#2-bean配置文件，不做日期转换，直接将字符串格式的日期注入" class="headerlink" title="2. bean配置文件，不做日期转换，直接将字符串格式的日期注入"></a>2. bean配置文件，不做日期转换，直接将字符串格式的日期注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;date&quot; value=&quot;1994-02-21&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h4 id="3-执行程序"><a href="#3-执行程序" class="headerlink" title="3.执行程序"></a>3.执行程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;SpringBeans.xml&quot;);</div><div class="line"></div><div class="line">		Customer cust = (Customer) context.getBean(&quot;customer&quot;);</div><div class="line">		System.out.println(cust);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：</p>
<blockquote>
<p>Caused by: org.springframework.beans.TypeMismatchException:Failed to convert property value of type [java.lang.String] to required type [java.util.Date] for property ‘date’;<br>nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.String] to required type [java.util.Date] for property ‘date’: no matching editors or conversion strategy found</p>
</blockquote>
<p><em>即无法将字符串格式的日期注入</em></p>
<h4 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h4><p>&emsp;&emsp;在Spring中，可以通过如下注入日期：</p>
<h5 id="4-1-Factory-bean"><a href="#4-1-Factory-bean" class="headerlink" title="4.1 Factory bean"></a>4.1 Factory bean</h5><p>&emsp;&emsp;声明一个dateFormat bean，在”customer”Bean，引用”dateFormat”bean作为一个工厂bean。该工厂方法将调用SimpleDateFormat.parse()自动转换成字符串Date对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dateFormat&quot; class=&quot;java.text.SimpleDateFormat&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;yyyy-MM-dd&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;date&quot;&gt;</div><div class="line">			&lt;bean factory-bean=&quot;dateFormat&quot; factory-method=&quot;parse&quot;&gt;</div><div class="line">				&lt;constructor-arg value=&quot;2015-12-31&quot; /&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring注入日期到bean属性&quot;&gt;&lt;a href=&quot;#Spring注入日期到bean属性&quot; class=&quot;headerlink&quot; title=&quot;Spring注入日期到bean属性&quot;&gt;&lt;/a&gt;Spring注入日期到bean属性&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文展示如何为bean属性注入一个”日期”。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Date" scheme="http://yoursite.com/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>Spring使用FactoryBean注入结合bean</title>
    <link href="http://yoursite.com/2017/08/13/Spring_0504_factorybean/"/>
    <id>http://yoursite.com/2017/08/13/Spring_0504_factorybean/</id>
    <published>2017-08-13T05:51:09.000Z</published>
    <updated>2017-09-19T02:47:40.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring使用FactoryBean注入结合bean"><a href="#Spring使用FactoryBean注入结合bean" class="headerlink" title="Spring使用FactoryBean注入结合bean"></a>Spring使用FactoryBean注入结合bean</h3><p>&emsp;&emsp;Spring也提供FactoryBean实现注入集合bean，主要分为以下三种：</p>
<ul>
<li>ListFactoryBean: 创建一个具体的列表集合类(ArrayList和LinkedList)</li>
<li>SetFactoryBean: 创建一个具体的Set集合(HashSet 和 TreeSet)</li>
<li>MapFactoryBean: 创建一个具体的Map集合类(HashMap和TreeMap)</li>
</ul>
<a id="more"></a>
<h4 id="1-ListFactoryBean"><a href="#1-ListFactoryBean" class="headerlink" title="1. ListFactoryBean"></a>1. ListFactoryBean</h4><p>&emsp;&emsp;Spring bean配置文件 - applicationContext.html 文件的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">    &lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;lists&quot;&gt;</div><div class="line">			&lt;bean class=&quot;org.springframework.beans.factory.config.ListFactoryBean&quot;&gt;</div><div class="line">				&lt;property name=&quot;targetListClass&quot;&gt;</div><div class="line">					&lt;value&gt;java.util.ArrayList&lt;/value&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">				&lt;property name=&quot;sourceList&quot;&gt;</div><div class="line">					&lt;list&gt;</div><div class="line">						&lt;value&gt;one&lt;/value&gt;</div><div class="line">						&lt;value&gt;2&lt;/value&gt;</div><div class="line">						&lt;value&gt;three&lt;/value&gt;</div><div class="line">					&lt;/list&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>另外，还可以使用util模式和<util:list> 来达到同样的目的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;lists&quot;&gt;</div><div class="line">			&lt;util:list list-class=&quot;java.util.ArrayList&quot;&gt;</div><div class="line">				&lt;value&gt;one&lt;/value&gt;</div><div class="line">				&lt;value&gt;2&lt;/value&gt;</div><div class="line">				&lt;value&gt;three&lt;/value&gt;</div><div class="line">			&lt;/util:list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></util:list></p>
<blockquote>
<p>注意：使用util模式时，注意要包含util模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:util=&quot;http://www.springframework.org/schema/util</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-SetFactoryBean"><a href="#1-SetFactoryBean" class="headerlink" title="1. SetFactoryBean"></a>1. SetFactoryBean</h4><p>&emsp;&emsp;Spring的bean配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">    &lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;sets&quot;&gt;</div><div class="line">			&lt;bean class=&quot;org.springframework.beans.factory.config.SetFactoryBean&quot;&gt;</div><div class="line">				&lt;property name=&quot;targetSetClass&quot;&gt;</div><div class="line">					&lt;value&gt;java.util.HashSet&lt;/value&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">				&lt;property name=&quot;sourceSet&quot;&gt;</div><div class="line">					&lt;list&gt;</div><div class="line">						&lt;value&gt;one&lt;/value&gt;</div><div class="line">						&lt;value&gt;2&lt;/value&gt;</div><div class="line">						&lt;value&gt;three&lt;/value&gt;</div><div class="line">					&lt;/list&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>使用util模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;sets&quot;&gt;</div><div class="line">			&lt;util:list list-class=&quot;java.util.ArrayList&quot;&gt;</div><div class="line">				&lt;value&gt;one&lt;/value&gt;</div><div class="line">				&lt;value&gt;2&lt;/value&gt;</div><div class="line">				&lt;value&gt;three&lt;/value&gt;</div><div class="line">			&lt;/util:list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="1-MapFactoryBean"><a href="#1-MapFactoryBean" class="headerlink" title="1. MapFactoryBean"></a>1. MapFactoryBean</h4><p>&emsp;&emsp;Spring 的bean配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">    &lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;maps&quot;&gt;</div><div class="line">			&lt;bean class=&quot;org.springframework.beans.factory.config.MapFactoryBean&quot;&gt;</div><div class="line">				&lt;property name=&quot;targetMapClass&quot;&gt;</div><div class="line">					&lt;value&gt;java.util.HashMap&lt;/value&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">				&lt;property name=&quot;sourceMap&quot;&gt;</div><div class="line">					&lt;map&gt;</div><div class="line">						&lt;entry key=&quot;Key1&quot; value=&quot;one&quot; /&gt;</div><div class="line">						&lt;entry key=&quot;Key2&quot; value=&quot;two&quot; /&gt;</div><div class="line">						&lt;entry key=&quot;Key3&quot; value=&quot;three&quot; /&gt;</div><div class="line">					&lt;/map&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>使用util模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;maps&quot;&gt;</div><div class="line">			&lt;util:map map-class=&quot;java.util.HashMap&quot;&gt;</div><div class="line">				&lt;entry key=&quot;Key1&quot; value=&quot;1&quot; /&gt;</div><div class="line">				&lt;entry key=&quot;Key2&quot; value=&quot;2&quot; /&gt;</div><div class="line">				&lt;entry key=&quot;Key3&quot; value=&quot;3&quot; /&gt;</div><div class="line">			&lt;/util:map&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring使用FactoryBean注入结合bean&quot;&gt;&lt;a href=&quot;#Spring使用FactoryBean注入结合bean&quot; class=&quot;headerlink&quot; title=&quot;Spring使用FactoryBean注入结合bean&quot;&gt;&lt;/a&gt;Spring使用FactoryBean注入结合bean&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring也提供FactoryBean实现注入集合bean，主要分为以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ListFactoryBean: 创建一个具体的列表集合类(ArrayList和LinkedList)&lt;/li&gt;
&lt;li&gt;SetFactoryBean: 创建一个具体的Set集合(HashSet 和 TreeSet)&lt;/li&gt;
&lt;li&gt;MapFactoryBean: 创建一个具体的Map集合类(HashMap和TreeMap)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="FactoryBean" scheme="http://yoursite.com/tags/FactoryBean/"/>
    
  </entry>
  
  <entry>
    <title>Spring 集合</title>
    <link href="http://yoursite.com/2017/08/12/Spring_0503_collection/"/>
    <id>http://yoursite.com/2017/08/12/Spring_0503_collection/</id>
    <published>2017-08-12T12:49:33.000Z</published>
    <updated>2017-09-19T02:34:42.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-集合"><a href="#Spring-集合" class="headerlink" title="Spring 集合"></a>Spring 集合</h3><p>&emsp;&emsp;Spring支持4个主要的集合类型,本文介绍Spring如何注入值到集合类型(List, Set, Map, and Properties)。</p>
<ul>
<li>List - &lt;list/&gt;</li>
<li>Set  - &lt;Set/&gt;</li>
<li>Map  - &lt;Map/&gt;</li>
<li>Properties - &lt;Props/&gt;</li>
</ul>
<a id="more"></a>
<h4 id="1-Customer类，存在四个集合属性。"><a href="#1-Customer类，存在四个集合属性。" class="headerlink" title="1. Customer类，存在四个集合属性。"></a>1. Customer类，存在四个集合属性。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Properties;</div><div class="line">import java.util.Set;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	private List&lt;Object&gt; lists;</div><div class="line">	private Set&lt;Object&gt; sets;</div><div class="line">	private Map&lt;Object, Object&gt; maps;</div><div class="line">	private Properties pros;</div><div class="line"></div><div class="line">	public Customer() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Object&gt; getLists() &#123;</div><div class="line">		return lists;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setLists(List&lt;Object&gt; lists) &#123;</div><div class="line">		this.lists = lists;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Set&lt;Object&gt; getSets() &#123;</div><div class="line">		return sets;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setSets(Set&lt;Object&gt; sets) &#123;</div><div class="line">		this.sets = sets;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Map&lt;Object, Object&gt; getMaps() &#123;</div><div class="line">		return maps;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMaps(Map&lt;Object, Object&gt; maps) &#123;</div><div class="line">		this.maps = maps;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Properties getPros() &#123;</div><div class="line">		return pros;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPros(Properties pros) &#123;</div><div class="line">		this.pros = pros;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [lists=&quot; + lists + &quot;, sets=&quot; + sets + &quot;, maps=&quot; + maps + &quot;, pros=&quot; + pros + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Person类，存储Person的基础信息。"><a href="#2-Person类，存储Person的基础信息。" class="headerlink" title="2. Person类，存储Person的基础信息。"></a>2. Person类，存储Person的基础信息。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private String address;</div><div class="line">	private int age;</div><div class="line"></div><div class="line">	public Person() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getAddress() &#123;</div><div class="line">		return address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAddress(String address) &#123;</div><div class="line">		this.address = address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [name=&quot; + name + &quot;, address=&quot; + address + &quot;, age=&quot; + age + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-beans-xml-实现集合注入"><a href="#3-beans-xml-实现集合注入" class="headerlink" title="3. beans.xml,实现集合注入"></a>3. beans.xml,实现集合注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">     &lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line"></div><div class="line">		&lt;!-- java.util.List --&gt;</div><div class="line">		&lt;property name=&quot;lists&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;1&lt;/value&gt;</div><div class="line">				&lt;ref bean=&quot;PersonBean&quot; /&gt;</div><div class="line">				&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">					&lt;property name=&quot;name&quot; value=&quot;lidolidList&quot; /&gt;</div><div class="line">					&lt;property name=&quot;address&quot; value=&quot;Hainan Haikou&quot; /&gt;</div><div class="line">					&lt;property name=&quot;age&quot; value=&quot;28&quot; /&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;!-- java.util.Set --&gt;</div><div class="line">		&lt;property name=&quot;sets&quot;&gt;</div><div class="line">			&lt;set&gt;</div><div class="line">				&lt;value&gt;1&lt;/value&gt;</div><div class="line">				&lt;ref bean=&quot;PersonBean&quot; /&gt;</div><div class="line">				&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">					&lt;property name=&quot;name&quot; value=&quot;lidolidSet&quot; /&gt;</div><div class="line">					&lt;property name=&quot;address&quot; value=&quot;Hainan Haikou&quot; /&gt;</div><div class="line">					&lt;property name=&quot;age&quot; value=&quot;28&quot; /&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/set&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;!-- java.util.Map --&gt;</div><div class="line">		&lt;property name=&quot;maps&quot;&gt;</div><div class="line">			&lt;map&gt;</div><div class="line">				&lt;entry key=&quot;Key 1&quot; value=&quot;1&quot; /&gt;</div><div class="line">				&lt;entry key=&quot;Key 2&quot; value-ref=&quot;PersonBean&quot; /&gt;</div><div class="line">				&lt;entry key=&quot;Key 3&quot;&gt;</div><div class="line">					&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">						&lt;property name=&quot;name&quot; value=&quot;lidolidMap&quot; /&gt;</div><div class="line">						&lt;property name=&quot;address&quot; value=&quot;Hainan Haikou&quot; /&gt;</div><div class="line">						&lt;property name=&quot;age&quot; value=&quot;28&quot; /&gt;</div><div class="line">					&lt;/bean&gt;</div><div class="line">				&lt;/entry&gt;</div><div class="line">			&lt;/map&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;!-- java.util.Properties --&gt;</div><div class="line">		&lt;property name=&quot;pros&quot;&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;admin&quot;&gt;admin@lidolid.com&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;support&quot;&gt;support@lidolid.com&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;PersonBean&quot; class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid1&quot; /&gt;</div><div class="line">		&lt;property name=&quot;address&quot; value=&quot;Hainan Haikou 1&quot; /&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;28&quot; /&gt;</div><div class="line">	&lt;/bean&gt;  </div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h4 id="4-调用执行"><a href="#4-调用执行" class="headerlink" title="4. 调用执行"></a>4. 调用执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</div><div class="line"></div><div class="line">		Customer cust = (Customer) context.getBean(&quot;CustomerBean&quot;);</div><div class="line">		System.out.println(cust);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;执行结果:</p>
<blockquote>
<p>九月 19, 2017 10:32:17 上午 org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh<br>信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@2e817b38: startup date [Tue Sep 19 10:32:17 CST 2017]; root of context hierarchy<br>九月 19, 2017 10:32:17 上午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions<br>信息: Loading XML bean definitions from class path resource [beans.xml]</p>
<p>Customer [lists=[1, Person [name=lidolid1, address=Hainan Haikou 1, age=28], Person [name=lidolidList, address=Hainan Haikou, age=28]], sets=[1, Person [name=lidolid1, address=Hainan Haikou 1, age=28], Person [name=lidolidSet, address=Hainan Haikou, age=28]], maps={Key 1=1, Key 2=Person [name=lidolid1, address=Hainan Haikou 1, age=28], Key 3=Person [name=lidolidMap, address=Hainan Haikou, age=28]}, pros={admin=admin@lidolid.com, support=support@lidolid.com}]</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-集合&quot;&gt;&lt;a href=&quot;#Spring-集合&quot; class=&quot;headerlink&quot; title=&quot;Spring 集合&quot;&gt;&lt;/a&gt;Spring 集合&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring支持4个主要的集合类型,本文介绍Spring如何注入值到集合类型(List, Set, Map, and Properties)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List - &amp;lt;list/&amp;gt;&lt;/li&gt;
&lt;li&gt;Set  - &amp;lt;Set/&amp;gt;&lt;/li&gt;
&lt;li&gt;Map  - &amp;lt;Map/&amp;gt;&lt;/li&gt;
&lt;li&gt;Properties - &amp;lt;Props/&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="集合" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean作用域</title>
    <link href="http://yoursite.com/2017/08/12/Spring_0502_beanscope/"/>
    <id>http://yoursite.com/2017/08/12/Spring_0502_beanscope/</id>
    <published>2017-08-12T07:48:41.000Z</published>
    <updated>2017-09-19T02:10:58.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean作用域"><a href="#Spring-Bean作用域" class="headerlink" title="Spring Bean作用域"></a>Spring Bean作用域</h3><p>&emsp;&emsp;在Spring中，bean作用域用于确定哪种类型的 bean 实例应该从Spring容器中返回给调用者。bean支持的5种范围域：</p>
<ul>
<li>单例 - 每个Spring IoC 容器返回一个bean实例</li>
<li>原型 - 当每次请求时返回一个新的bean实例</li>
<li>请求 - 返回每个HTTP请求的一个Bean实例</li>
<li>会话 - 返回每个HTTP会话的一个bean实例</li>
<li>会话 - 返回每个HTTP会话的一个bean实例</li>
</ul>
<a id="more"></a>
<p>&emsp;&emsp;在大多数情况下，可能只处理了 Spring 的核心作用域 - 单例和原型，默认作用域是单例。</p>
<h4 id="1-单例"><a href="#1-单例" class="headerlink" title="1. 单例"></a>1. 单例</h4><p>&emsp;&emsp;如果 bean 配置文件中没有指定 bean 的范围，默认为单例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">     &lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.service.CustomerService&quot;&gt;</div><div class="line">     		&lt;property name=&quot;message&quot; value=&quot;customerServiceA&quot;/&gt;</div><div class="line">     &lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;CustomerService类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.service;</div><div class="line"></div><div class="line">public class CustomerService &#123;</div><div class="line">	</div><div class="line">	String message;</div><div class="line">	public String getMessage() &#123;</div><div class="line">		return message;</div><div class="line">	&#125;</div><div class="line">	public void setMessage(String message) &#123;</div><div class="line">		this.message = message;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;调用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.service.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123; &quot;beans.xml&quot; &#125;);</div><div class="line"></div><div class="line">		CustomerService custA = (CustomerService) context.getBean(&quot;customerService&quot;);</div><div class="line">		custA.setMessage(&quot;Message by scope&quot;);</div><div class="line">		System.out.println(&quot;Message : &quot; + custA.getMessage());</div><div class="line"></div><div class="line">		//retrieve it again</div><div class="line">		CustomerService custB = (CustomerService) context.getBean(&quot;customerService&quot;);</div><div class="line">		System.out.println(&quot;Message : &quot; + custB.getMessage());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;执行结果：<br><img src="https://i.imgur.com/aZEXr5i.png" alt=""></p>
<blockquote>
<p>单例每个Spring IoC 容器返回一个bean实例，所以两次获取的bean值相同</p>
</blockquote>
<h4 id="2-原型"><a href="#2-原型" class="headerlink" title="2. 原型"></a>2. 原型</h4><p>&emsp;&emsp;如果想有一个新的”CustomerService”bean 实例，每次调用它的时候，需要使用原型(prototype)来代替。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">     &lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.service.CustomerService&quot; scope=&quot;prototype&quot;&gt;</div><div class="line">     		&lt;property name=&quot;message&quot; value=&quot;customerServiceA&quot;/&gt;</div><div class="line">     &lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;执行结果：<br><img src="https://i.imgur.com/EXYcnjF.png" alt=""></p>
<blockquote>
<p>原型每次请求时返回一个新的bean实例，所以第二次返回的bean为xml文件中定义的bean</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean作用域&quot;&gt;&lt;a href=&quot;#Spring-Bean作用域&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean作用域&quot;&gt;&lt;/a&gt;Spring Bean作用域&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring中，bean作用域用于确定哪种类型的 bean 实例应该从Spring容器中返回给调用者。bean支持的5种范围域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例 - 每个Spring IoC 容器返回一个bean实例&lt;/li&gt;
&lt;li&gt;原型 - 当每次请求时返回一个新的bean实例&lt;/li&gt;
&lt;li&gt;请求 - 返回每个HTTP请求的一个Bean实例&lt;/li&gt;
&lt;li&gt;会话 - 返回每个HTTP会话的一个bean实例&lt;/li&gt;
&lt;li&gt;会话 - 返回每个HTTP会话的一个bean实例&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Spring内部bean</title>
    <link href="http://yoursite.com/2017/08/12/Spring_0501_innerbean/"/>
    <id>http://yoursite.com/2017/08/12/Spring_0501_innerbean/</id>
    <published>2017-08-12T05:36:27.000Z</published>
    <updated>2017-09-19T01:45:10.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring内部bean"><a href="#Spring内部bean" class="headerlink" title="Spring内部bean"></a>Spring内部bean</h3><p>&emsp;&emsp;在Spring框架中，一个bean仅用于一个特定的属性，建议声明为一个内部bean。内部bean支持setter注入”property”和构造器注入”constructor-arg”。<br><a id="more"></a></p>
<h4 id="1-Spring不使用内部bean注入"><a href="#1-Spring不使用内部bean注入" class="headerlink" title="1. Spring不使用内部bean注入"></a>1. Spring不使用内部bean注入</h4><p>&emsp;&emsp;使用”ref”属性来引用”Person”bean到”Customer”Bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;person&quot; ref=&quot;PersonBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;PersonBean&quot; class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">		&lt;property name=&quot;address&quot; value=&quot;address1&quot; /&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;18&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-Spring内部bean使用property注入"><a href="#2-Spring内部bean使用property注入" class="headerlink" title="2. Spring内部bean使用property注入"></a>2. Spring内部bean使用property注入</h4><p>&emsp;&emsp;由于”lidolid”person bean 只用于Customer bean，这是更好地声明”lidolid” person作为一个内部 bean，通过property注入的方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;person&quot;&gt;</div><div class="line">			&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">				&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">				&lt;property name=&quot;address&quot; value=&quot;address1&quot; /&gt;</div><div class="line">				&lt;property name=&quot;age&quot; value=&quot;18&quot; /&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="3-Spring内部bean使用constructor-arg注入"><a href="#3-Spring内部bean使用constructor-arg注入" class="headerlink" title="3. Spring内部bean使用constructor-arg注入"></a>3. Spring内部bean使用constructor-arg注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;constructor-arg&gt;</div><div class="line">			&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">				&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">				&lt;property name=&quot;address&quot; value=&quot;address1&quot; /&gt;</div><div class="line">				&lt;property name=&quot;age&quot; value=&quot;18&quot; /&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring内部bean&quot;&gt;&lt;a href=&quot;#Spring内部bean&quot; class=&quot;headerlink&quot; title=&quot;Spring内部bean&quot;&gt;&lt;/a&gt;Spring内部bean&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring框架中，一个bean仅用于一个特定的属性，建议声明为一个内部bean。内部bean支持setter注入”property”和构造器注入”constructor-arg”。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="bean" scheme="http://yoursite.com/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean基础</title>
    <link href="http://yoursite.com/2017/08/11/Spring_0500_javabean/"/>
    <id>http://yoursite.com/2017/08/11/Spring_0500_javabean/</id>
    <published>2017-08-11T12:17:54.000Z</published>
    <updated>2017-09-19T01:21:39.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean基础"><a href="#Spring-Bean基础" class="headerlink" title="Spring Bean基础"></a>Spring Bean基础</h3><p>&emsp;&emsp;本文简单介绍一下Bean引用，Bean property注入方式和配置文件加载方式。<br><a id="more"></a></p>
<h4 id="1-Spring-Bean引用"><a href="#1-Spring-Bean引用" class="headerlink" title="1. Spring Bean引用"></a>1. Spring Bean引用</h4><p>&emsp;&emsp;在Spring，bean可以”访问”对方，通过bean配置文件指定相同或不同的引用。</p>
<h5 id="1-1-Bean在不同的XML文件"><a href="#1-1-Bean在不同的XML文件" class="headerlink" title="1.1 Bean在不同的XML文件"></a>1.1 Bean在不同的XML文件</h5><p>&emsp;&emsp;如果是在不同XML文件中的bean，可以用一个”ref”标签，”bean”属性引用它<br>File : Spring-Common.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;OutputHelper&quot; class=&quot;com.lidolid.output.OutputHelper&quot;&gt;</div><div class="line">		&lt;property name=&quot;outputGenerator&quot; &gt;</div><div class="line">			&lt;ref bean=&quot;CsvOutputGenerator&quot;/&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>File : Spring-Output.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CsvOutputGenerator&quot; class=&quot;com.yiibai.output.impl.CsvOutputGenerator&quot; /&gt;</div><div class="line">	&lt;bean id=&quot;JsonOutputGenerator&quot; class=&quot;com.yiibai.output.impl.JsonOutputGenerator&quot; /&gt;		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="1-2-Bean在同一个XML文件中的Bean"><a href="#1-2-Bean在同一个XML文件中的Bean" class="headerlink" title="1.2 Bean在同一个XML文件中的Bean"></a>1.2 Bean在同一个XML文件中的Bean</h5><p>&emsp;&emsp;如果引用在同一个XML文件中的bean，可以用”ref”标签，”local”属性引用它。<br>File : Spring-Common.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;OutputHelper&quot; class=&quot;com.yiibai.output.OutputHelper&quot;&gt;</div><div class="line">		&lt;property name=&quot;outputGenerator&quot; &gt;</div><div class="line">			&lt;ref local=&quot;CsvOutputGenerator&quot;/&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;CsvOutputGenerator&quot; class=&quot;com.lidolid.output.impl.CsvOutputGenerator&quot; /&gt;</div><div class="line">	&lt;bean id=&quot;JsonOutputGenerator&quot; class=&quot;com.lidolid.output.impl.JsonOutputGenerator&quot; /&gt;		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>其实，无论是在相同或不同的XML文件，”ref”标签可以访问一个bean，但是，对于该项目的可读性，如果引用了相同的 XML文件中声明 bean，建议应该使用”local”属性。</p>
</blockquote>
<h4 id="1-注入值到Spring-bean属性"><a href="#1-注入值到Spring-bean属性" class="headerlink" title="1. 注入值到Spring bean属性"></a>1. 注入值到Spring bean属性</h4><p>&emsp;&emsp;在Spring中，有三种方式注入值到 bean 属性:</p>
<ul>
<li>正常的方式</li>
<li>快捷方式</li>
<li>“p”模式</li>
</ul>
<h5 id="2-1-正常方式"><a href="#2-1-正常方式" class="headerlink" title="2.1 正常方式"></a>2.1 正常方式</h5><p>&emsp;&emsp;在一个”value”标签注入值，并附有”property”标签结束。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot;&gt;</div><div class="line">			&lt;value&gt;lidolid&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;type&quot;&gt;</div><div class="line">			&lt;value&gt;txt&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="2-2-快捷方式"><a href="#2-2-快捷方式" class="headerlink" title="2.2 快捷方式"></a>2.2 快捷方式</h5><p>&emsp;&emsp;注入值”value”属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;txt&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="2-3-“P”模式"><a href="#2-3-“P”模式" class="headerlink" title="2.3 “P”模式"></a>2.3 “P”模式</h5><p>&emsp;&emsp;通过使用”p”模式作为注入值到一个属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot; </div><div class="line">             p:name=&quot;lidolid&quot; p:type=&quot;txt&quot; /&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用”p”模式注入bean属性值时，要声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">声明 xmlns:p=”http://www.springframework.org/schema/p&quot;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="3-Spring-bean加载多个配置文件"><a href="#3-Spring-bean加载多个配置文件" class="headerlink" title="3. Spring bean加载多个配置文件"></a>3. Spring bean加载多个配置文件</h4><p>&emsp;&emsp;在一个大的项目结构，Spring bean配置文件位于不同的文件夹以便于维护和模块化。例如，Spring-Common.xml在common 文件夹中，Spring-Connection.xml 在connection文件夹，Spring-ModuleA.xml在ModuleA 文件夹等等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;common/Spring-Common.xml&quot;/&gt;</div><div class="line">        &lt;import resource=&quot;connection/Spring-Connection.xml&quot;/&gt;</div><div class="line">        &lt;import resource=&quot;moduleA/Spring-ModuleA.xml&quot;/&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean基础&quot;&gt;&lt;a href=&quot;#Spring-Bean基础&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean基础&quot;&gt;&lt;/a&gt;Spring Bean基础&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文简单介绍一下Bean引用，Bean property注入方式和配置文件加载方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="bean" scheme="http://yoursite.com/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring JavaConfig配置</title>
    <link href="http://yoursite.com/2017/08/10/Spring_0400_javaconfig/"/>
    <id>http://yoursite.com/2017/08/10/Spring_0400_javaconfig/</id>
    <published>2017-08-10T15:03:51.000Z</published>
    <updated>2017-09-19T04:44:10.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-JavaConfig配置"><a href="#Spring-JavaConfig配置" class="headerlink" title="Spring JavaConfig配置"></a>Spring JavaConfig配置</h3><p>&emsp;&emsp;从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bean定义在Spring配置XML文件或Java类中。<br>但是，仍然允许使用经典的XML方式来定义bean和配置，JavaConfig是另一种替代解决方案。<br><a id="more"></a><br>&emsp;&emsp;如下定义在Spring容器中的bean：<br>Spring XML file - applicationContext.xml :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</div><div class="line"> </div><div class="line">	&lt;bean id=&quot;helloBean&quot; class=&quot;com.lidolid.hello.impl.HelloWorldImpl&quot;&gt;</div><div class="line">		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;如下为等效的JavaConfig的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import com.yiibai.hello.HelloWorld;</div><div class="line">import com.yiibai.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class AppConfig &#123;</div><div class="line">	</div><div class="line">    @Bean(name=&quot;helloBean&quot;)</div><div class="line">    public HelloWorld helloWorld() &#123;</div><div class="line">        return new HelloWorldImpl();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="JavaConfig示例"><a href="#JavaConfig示例" class="headerlink" title="JavaConfig示例"></a>JavaConfig示例</h4><p>&emsp;&emsp;展示如何使用JavaConfig代替XML定义bean，使用properties文件注入bean的property内容。</p>
<h5 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h5><p><img src="https://i.imgur.com/z6zlZex.png" alt=""></p>
<h5 id="2-代码说明"><a href="#2-代码说明" class="headerlink" title="2. 代码说明"></a>2. 代码说明</h5><p>&emsp;&emsp;接口HelloWorld：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.hello;</div><div class="line"></div><div class="line">public interface HelloWorld &#123;</div><div class="line">	void printHelloWorld(String msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;HelloWorld接口实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.hello.impl;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line"></div><div class="line">public class HelloWorldImpl implements HelloWorld &#123;</div><div class="line">	@Value(&quot;$&#123;app.implName&#125;&quot;)</div><div class="line">	private String implName;</div><div class="line"></div><div class="line">	@Value(&quot;$&#123;app.helloName&#125;&quot;)</div><div class="line">	private String helloName;</div><div class="line"></div><div class="line">	public String getImplName() &#123;</div><div class="line">		return implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setImplName(String implName) &#123;</div><div class="line">		this.implName = implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getHelloName() &#123;</div><div class="line">		return helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHelloName(String helloName) &#123;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl(String implName, String helloName) &#123;</div><div class="line">		super();</div><div class="line">		this.implName = implName;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;HelloWorldImpl [implName=&quot; + implName + &quot;, helloName=&quot; + helloName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void printHelloWorld(String msg) &#123;</div><div class="line">		System.out.println(msg + &quot; &quot; + implName + &quot; &quot; + helloName);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl() &#123;</div><div class="line">		super();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>说明：要给property注入值，相当于xml bean定义的property属性。可以直接指定@value(“property_name”)，但是基于spring松耦合的考虑，使用properties文件注入的方式更符合松耦合的思想。</p>
</blockquote>
<p>&emsp;&emsp;新增bean配置类AppConfig：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.ComponentScan;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.PropertySource;</div><div class="line">import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line">import com.lidolid.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">@ComponentScan</div><div class="line">@PropertySource(&quot;properties/cons.properties&quot;)</div><div class="line">public class AppConfig &#123;</div><div class="line">	</div><div class="line">	@Bean</div><div class="line">	public static PropertySourcesPlaceholderConfigurer placeholderConfigurer() &#123;</div><div class="line">		return new PropertySourcesPlaceholderConfigurer();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    @Bean(name=&quot;helloBean&quot;)</div><div class="line">    public HelloWorld helloWorld() &#123;</div><div class="line">        return new HelloWorldImpl();</div><div class="line">    &#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：由于property值注入使用了@Value(“${app.implName}”) 这种占位符的方式，必须要配置一个PropertyPlaceholderConfigurer bean或PropertySourcesPlaceholderConfigurer bean。从Spring 3.1开始，推荐使PropertySourcesPlaceholderConfigurer，因为它能够基于Spring Environment及其属性源来解析占位符。即上述代码中的定义。<br>@PropertySource(“properties/cons.properties”)用来指明用于注入的properties文件的路径</p>
</blockquote>
<p>&emsp;&emsp;cons.properties文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.implName=chenhao</div><div class="line">app.helloName=nihao</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;调用测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.config.AppConfig;</div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);</div><div class="line">		HelloWorld obj = (HelloWorld) context.getBean(&quot;helloBean&quot;);</div><div class="line"></div><div class="line">		obj.printHelloWorld(&quot;Spring Java Config&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-运行结果"><a href="#3-运行结果" class="headerlink" title="3. 运行结果"></a>3. 运行结果</h5><p><img src="https://i.imgur.com/OxytFN0.png" alt=""></p>
<blockquote>
<p>properties文件定义的内容已经注入</p>
</blockquote>
<h4 id="多个bean配置类合并问题"><a href="#多个bean配置类合并问题" class="headerlink" title="多个bean配置类合并问题"></a>多个bean配置类合并问题</h4><p>&emsp;&emsp;在xml定义中，便于开发与管理，可定义多个xml文件，最终使用import标签合并到一个xml文件中，最终在使用时即可通过一个bean文件获取所有定义的bean。在JavaConfig中也有相似的功能，合并多个bean配置类。<br>xml方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;database/Spring-Datasource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;customer/Spring-Customer.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>JavaConfig方式：<br>SchedulerConfig配置类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">import com.lidolid.core.SchedulerBo;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class SchedulerConfig &#123;</div><div class="line"></div><div class="line">	@Bean(name=&quot;scheduler&quot;)</div><div class="line">	public SchedulerBo suchedulerBo()&#123;		</div><div class="line">		return new SchedulerBo();		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CustomerConfig配置类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">import com.lidolid.core.CustomerBo;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class CustomerConfig &#123;</div><div class="line"></div><div class="line">	@Bean(name = &quot;customer&quot;)</div><div class="line">	public CustomerBo customerBo() &#123;</div><div class="line">		return new CustomerBo();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置类的合并Appconfig：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">@Import(&#123; CustomerConfig.class, SchedulerConfig.class &#125;)</div><div class="line">public class AppConfig &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-JavaConfig不使用AppConfig配置类的实现"><a href="#4-JavaConfig不使用AppConfig配置类的实现" class="headerlink" title="4. JavaConfig不使用AppConfig配置类的实现"></a>4. JavaConfig不使用AppConfig配置类的实现</h4><p>&emsp;&emsp;上述实现使用了一个配置类，也可以不使用，直接在类上定义，如下：</p>
<h5 id="4-1-HelloWorldImpl类"><a href="#4-1-HelloWorldImpl类" class="headerlink" title="4.1 HelloWorldImpl类"></a>4.1 HelloWorldImpl类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.hello.impl;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.PropertySource;</div><div class="line">import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line"></div><div class="line">@Configuration(&quot;helloBean&quot;)</div><div class="line">@PropertySource(&quot;properties/cons.properties&quot;)</div><div class="line">public class HelloWorldImpl implements HelloWorld &#123;</div><div class="line">	</div><div class="line">	@Bean</div><div class="line">	public static PropertySourcesPlaceholderConfigurer placeholderConfigurer() &#123;</div><div class="line">		return new PropertySourcesPlaceholderConfigurer();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Value(&quot;$&#123;app.implName&#125;&quot;)</div><div class="line">	private String implName;</div><div class="line"></div><div class="line">	@Value(&quot;$&#123;app.helloName&#125;&quot;)</div><div class="line">	private String helloName;</div><div class="line"></div><div class="line">	public String getImplName() &#123;</div><div class="line">		return implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setImplName(String implName) &#123;</div><div class="line">		this.implName = implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getHelloName() &#123;</div><div class="line">		return helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHelloName(String helloName) &#123;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl(String implName, String helloName) &#123;</div><div class="line">		super();</div><div class="line">		this.implName = implName;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;HelloWorldImpl [implName=&quot; + implName + &quot;, helloName=&quot; + helloName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void printHelloWorld(String msg) &#123;</div><div class="line">		System.out.println(msg + &quot; &quot; + implName + &quot; &quot; + helloName);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl() &#123;</div><div class="line">		super();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-2-调用代码"><a href="#4-2-调用代码" class="headerlink" title="4.2 调用代码"></a>4.2 调用代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line">import com.lidolid.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldImpl.class);</div><div class="line">		HelloWorld obj = (HelloWorld) context.getBean(&quot;helloBean&quot;);</div><div class="line"></div><div class="line">		obj.printHelloWorld(&quot;Spring Java Config&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>同样可以最终配置一个AppConfig配置类，将所有的Bean包含到一个类中，最后在调用时只是使用那个配置类</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-JavaConfig配置&quot;&gt;&lt;a href=&quot;#Spring-JavaConfig配置&quot; class=&quot;headerlink&quot; title=&quot;Spring JavaConfig配置&quot;&gt;&lt;/a&gt;Spring JavaConfig配置&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bean定义在Spring配置XML文件或Java类中。&lt;br&gt;但是，仍然允许使用经典的XML方式来定义bean和配置，JavaConfig是另一种替代解决方案。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="JavaConfig" scheme="http://yoursite.com/tags/JavaConfig/"/>
    
  </entry>
  
  <entry>
    <title>Spring 使用@Autowired注解自动装配</title>
    <link href="http://yoursite.com/2017/08/10/Spring_0301_@autowired/"/>
    <id>http://yoursite.com/2017/08/10/Spring_0301_@autowired/</id>
    <published>2017-08-09T16:16:59.000Z</published>
    <updated>2017-09-18T07:32:15.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-使用-Autowired注解自动装配"><a href="#Spring-使用-Autowired注解自动装配" class="headerlink" title="Spring 使用@Autowired注解自动装配"></a>Spring 使用@Autowired注解自动装配</h3><p>&emsp;&emsp;在Spring中，可以使用 @Autowired 注解通过setter方法，构造函数或字段自动装配Bean,@Autowired注解是通过匹配数据类型自动装配Bean的。<br><a id="more"></a></p>
<p>&emsp;&emsp;Person基类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String name;</div><div class="line">	private String address;</div><div class="line">	private int age;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getAddress() &#123;</div><div class="line">		return address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAddress(String address) &#123;</div><div class="line">		this.address = address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer实体类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line">	</div><div class="line">	private Person person;</div><div class="line">	private int type;</div><div class="line">	private String action;</div><div class="line"></div><div class="line">	public Person getPerson() &#123;</div><div class="line">		return person;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void setPerson(Person person) &#123;</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getType() &#123;</div><div class="line">		return type;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setType(int type) &#123;</div><div class="line">		this.type = type;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getAction() &#123;</div><div class="line">		return action;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAction(String action) &#123;</div><div class="line">		this.action = action;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	public Customer(Person person) &#123;</div><div class="line">		super();</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [person=&quot; + person + &quot;, type=&quot; + type + &quot;, action=&quot; + action + &quot;]&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;applicationContext.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 使用@Autowire注解时bean配置的两种方式如下： --&gt;</div><div class="line">	&lt;!-- &lt;context:annotation-config /&gt; --&gt;</div><div class="line">	&lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;PersonBean&quot; class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">		&lt;property name=&quot;address&quot; value=&quot;address ABC&quot; /&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;29&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：使用@Autowired注解自动装配时，要启用@Autowired，必须注册”AutowiredAnnotationBeanPostProcessor”，可以使用如下两种方式注册：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;context:annotation-config /&gt;</div><div class="line">或者</div><div class="line">&lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>调用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123; &quot;applicationContext.xml&quot; &#125;);</div><div class="line"></div><div class="line">		Customer cust = (Customer) context.getBean(&quot;CustomerBean&quot;);</div><div class="line">		System.out.println(cust);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/KeMZvw6.png" alt=""></p>
<blockquote>
<p>注意点，由于@AutoWired是使用byType自动装配的，加入applicationContext中存在两个相同类型的bean，容器将无法自动按类型装配。@Autowired提供了一种解决方案，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line">	&lt;!-- &lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt; --&gt;</div><div class="line">	&lt;context:annotation-config /&gt;	</div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; &gt;</div><div class="line">		&lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;</div><div class="line">	&lt;/bean&gt;		</div><div class="line">	&lt;bean id=&quot;personA&quot; class=&quot;com.lidolid.common.Person&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolidA&quot; /&gt;</div><div class="line">	&lt;/bean&gt;	</div><div class="line">	&lt;bean id=&quot;personB&quot; class=&quot;com.lidolid.common.Person&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolidB&quot; /&gt;</div><div class="line">	&lt;/bean&gt;	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.beans.factory.annotation.Qualifier;</div><div class="line">public class Customer &#123;</div><div class="line">	@Autowired</div><div class="line">	@Qualifier(&quot;personB&quot;)</div><div class="line">	private Person person;</div><div class="line">	private int type;</div><div class="line">	private String action;</div><div class="line">	public Person getPerson() &#123;</div><div class="line">		return person;</div><div class="line">	&#125;</div><div class="line">	public void setPerson(Person person) &#123;</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line">	public int getType() &#123;</div><div class="line">		return type;</div><div class="line">	&#125;</div><div class="line">	public void setType(int type) &#123;</div><div class="line">		this.type = type;</div><div class="line">	&#125;</div><div class="line">	public String getAction() &#123;</div><div class="line">		return action;</div><div class="line">	&#125;</div><div class="line">	public void setAction(String action) &#123;</div><div class="line">		this.action = action;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [person=&quot; + person + &quot;, type=&quot; + type + &quot;, action=&quot;</div><div class="line">				+ action + &quot;]&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-使用-Autowired注解自动装配&quot;&gt;&lt;a href=&quot;#Spring-使用-Autowired注解自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring 使用@Autowired注解自动装配&quot;&gt;&lt;/a&gt;Spring 使用@Autowired注解自动装配&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring中，可以使用 @Autowired 注解通过setter方法，构造函数或字段自动装配Bean,@Autowired注解是通过匹配数据类型自动装配Bean的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="自动装配" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean自动装配</title>
    <link href="http://yoursite.com/2017/08/08/Spring_0300_autowiredd/"/>
    <id>http://yoursite.com/2017/08/08/Spring_0300_autowiredd/</id>
    <published>2017-08-08T15:39:47.000Z</published>
    <updated>2017-09-18T07:50:27.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean自动装配"><a href="#Spring-Bean自动装配" class="headerlink" title="Spring Bean自动装配"></a>Spring Bean自动装配</h3><p>&emsp;&emsp;在Spring框架，可以用 auto-wiring 功能会自动装配Bean。要启用它，只需要在 <bean>定义“autowire”属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; autowire=&quot;byName&quot; /&gt;</div></pre></td></tr></table></figure></bean></p>
<p>&emsp;&emsp;在Spring中，支持 5 自动装配模式。</p>
<ul>
<li>no – 缺省情况下，自动配置是通过”ref”属性手动设定</li>
<li>byName – 根据属性名称自动装配。如果一个bean的名称和其他bean属性的名称是一样的，将会自装配它。</li>
<li>byType – 按数据类型自动装配。如果一个bean的数据类型是用其它bean属性的数据类型，兼容并自动装配它。</li>
<li>constructor – 在构造函数参数的byType方式。</li>
<li>autodetect – 如果找到默认的构造函数，使用”自动装配用构造”; 否则，使用”按类型自动装配”。</li>
</ul>
<a id="more"></a>
<h4 id="1-byName"><a href="#1-byName" class="headerlink" title="1. byName"></a>1. byName</h4><p>&emsp;&emsp;在Spring中，”按名称自动装配”是指，如果一个bean的名称与其他bean属性的名称是一样的，那么将自动装配它。<br>&emsp;&emsp;例如，如果”customer” bean有一个”address”属性，Spring会在当前容器中找到”address”bean，并自动装配。如果没有匹配找到，那么什么也不做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- customer has a property name &quot;address&quot; --&gt;</div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; autowire=&quot;byName&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;address&quot; class=&quot;com.lidolid.common.Address&quot; &gt;</div><div class="line">		&lt;property name=&quot;fulladdress&quot; value=&quot;YiLong Road, CA 188&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-byType"><a href="#2-byType" class="headerlink" title="2. byType"></a>2. byType</h4><p>&emsp;&emsp;在Spring中，”类型自动装配”的意思是如果一个bean的数据类型与其它bean属性的数据类型相同，将自动兼容装配它。<br>&emsp;&emsp;例如，一个”persion” bean 公开以”ability”类数据类型作为属性，Spring会找到ability类相同的数据类型，并自动装配它的Bean。如果没有匹配找到，它什么也不做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- person has a property type of class &quot;ability&quot; --&gt;</div><div class="line">	&lt;bean id=&quot;person&quot; class=&quot;com.lidolid.common.Person&quot; autowire=&quot;byType&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;bean id=&quot;invisible&quot; class=&quot;com.lidolid.common.Ability&quot; &gt;</div><div class="line">		&lt;property name=&quot;skill&quot; value=&quot;Invisible&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：在上述byType自动装配时，如果容器中存在两个Ability类型对的bean，容器将无法确认从哪个bean装配，将会报错UnsatisfiedDependencyException。</p>
</blockquote>
<h4 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h4><p>&emsp;&emsp;在Spring中，可以使用”通过构造方法自动装配”，实际上是按构造函数的参数类型自动装配。 这意味着，如果一个bean的数据类型与其他bean的构造器参数的数据类型是相同的，那么将自动装配。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;person&quot; class=&quot;com.lidolid.common.Person&quot; autowire=&quot;constructor&quot; /&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;ability&quot; class=&quot;com.lidolid.common.Ability&quot; &gt;</div><div class="line">	&lt;property name=&quot;skill&quot; value=&quot;Invisible&quot; /&gt;</div><div class="line">	&lt;property name=&quot;test&quot; value=&quot;test&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>解释：ability bean的数据类型与person bean的构造器数据类型一致，那么person bean将自动装配</p>
</blockquote>
<h4 id="4-autodetect"><a href="#4-autodetect" class="headerlink" title="4. autodetect"></a>4. autodetect</h4><p>&emsp;&emsp;通过bean类的自省机制（introspection）来决定是使用constructor还是byType方式进行自动装配。如果发现默认的构造器，那么将使用byType方式。<br>KungFu类定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class KungFu &#123;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Language [name=&quot; + name + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Panda类定义，存在默认参数类型为Kungfu的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public Panda(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Panda(String kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>applicationContext.xml定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">   &lt;!-- // by www.yiibai.com --&gt;</div><div class="line">	&lt;bean id=&quot;panda&quot; class=&quot;com.lidolid.common.Panda&quot; autowire=&quot;autodetect&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;bean id=&quot;kungfu&quot; class=&quot;com.lidolid.common.KungFu&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Tai Ji&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>调用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</div><div class="line"></div><div class="line">		Panda panda = (Panda) context.getBean(&quot;panda&quot;);</div><div class="line">		System.out.println(panda);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://i.imgur.com/Md15Ztq.png" alt=""></p>
<blockquote>
<p>Panda类存在参数类型为Kungfu的构造函数，所以此时会通过constructor自动装配。</p>
</blockquote>
<p>修改Panda类，删除参数类型为Kungfu的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public Panda(String kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/Z1dYOjK.png" alt=""></p>
<blockquote>
<p>由于Panda类中存在构造函数，参数类型为String，容器中不存在类型为String的bean，所以报错</p>
</blockquote>
<p>修改Panda类，删除所有构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/MgbPndD.png" alt=""></p>
<blockquote>
<p>不存在构造函数，byType自动装配</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean自动装配&quot;&gt;&lt;a href=&quot;#Spring-Bean自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean自动装配&quot;&gt;&lt;/a&gt;Spring Bean自动装配&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring框架，可以用 auto-wiring 功能会自动装配Bean。要启用它，只需要在 &lt;bean&gt;定义“autowire”属性。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;bean id=&amp;quot;customer&amp;quot; class=&amp;quot;com.lidolid.common.Customer&amp;quot; autowire=&amp;quot;byName&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/bean&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在Spring中，支持 5 自动装配模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no – 缺省情况下，自动配置是通过”ref”属性手动设定&lt;/li&gt;
&lt;li&gt;byName – 根据属性名称自动装配。如果一个bean的名称和其他bean属性的名称是一样的，将会自装配它。&lt;/li&gt;
&lt;li&gt;byType – 按数据类型自动装配。如果一个bean的数据类型是用其它bean属性的数据类型，兼容并自动装配它。&lt;/li&gt;
&lt;li&gt;constructor – 在构造函数参数的byType方式。&lt;/li&gt;
&lt;li&gt;autodetect – 如果找到默认的构造函数，使用”自动装配用构造”; 否则，使用”按类型自动装配”。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="自动装配" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring使用JdbcTemplate实现查询和修改</title>
    <link href="http://yoursite.com/2017/08/07/Spring_0201_JdbcTemplate/"/>
    <id>http://yoursite.com/2017/08/07/Spring_0201_JdbcTemplate/</id>
    <published>2017-08-07T05:20:51.000Z</published>
    <updated>2017-09-18T04:26:23.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring使用JdbcTemplate实现查询和修改"><a href="#Spring使用JdbcTemplate实现查询和修改" class="headerlink" title="Spring使用JdbcTemplate实现查询和修改"></a>Spring使用JdbcTemplate实现查询和修改</h3><p>&emsp;&emsp;在Spring JDBC开发中，可以使用 JdbcTemplate 和 JdbcDaoSupport 类来简化整个数据库的操作过程。本文介绍一下使用JdbcTemplate的用法。<br><a id="more"></a></p>
<h4 id="1-实验环境"><a href="#1-实验环境" class="headerlink" title="1. 实验环境"></a>1. 实验环境</h4><ul>
<li>Spring 4.3.10</li>
<li>Spring-jdbc    4.3.10</li>
<li>Mysql-connector 5.0.2</li>
</ul>
<h4 id="2-工程结构"><a href="#2-工程结构" class="headerlink" title="2. 工程结构"></a>2. 工程结构</h4><p><img src="https://i.imgur.com/E6SlzyM.png" alt=""></p>
<h4 id="3-代码说明"><a href="#3-代码说明" class="headerlink" title="3. 代码说明"></a>3. 代码说明</h4><h5 id="3-1-Customer模型"><a href="#3-1-Customer模型" class="headerlink" title="3.1 Customer模型"></a>3.1 Customer模型</h5><p>&emsp;&emsp;添加一个客户模型用来存储用户的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.model;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line">	int custId;</div><div class="line">	String name;</div><div class="line">	int age;</div><div class="line"></div><div class="line">	public int getCustId() &#123;</div><div class="line">		return custId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setCustId(int custId) &#123;</div><div class="line">		this.custId = custId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Customer(int custId, String name, int age) &#123;</div><div class="line">		super();</div><div class="line">		this.custId = custId;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Customer() &#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-2-数据访问对象-DAO-模式"><a href="#3-2-数据访问对象-DAO-模式" class="headerlink" title="3.2 数据访问对象 (DAO) 模式"></a>3.2 数据访问对象 (DAO) 模式</h5><p>&emsp;&emsp;Customer Dao 接口.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public interface CustomerDAO &#123;</div><div class="line">	public Customer findByCustomerId(int custId);</div><div class="line"></div><div class="line">	public List&lt;Customer&gt; findAll();</div><div class="line"></div><div class="line">	public String findCustomerNameById(int custId);</div><div class="line"></div><div class="line">	public int findTotalCustomer();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer Dao接口具体实现.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao.impl;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</div><div class="line">import org.springframework.jdbc.core.support.JdbcDaoSupport;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class JdbcCustomerDAO extends JdbcDaoSupport implements CustomerDAO &#123;</div><div class="line">	public Customer findByCustomerId(int custId) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT * FROM CUSTOMER WHERE CUST_ID = ?&quot;;</div><div class="line"></div><div class="line">		Customer customer = getJdbcTemplate().queryForObject(sql, new Object[] &#123; custId &#125;,</div><div class="line">				new BeanPropertyRowMapper(Customer.class));</div><div class="line">		return customer;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Customer&gt; findAll() &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT * FROM CUSTOMER&quot;;</div><div class="line">		List&lt;Customer&gt; customers = getJdbcTemplate().query(sql, new BeanPropertyRowMapper(Customer.class));</div><div class="line">		return customers;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String findCustomerNameById(int custId) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT NAME FROM CUSTOMER WHERE CUST_ID = ?&quot;;</div><div class="line">		String name = (String) getJdbcTemplate().queryForObject(sql, new Object[] &#123; custId &#125;, String.class);</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int findTotalCustomer() &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT COUNT(*) FROM CUSTOMER&quot;;</div><div class="line">		int total = getJdbcTemplate().queryForObject(sql, Integer.class);</div><div class="line"></div><div class="line">		return total;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-3-Spring-bean配置"><a href="#3-3-Spring-bean配置" class="headerlink" title="3.3 Spring bean配置"></a>3.3 Spring bean配置</h5><p>&emsp;&emsp;File : Spring-Datasource.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;File : Spring-Customer.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;File : Spring-Module.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;database/Spring-Datasource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;customer/Spring-Customer.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;测试程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main( String[] args )</div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">    		new ClassPathXmlApplicationContext(&quot;Spring-Module.xml&quot;);</div><div class="line">    	 </div><div class="line">        CustomerDAO customerDAO = (CustomerDAO) context.getBean(&quot;customerDAO&quot;);</div><div class="line">        Customer customer = new Customer(1, &quot;lidolid&quot;,18);</div><div class="line">        customerDAO.insert(customer);</div><div class="line">    	</div><div class="line">        Customer customer1 = customerDAO.findByCustomerId(1);</div><div class="line">        System.out.println(customer1);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>对比直接使用JDBC实现的代码可以发现，使用JdbcTemplate可节省大量的冗余代码，因为JdbcTemplate类会自动处理它。在使用JDBC开发时，建议使用JdbcTemplate和JdbcDaoSupport，而不使用自己的JDBC编程代码。</p>
</blockquote>
<h4 id="4-Spring-SimpleJdbcTemplate-batchUpdate使用说明"><a href="#4-Spring-SimpleJdbcTemplate-batchUpdate使用说明" class="headerlink" title="4. Spring SimpleJdbcTemplate batchUpdate使用说明"></a>4. Spring SimpleJdbcTemplate batchUpdate使用说明</h4><p>&emsp;&emsp;当需要一次修改很多条数据时，可以使用batchUpdate，它可以实现对SQL脚本的一次编译，多次使用，从而提高直销效率。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao.impl;</div><div class="line"></div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.jdbc.core.BatchPreparedStatementSetter;</div><div class="line">import org.springframework.jdbc.core.support.JdbcDaoSupport;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class JdbcCustomerDAO extends JdbcDaoSupport implements CustomerDAO &#123;</div><div class="line">	public void insertBatch(final List&lt;Customer&gt; customers) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;INSERT INTO CUSTOMER &quot; + &quot;(CUST_ID, NAME, AGE) VALUES (?, ?, ?)&quot;;</div><div class="line"></div><div class="line">		getJdbcTemplate().batchUpdate(sql, new BatchPreparedStatementSetter() &#123;</div><div class="line"></div><div class="line">			public void setValues(PreparedStatement ps, int i) throws SQLException &#123;</div><div class="line">				Customer customer = customers.get(i);</div><div class="line">				ps.setLong(1, customer.getCustId());</div><div class="line">				ps.setString(2, customer.getName());</div><div class="line">				ps.setInt(3, customer.getAge());</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			public int getBatchSize() &#123;</div><div class="line">				return customers.size();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void insertBatchSQL(final String sql) &#123;</div><div class="line">		getJdbcTemplate().batchUpdate(new String[] &#123; sql &#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring使用JdbcTemplate实现查询和修改&quot;&gt;&lt;a href=&quot;#Spring使用JdbcTemplate实现查询和修改&quot; class=&quot;headerlink&quot; title=&quot;Spring使用JdbcTemplate实现查询和修改&quot;&gt;&lt;/a&gt;Spring使用JdbcTemplate实现查询和修改&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring JDBC开发中，可以使用 JdbcTemplate 和 JdbcDaoSupport 类来简化整个数据库的操作过程。本文介绍一下使用JdbcTemplate的用法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="JdbcTemplate" scheme="http://yoursite.com/tags/JdbcTemplate/"/>
    
  </entry>
  
  <entry>
    <title>Spring JDBC</title>
    <link href="http://yoursite.com/2017/08/06/Spring_0200_JDBC_Exp/"/>
    <id>http://yoursite.com/2017/08/06/Spring_0200_JDBC_Exp/</id>
    <published>2017-08-06T15:44:09.000Z</published>
    <updated>2017-09-18T05:11:00.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><p>&emsp;&emsp;Spring对JDBC做了相关支持，本实现演示通过Spring连接并操纵Mysql数据库。<br><a id="more"></a></p>
<h4 id="1-实验环境"><a href="#1-实验环境" class="headerlink" title="1. 实验环境"></a>1. 实验环境</h4><ul>
<li>Spring 4.3.10</li>
<li>Spring-jdbc    4.3.10</li>
<li>Mysql-connector 5.0.2</li>
</ul>
<h4 id="2-工程结构"><a href="#2-工程结构" class="headerlink" title="2. 工程结构"></a>2. 工程结构</h4><p><img src="https://i.imgur.com/2HLT2V3.png" alt=""></p>
<h4 id="3-代码说明"><a href="#3-代码说明" class="headerlink" title="3. 代码说明"></a>3. 代码说明</h4><h5 id="3-1-Customer模型"><a href="#3-1-Customer模型" class="headerlink" title="3.1 Customer模型"></a>3.1 Customer模型</h5><p>&emsp;&emsp;添加一个客户模型用来存储用户的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.model;</div><div class="line"></div><div class="line">import java.sql.Timestamp;</div><div class="line"></div><div class="line">public class Customer </div><div class="line">&#123;</div><div class="line">	int custId;</div><div class="line">	String name;</div><div class="line">	int age;</div><div class="line">	//getter and setter methods</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-2-数据访问对象-DAO-模式"><a href="#3-2-数据访问对象-DAO-模式" class="headerlink" title="3.2 数据访问对象 (DAO) 模式"></a>3.2 数据访问对象 (DAO) 模式</h5><p>&emsp;&emsp;Customer Dao 接口.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao;</div><div class="line"></div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public interface CustomerDAO &#123;</div><div class="line">	public void insert(Customer customer);</div><div class="line">	public Customer findByCustomerId(int custId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;客户的DAO实现，使用 JDBC 发出简单的 insert 和 select SQL语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao.impl;</div><div class="line"></div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.SQLException;</div><div class="line"></div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class JdbcCustomerDAO implements CustomerDAO &#123;</div><div class="line">	private DataSource dataSource;</div><div class="line"></div><div class="line">	public void setDataSource(DataSource dataSource) &#123;</div><div class="line">		this.dataSource = dataSource;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void insert(Customer customer) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;INSERT INTO CUSTOMER &quot; + &quot;(CUST_ID, NAME, AGE) VALUES (?, ?, ?)&quot;;</div><div class="line">		Connection conn = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			conn = dataSource.getConnection();</div><div class="line">			PreparedStatement ps = conn.prepareStatement(sql);</div><div class="line">			ps.setInt(1, customer.getCustId());</div><div class="line">			ps.setString(2, customer.getName());</div><div class="line">			ps.setInt(3, customer.getAge());</div><div class="line">			ps.executeUpdate();</div><div class="line">			ps.close();</div><div class="line"></div><div class="line">		&#125; catch (SQLException e) &#123;</div><div class="line">			throw new RuntimeException(e);</div><div class="line"></div><div class="line">		&#125; finally &#123;</div><div class="line">			if (conn != null) &#123;</div><div class="line">				try &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125; catch (SQLException e) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Customer findByCustomerId(int custId) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT * FROM CUSTOMER WHERE CUST_ID = ?&quot;;</div><div class="line"></div><div class="line">		Connection conn = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			conn = dataSource.getConnection();</div><div class="line">			PreparedStatement ps = conn.prepareStatement(sql);</div><div class="line">			ps.setInt(1, custId);</div><div class="line">			Customer customer = null;</div><div class="line">			ResultSet rs = ps.executeQuery();</div><div class="line">			if (rs.next()) &#123;</div><div class="line">				customer = new Customer(rs.getInt(&quot;CUST_ID&quot;), rs.getString(&quot;NAME&quot;), rs.getInt(&quot;Age&quot;));</div><div class="line">			&#125;</div><div class="line">			rs.close();</div><div class="line">			ps.close();</div><div class="line">			return customer;</div><div class="line">		&#125; catch (SQLException e) &#123;</div><div class="line">			throw new RuntimeException(e);</div><div class="line">		&#125; finally &#123;</div><div class="line">			if (conn != null) &#123;</div><div class="line">				try &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125; catch (SQLException e) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-3-Spring-bean配置"><a href="#3-3-Spring-bean配置" class="headerlink" title="3.3 Spring bean配置"></a>3.3 Spring bean配置</h5><p>&emsp;&emsp;File : Spring-Datasource.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;File : Spring-Customer.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;File : Spring-Module.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;database/Spring-Datasource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;customer/Spring-Customer.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;测试程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main( String[] args )</div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">    		new ClassPathXmlApplicationContext(&quot;Spring-Module.xml&quot;);</div><div class="line">    	 </div><div class="line">        CustomerDAO customerDAO = (CustomerDAO) context.getBean(&quot;customerDAO&quot;);</div><div class="line">        Customer customer = new Customer(1, &quot;lidolid&quot;,18);</div><div class="line">        customerDAO.insert(customer);</div><div class="line">    	</div><div class="line">        Customer customer1 = customerDAO.findByCustomerId(1);</div><div class="line">        System.out.println(customer1);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4. 运行结果"></a>4. 运行结果</h4><p><img src="https://i.imgur.com/5ouHIXT.png" alt=""></p>
<blockquote>
<p>注意：在Spring项目中使用JDBC时，要引用Spring-jdbc的jar包，否则会报错。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-JDBC&quot;&gt;&lt;a href=&quot;#Spring-JDBC&quot; class=&quot;headerlink&quot; title=&quot;Spring JDBC&quot;&gt;&lt;/a&gt;Spring JDBC&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring对JDBC做了相关支持，本实现演示通过Spring连接并操纵Mysql数据库。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring松耦合</title>
    <link href="http://yoursite.com/2017/08/05/Spring_0101_loosecouple/"/>
    <id>http://yoursite.com/2017/08/05/Spring_0101_loosecouple/</id>
    <published>2017-08-05T15:51:06.000Z</published>
    <updated>2017-09-18T04:21:45.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring松耦合"><a href="#Spring松耦合" class="headerlink" title="Spring松耦合"></a>Spring松耦合</h3><p>&emsp;&emsp;面向对象的概念，是一个很好的设计来打破系统进入一个组可重用的对象。然而，当系统变大，尤其是在Java项目，庞大的对象依赖关系将一直紧密耦合引起对象难以管理或修改。在这种情况下，可以使用Spring框架作为一个核心模块轻松高效地管理所有的对象依赖。<br><a id="more"></a></p>
<h4 id="输出生成器例子"><a href="#输出生成器例子" class="headerlink" title="输出生成器例子"></a>输出生成器例子</h4><p>&emsp;&emsp;假设你的项目有一个函数输出的内容，以CSV或JSON格式。代码可能看起来像下面的例子：<br>&emsp;&emsp;File:IOutputGenerator.java – 输出生成器接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.output;                                                                                                                                                                                                                              </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">public interface IOutputGenerator                                                                                                                                                                                                                       </div><div class="line">&#123;                                                                                                                                                                                                                                                       </div><div class="line">	public void generateOutput();                                                                                                                                                                                                                       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;File:CsvOutputGenerator.java – 一个CSV输出生成器用来实现IOutputGenerator接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.output.impl;</div><div class="line"></div><div class="line">import com.lidolid.output.IOutputGenerator;</div><div class="line"></div><div class="line">public class CsvOutputGenerator implements IOutputGenerator</div><div class="line">&#123;</div><div class="line">	public void generateOutput()&#123;</div><div class="line">		System.out.println(&quot;Csv Output Generator&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;File:JsonOutputGenerator.java – 一个JSON输出生成器用来实现IOutputGenerator接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.output.impl;</div><div class="line"></div><div class="line">import com.lidolid.output.IOutputGenerator;</div><div class="line"></div><div class="line">public class JsonOutputGenerator implements IOutputGenerator</div><div class="line">&#123;</div><div class="line">	public void generateOutput()&#123;</div><div class="line">		System.out.println(&quot;Json Output Generator&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;有如下几个方法来调用IOutputGenerator: </p>
<h5 id="1-直接调用"><a href="#1-直接调用" class="headerlink" title="1. 直接调用"></a>1. 直接调用</h5><p>&emsp;&emsp;正常的方式，直接调用它。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;                                                                                                                                                                                                                              </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">import com.lidolid.output.IOutputGenerator;                                                                                                                                                                                                              </div><div class="line">import com.lidolid.output.impl.CsvOutputGenerator;                                                                                                                                                                                                       </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">public class App                                                                                                                                                                                                                                        </div><div class="line">&#123;                                                                                                                                                                                                                                                       </div><div class="line">    public static void main( String[] args )                                                                                                                                                                                                            </div><div class="line">    &#123;                                                                                                                                                                                                                                                   </div><div class="line">    	IOutputGenerator output = new CsvOutputGenerator();                                                                                                                                                                                             </div><div class="line">    	output.generateOutput();                                                                                                                                                                                                                        </div><div class="line">    &#125;                                                                                                                                                                                                                                                   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>存在问题:以这种方式，这个问题是“output”紧密到CsvOutputGenerator耦合，输出生成的每一个变化可能涉及代码变化。如果此代码分散在你的项目中，输出生成的每一次变化都会让你受苦。</p>
</blockquote>
<h5 id="2-用辅助类调用它"><a href="#2-用辅助类调用它" class="headerlink" title="2. 用辅助类调用它"></a>2. 用辅助类调用它</h5><p>&emsp;&emsp;创建一个辅助类将所有输出实现在类的内部。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.output;                                                                                                                                                                                                                              </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">import com.lidolid.output.IOutputGenerator;                                                                                                                                                                                                              </div><div class="line">import com.lidolid.output.impl.CsvOutputGenerator;                                                                                                                                                                                                       </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">public class OutputHelper                                                                                                                                                                                                                               </div><div class="line">&#123;                                                                                                                                                                                                                                                       </div><div class="line">	IOutputGenerator outputGenerator;                                                                                                                                                                                                                   </div><div class="line">	                                                                                                                                                                                                                                                    </div><div class="line">	public OutputHelper()&#123;                                                                                                                                                                                                                              </div><div class="line">		outputGenerator = new CsvOutputGenerator();                                                                                                                                                                                                     </div><div class="line">	&#125;                                                                                                                                                                                                                                                   </div><div class="line">	                                                                                                                                                                                                                                                    </div><div class="line">	public void generateOutput()&#123;                                                                                                                                                                                                                       </div><div class="line">		outputGenerator.generateOutput();                                                                                                                                                                                                               </div><div class="line">	&#125;                                                                                                                                                                                                                                                   </div><div class="line">	                                                                                                                                                                                                                                                    </div><div class="line">&#125;                                                                                                                                                                                                                                                       </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">//通过辅助类调用                                                                                                                                                                                                                                        </div><div class="line">package com.lidolid.common;                                                                                                                                                                                                                              </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">import com.lidolid.output.OutputHelper;                                                                                                                                                                                                                  </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">public class App                                                                                                                                                                                                                                        </div><div class="line">&#123;                                                                                                                                                                                                                                                       </div><div class="line">    public static void main( String[] args )                                                                                                                                                                                                            </div><div class="line">    &#123;                                                                                                                                                                                                                                                   </div><div class="line">    	OutputHelper output = new OutputHelper();                                                                                                                                                                                                       </div><div class="line">    	output.generateOutput();                                                                                                                                                                                                                        </div><div class="line">    &#125;                                                                                                                                                                                                                                                   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>存在问题:这看起来比之前的更优雅，只需要管理一个辅助类，但是辅助类仍是紧耦合 CsvOutputGenerator，输出生成的每一个变化仍然涉及小的代码更改。</p>
</blockquote>
<h5 id="3-Spring"><a href="#3-Spring" class="headerlink" title="3.  Spring"></a>3.  Spring</h5><p>&emsp;&emsp;Spring 可以让输出生成松散的耦合到输出发生器。OutputHelper类更小的修改。<br>&emsp;&emsp;创建一个 Spring bean 的配置文件，并在这里声明所有的Java对象的依赖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Spring-Common.xml --&gt;                                                                                                                                                                                                                              </div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;                                                                                                                                                                                              </div><div class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;                                                                                                                                                                                                   </div><div class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                                                                                                                                                                                         </div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;                                                                                                                                                                                      </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">	&lt;bean id=&quot;OutputHelper&quot; class=&quot;com.lidolid.output.OutputHelper&quot;&gt;                                                                                                                                                                                     </div><div class="line">		&lt;property name=&quot;outputGenerator&quot; ref=&quot;CsvOutputGenerator&quot; /&gt;                                                                                                                                                                                    </div><div class="line">	&lt;/bean&gt;                                                                                                                                                                                                                                             </div><div class="line">	                                                                                                                                                                                                                                                    </div><div class="line">	&lt;bean id=&quot;CsvOutputGenerator&quot; class=&quot;com.lidolid.output.impl.CsvOutputGenerator&quot; /&gt;                                                                                                                                                                  </div><div class="line">	&lt;bean id=&quot;JsonOutputGenerator&quot; class=&quot;com.lidolid.output.impl.JsonOutputGenerator&quot; /&gt;                                                                                                                                                           </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;通过Spring来调用它 </p>
<pre><code>package com.lidolid.common;                                                                                                                                                                                                                              

import org.springframework.context.ApplicationContext;                                                                                                                                                                                                  
import org.springframework.context.support.ClassPathXmlApplicationContext;                                                                                                                                                                              

import com.lidolid.output.OutputHelper;                                                                                                                                                                                                                  

public class App                                                                                                                                                                                                                                        
{                                                                                                                                                                                                                                                       
    public static void main( String[] args )                                                                                                                                                                                                            
    {                                                                                                                                                                                                                                                   
        ApplicationContext context =                                                                                                                                                                                                                    
           new ClassPathXmlApplicationContext(new String[] {&quot;Spring-Common.xml&quot;});                                                                                                                                                                      

        OutputHelper output = (OutputHelper)context.getBean(&quot;OutputHelper&quot;);                                                                                                                                                                            
        output.generateOutput();                                                                                                                                                                                                                        

    }                                                                                                                                                                                                                                                   
}
</code></pre><blockquote>
<p>现在，只需要改变 Spring XML 文件使用不同的输出生成器。只修改 Spring XML 文件而不需要无码修改，这意味着更少的错误。</p>
</blockquote>
<h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>&emsp;&emsp;有了Spring框架 - 这种依赖注入(DI)为对象的依赖关系管理有用的特性，使大型Java项目开发管理中更优雅的，高度灵活和便于维护。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring松耦合&quot;&gt;&lt;a href=&quot;#Spring松耦合&quot; class=&quot;headerlink&quot; title=&quot;Spring松耦合&quot;&gt;&lt;/a&gt;Spring松耦合&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;面向对象的概念，是一个很好的设计来打破系统进入一个组可重用的对象。然而，当系统变大，尤其是在Java项目，庞大的对象依赖关系将一直紧密耦合引起对象难以管理或修改。在这种情况下，可以使用Spring框架作为一个核心模块轻松高效地管理所有的对象依赖。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="松耦合" scheme="http://yoursite.com/tags/%E6%9D%BE%E8%80%A6%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate查询之HQL</title>
    <link href="http://yoursite.com/2017/08/05/Hibernate_hql/"/>
    <id>http://yoursite.com/2017/08/05/Hibernate_hql/</id>
    <published>2017-08-05T14:04:39.000Z</published>
    <updated>2017-09-15T08:43:45.479Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;展示HQL的简单用法<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testHQL_01() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Category&quot;);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_02() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Category c where c.name &gt; &apos;c5&apos;&quot;);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_03() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Category c order by c.name desc&quot;);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_04() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	//distinct查询不同的对象，即主键不同的对象，可以省略</div><div class="line">	Query q = session.createQuery(&quot;select distinct c from Category c order by c.name desc&quot;);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_05() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	/*Query q = session.createQuery(&quot;from Category c where c.id &gt; :min and c.id &lt; :max&quot;);</div><div class="line">	q.setParameter(&quot;min&quot;, 2);</div><div class="line">	q.setParameter(&quot;max&quot;, 6);*/</div><div class="line">	Query q = session.createQuery(&quot;from Category c where c.id &gt; :min and c.id &lt; :max&quot;).setParameter(&quot;min&quot;, 2)</div><div class="line">			.setParameter(&quot;max&quot;, 6);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_06() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Category c order by c.name desc&quot;).setFirstResult(2).setMaxResults(5);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_07() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	//distinct查询不同的对象，即主键不同的对象，可以省略</div><div class="line">	Query q = session.createQuery(&quot;select c.id, c.name from Category c order by c.name desc&quot;);</div><div class="line">	List&lt;Object[]&gt; categories = (List&lt;Object[]&gt;) q.list();</div><div class="line">	for (Object[] object : categories) &#123;</div><div class="line">		System.out.println(object[0] + &quot;:&quot; + object[1]);</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//将fetch_type设置为lazy时，将不会有第二条sql语句</div><div class="line">@Test</div><div class="line">public void testHQL_08() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Topic t where t.category.id = 1&quot;);</div><div class="line">	List&lt;Topic&gt; topics = (List&lt;Topic&gt;) q.list();</div><div class="line">	for (Topic t : topics) &#123;</div><div class="line">		System.out.println(t.getTitle());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_09() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Msg m where m.topic.category.id = 1&quot;);</div><div class="line"></div><div class="line">	for (Object object : q.list()) &#123;</div><div class="line">		Msg m = (Msg) object;</div><div class="line">		System.out.println(m.getCont());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_10() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(</div><div class="line">			&quot;select new com.lidolid.hibernate.model.MsgInfe(m.id, m.cont, m.topic.title, m.topic.category.name) from Msg m&quot;);</div><div class="line"></div><div class="line">	for (Object object : q.list()) &#123;</div><div class="line">		MsgInfe m = (MsgInfe) object;</div><div class="line">		System.out.println(m);</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//left right join</div><div class="line">//为什么不能直接写Category名，而必须写t.category</div><div class="line">//因为可能存在多个成员变量(同一个类)，需要指明使用哪个成员变量做连接</div><div class="line">@Test</div><div class="line">public void testHQL_11() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;select t.title, c.name from Topic t join t.category c&quot;);</div><div class="line"></div><div class="line">	for (Object object : q.list()) &#123;</div><div class="line">		Object[] m = (Object[]) object;</div><div class="line">		System.out.println(m[0] + &quot;-&quot; + m[1]);</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用uniqueResult</div><div class="line">@Test</div><div class="line">public void testHQL_12() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Msg m where m = :MsgToSearch&quot;);</div><div class="line">	Msg m = new Msg();</div><div class="line">	m.setId(1);</div><div class="line">	q.setParameter(&quot;MsgToSearch&quot;, m);</div><div class="line">	Msg result = (Msg) q.uniqueResult();</div><div class="line">	System.out.println(result.getCont());</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用uniqueResult</div><div class="line">@Test</div><div class="line">public void testHQL_13() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;select count(*) from Msg m&quot;);</div><div class="line">	Long count = (Long) q.uniqueResult();</div><div class="line">	System.out.println(count);</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;展示HQL的简单用法&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="HQL" scheme="http://yoursite.com/tags/HQL/"/>
    
  </entry>
  
  <entry>
    <title>Spring示例Hello World</title>
    <link href="http://yoursite.com/2017/08/05/Spring_0100_HelloWorld/"/>
    <id>http://yoursite.com/2017/08/05/Spring_0100_HelloWorld/</id>
    <published>2017-08-05T14:04:39.000Z</published>
    <updated>2017-09-15T11:57:47.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring示例Hello-World"><a href="#Spring示例Hello-World" class="headerlink" title="Spring示例Hello World"></a>Spring示例Hello World</h3><p>&emsp;&emsp;Spring框架，是一个非常强大的反转控制(IOC)框架，以帮助分离项目组件之间的依赖关系。反转控制(IOC)就是传统通过程序控制的对象装配改由spring容器来控制。下面通过Hello World示例，来简单展示一下Spring的基础配置及反转控制的含义。<br>&emsp;&emsp;前一段时间学习使用了Maven这个项目管理工具，感觉可以更好的帮助理解Spring各版本的差异、更方便的管理工程，所以之后Spring相关的工程，都会使用Maven创建。<br><a id="more"></a></p>
<h4 id="1-Spring架构"><a href="#1-Spring架构" class="headerlink" title="1. Spring架构"></a>1. Spring架构</h4><p>&emsp;&emsp;Spring架构如下：<br><img src="https://i.imgur.com/3v2DwXd.png" alt=""></p>
<ul>
<li>IoC Container: 这是最重要的，也是最基础的， Spring的基础。它的作用是配置和Java对象的生命周期管理。这篇教程中我们将学习这一部分。</li>
<li>DAO, ORM, AOP, WEB: 该模块可用于将工具或框架集成到了Spring。</li>
</ul>
<h4 id="2-示例程序Hello-World"><a href="#2-示例程序Hello-World" class="headerlink" title="2. 示例程序Hello World"></a>2. 示例程序Hello World</h4><p>&emsp;&emsp;2.1 程序架构：<br><img src="https://i.imgur.com/3RQtkqw.png" alt=""></p>
<p>&emsp;&emsp;2.2 pom.xml配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">  &lt;groupId&gt;com.lidolid&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;Spring_0100_HelloWorld&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">  </div><div class="line">  &lt;dependencies&gt;</div><div class="line"> </div><div class="line">        &lt;!-- Spring Core --&gt;</div><div class="line">        &lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">         </div><div class="line">        &lt;!-- Spring Context --&gt;</div><div class="line">        &lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        </div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;5.0.2&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">         </div><div class="line">    &lt;/dependencies&gt;</div><div class="line">    </div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;2.3 代码说明</p>
<ul>
<li>HelloWorld.java接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface HelloWorld &#123;</div><div class="line">	public void sayHello();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>SpringHelloWorld.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class SpringHelloWorld implements HelloWorld&#123;</div><div class="line">	@Override</div><div class="line">    public void sayHello() &#123;</div><div class="line">        System.out.println(&quot;Spring Say Hello!!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>StrutsHelloWorld.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class StrutsHelloWorld implements HelloWorld &#123;</div><div class="line">	@Override</div><div class="line">	public void sayHello() &#123;</div><div class="line">		System.out.println(&quot;Struts Say Hello!!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>HelloWorldService.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class HelloWorldService &#123;</div><div class="line">	private HelloWorld helloWorld;</div><div class="line"></div><div class="line">	public HelloWorldService() &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHelloWorld(HelloWorld helloWorld) &#123;</div><div class="line">		this.helloWorld = helloWorld;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorld getHelloWorld() &#123;</div><div class="line">		return this.helloWorld;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>HelloProgram.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class HelloProgram &#123;</div><div class="line">	private static ApplicationContext context;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</div><div class="line"></div><div class="line">		HelloWorldService service = (HelloWorldService) context.getBean(&quot;helloWorldService&quot;);</div><div class="line"></div><div class="line">		HelloWorld hw = service.getHelloWorld();</div><div class="line"></div><div class="line">		hw.sayHello();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>beans.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line">  </div><div class="line">    &lt;bean id=&quot;springHelloWorld&quot;</div><div class="line">        class=&quot;com.lidolid.tutorial.spring.helloworld.impl.SpringHelloWorld&quot;&gt;&lt;/bean&gt;</div><div class="line">    &lt;bean id=&quot;strutsHelloWorld&quot;</div><div class="line">        class=&quot;com.lidolid.tutorial.spring.helloworld.impl.StrutsHelloWorld&quot;&gt;&lt;/bean&gt;</div><div class="line">  </div><div class="line">  </div><div class="line">    &lt;bean id=&quot;helloWorldService&quot;</div><div class="line">        class=&quot;com.lidolid.tutorial.spring.helloworld.HelloWorldService&quot;&gt;</div><div class="line">        &lt;property name=&quot;helloWorld&quot; ref=&quot;springHelloWorld&quot;/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">  </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;2.4 执行结果<br><img src="https://i.imgur.com/Su15BsU.png" alt=""></p>
<p>&emsp;&emsp;2.5 结果分析<br><img src="https://i.imgur.com/aQA3PsK.png" alt=""><br>&emsp;&emsp;如果不使用Spring，上图红框中的代码可由如下代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SpringHelloWorld springHelloWorld = new SpringHelloWorld();</div><div class="line">HelloWorldService service = new HelloWorldService();</div><div class="line">service.setHelloWorld(springHelloWorld);</div><div class="line">HelloWorld hw = service.getHelloWorld();</div><div class="line">hw.sayHello();</div></pre></td></tr></table></figure></p>
<p>也就是说HelloWorldService对象的HelloWorld属性具体是什么，是在程序中指定的。但在使用了Spring之后，通过(HelloWorldService) context.getBean(“helloWorldService”)便获取了service，且已经指定了service对象中的HelloWorld属性的实现。实现不是有程序控制的，而是Spring容器控制的。这就是反转控制(IOC)<br><img src="https://i.imgur.com/jEUx9PM.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring示例Hello-World&quot;&gt;&lt;a href=&quot;#Spring示例Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Spring示例Hello World&quot;&gt;&lt;/a&gt;Spring示例Hello World&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring框架，是一个非常强大的反转控制(IOC)框架，以帮助分离项目组件之间的依赖关系。反转控制(IOC)就是传统通过程序控制的对象装配改由spring容器来控制。下面通过Hello World示例，来简单展示一下Spring的基础配置及反转控制的含义。&lt;br&gt;&amp;emsp;&amp;emsp;前一段时间学习使用了Maven这个项目管理工具，感觉可以更好的帮助理解Spring各版本的差异、更方便的管理工程，所以之后Spring相关的工程，都会使用Maven创建。&lt;br&gt;
    
    </summary>
    
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate树状映射</title>
    <link href="http://yoursite.com/2017/08/05/Hibernate_tree_mapping/"/>
    <id>http://yoursite.com/2017/08/05/Hibernate_tree_mapping/</id>
    <published>2017-08-04T16:11:47.000Z</published>
    <updated>2017-09-15T08:28:19.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate树状映射"><a href="#Hibernate树状映射" class="headerlink" title="Hibernate树状映射"></a>Hibernate树状映射</h3><p>&emsp;&emsp;在系统中，经常会用到无限级递归的树形结构，比如菜单、组织机构管理、多级分类等等，一般是在同一个表中定义父子关系实现这种树形结构，本文主要讲述如何运用hibernate全注解的方式实现这个功能。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class Org &#123;</div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;Org&gt; chidren = new HashSet&lt;Org&gt;();</div><div class="line">	private Org parent;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@OneToMany(mappedBy = &quot;parent&quot;, cascade = CascadeType.ALL, fetch = FetchType.EAGER)</div><div class="line">	public Set&lt;Org&gt; getChidren() &#123;</div><div class="line">		return chidren;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setChidren(Set&lt;Org&gt; chidren) &#123;</div><div class="line">		this.chidren = chidren;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToOne</div><div class="line">	@JoinColumn(name = &quot;parent_id&quot;)</div><div class="line">	public Org getParent() &#123;</div><div class="line">		return parent;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setParent(Org parent) &#123;</div><div class="line">		this.parent = parent;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testSave() &#123;</div><div class="line">	Org o = new Org();</div><div class="line">	o.setName(&quot;总公司&quot;);</div><div class="line">	Org o1 = new Org();</div><div class="line">	o1.setName(&quot;分公司1&quot;);</div><div class="line">	Org o2 = new Org();</div><div class="line">	o2.setName(&quot;分公司2&quot;);</div><div class="line">	Org o11 = new Org();</div><div class="line">	o11.setName(&quot;分公司1下部门1&quot;);</div><div class="line">	Org o12 = new Org();</div><div class="line">	o12.setName(&quot;分公司1下部门2&quot;);</div><div class="line">	o.getChidren().add(o1);</div><div class="line">	o.getChidren().add(o2);</div><div class="line">	o1.getChidren().add(o11);</div><div class="line">	o1.getChidren().add(o12);</div><div class="line"></div><div class="line">	o11.setParent(o1);</div><div class="line">	o12.setParent(o1);</div><div class="line">	o1.setParent(o);</div><div class="line">	o2.setParent(o);</div><div class="line"></div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	s.save(o);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testLoad() &#123;</div><div class="line">	testSave();</div><div class="line"></div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	Org o = (Org) s.load(Org.class, 1);</div><div class="line">	print(o, 0);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void print(Org o, int level) &#123;</div><div class="line">	String preStr = &quot;&quot;;</div><div class="line">	for (int i = 0; i &lt; level; i++) &#123;</div><div class="line">		preStr += &quot;----&quot;;</div><div class="line">	&#125;</div><div class="line">	System.out.println(preStr + o.getName());</div><div class="line">	for (Org child : o.getChidren()) &#123;</div><div class="line">		print(child, level + 1);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生成的建表语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Org (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	parent_id integer, </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">ALTER TABLE Org</div><div class="line">	ADD CONSTRAINT FKcrmmi14x7qre4lqh8qkjhmud3 FOREIGN KEY (parent_id) REFERENCES Org (id)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate树状映射&quot;&gt;&lt;a href=&quot;#Hibernate树状映射&quot; class=&quot;headerlink&quot; title=&quot;Hibernate树状映射&quot;&gt;&lt;/a&gt;Hibernate树状映射&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在系统中，经常会用到无限级递归的树形结构，比如菜单、组织机构管理、多级分类等等，一般是在同一个表中定义父子关系实现这种树形结构，本文主要讲述如何运用hibernate全注解的方式实现这个功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="树状映射" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate继承映射</title>
    <link href="http://yoursite.com/2017/08/04/Hibernate_extends_mapping/"/>
    <id>http://yoursite.com/2017/08/04/Hibernate_extends_mapping/</id>
    <published>2017-08-04T14:23:56.000Z</published>
    <updated>2017-09-15T08:16:36.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate继承映射"><a href="#Hibernate继承映射" class="headerlink" title="Hibernate继承映射"></a>Hibernate继承映射</h3><p>&emsp;&emsp;在面向对象开发中，类与类之间是可以相互继承的（单向继承），而Hibernate中也对这种继承关系提供了自己风格的封装，这就是我们接下来要介绍的Hibernate继承映射的三种策略：</p>
<ul>
<li>SingleTable：每棵类继承树一张表，表内有所有字段</li>
<li>TablePerClass：每个子类一张表，每张表都有自己所有的属性字段</li>
<li>Joined：父类、子类、子类各一张表，父表中有公共字段，子表中有个性字段+外键约束<a id="more"></a>
</li>
</ul>
<h4 id="SingleTable"><a href="#SingleTable" class="headerlink" title="SingleTable"></a>SingleTable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">//父类Person</div><div class="line">@Entity</div><div class="line">@Inheritance(strategy = InheritanceType.SINGLE_TABLE)</div><div class="line">@DiscriminatorColumn(name = &quot;discriminator&quot;, discriminatorType = DiscriminatorType.STRING)</div><div class="line">@DiscriminatorValue(&quot;person&quot;)</div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//子类Student</div><div class="line">@Entity</div><div class="line">@DiscriminatorValue(&quot;student&quot;)</div><div class="line">public class Student extends Person&#123;</div><div class="line"></div><div class="line">	private int score;</div><div class="line"></div><div class="line">	public int getScore() &#123;</div><div class="line">		return score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setScore(int score) &#123;</div><div class="line">		this.score = score;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//子类Teacher</div><div class="line">@Entity</div><div class="line">@DiscriminatorValue(&quot;teacher&quot;)</div><div class="line">public class Teacher extends Person&#123;</div><div class="line">	private String title;</div><div class="line"></div><div class="line">	public String getTitle() &#123;</div><div class="line">		return title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTitle(String title) &#123;</div><div class="line">		this.title = title;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：由于Teacher和Student存放在一个表中，所以需要新增一个字段来表明是Teacher记录还是Student记录，具体实现为父类设置字段名即类型@DiscriminatorColumn(name = “discriminator”, discriminatorType = DiscriminatorType.STRING)，子类设置填充的值@DiscriminatorValue(“student”)，@DiscriminatorValue(“teacher”)</p>
</blockquote>
<p>生成的建表语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Person (</div><div class="line">	discriminator varchar(31) NOT NULL, </div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	score integer, </div><div class="line">	title varchar(255), </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM</div></pre></td></tr></table></figure></p>
<p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testSave()&#123;</div><div class="line">	Student s = new Student();</div><div class="line">	s.setName(&quot;s1&quot;);</div><div class="line">	s.setScore(99);</div><div class="line">	Teacher t = new Teacher();</div><div class="line">	t.setName(&quot;t1&quot;);</div><div class="line">	t.setTitle(&quot;高级&quot;);</div><div class="line">	</div><div class="line">	Session session  = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	session.save(s);</div><div class="line">	session.save(t);</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testLoad()&#123;</div><div class="line">	testSave();</div><div class="line">	</div><div class="line">	Session session  = sf.openSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Student t = (Student)session.load(Student.class, 1);</div><div class="line">	System.out.println(t.getName());</div><div class="line">	</div><div class="line">	Person p = (Person)session.load(Person.class, 2);</div><div class="line">	System.out.println(p.getName());</div><div class="line">	</div><div class="line">	session.getTransaction().commit();</div><div class="line">	session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="TablePerClass"><a href="#TablePerClass" class="headerlink" title="TablePerClass"></a>TablePerClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)</div><div class="line">@javax.persistence.TableGenerator(name = &quot;t_gen&quot;, table = &quot;t_gen_table&quot;, valueColumnName = &quot;t_value&quot;, pkColumnName = &quot;person_pk&quot;, initialValue = 1, allocationSize = 1)</div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue(generator = &quot;t_gen&quot;, strategy = GenerationType.TABLE)</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Entity</div><div class="line">public class Student extends Person &#123;</div><div class="line">	private int score;</div><div class="line"></div><div class="line">	public int getScore() &#123;</div><div class="line">		return score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setScore(int score) &#123;</div><div class="line">		this.score = score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@Entity</div><div class="line">public class Teacher extends Person&#123;</div><div class="line">	private String title;</div><div class="line"></div><div class="line">	public String getTitle() &#123;</div><div class="line">		return title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTitle(String title) &#123;</div><div class="line">		this.title = title;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：要保证每次插入的Student和Teacher的ID要不能相同。加入数据库中Teacher和Student中各有一条ID为1的记录，加入通过Person p = (Person)session.load(Person.class, 1)获取id为1的person的信息，将无法定位<br>所以主键不在使用自增，而是用TABLE</p>
</blockquote>
<p>生成的建表语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Person (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">CREATE TABLE Student (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	score integer NOT NULL, </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">CREATE TABLE Teacher (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	title varchar(255), </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM</div></pre></td></tr></table></figure></p>
<h4 id="Joined"><a href="#Joined" class="headerlink" title="Joined"></a>Joined</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Inheritance(strategy = InheritanceType.JOINED)</div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Entity</div><div class="line">public class Student extends Person &#123;</div><div class="line">	private int id;</div><div class="line">	private int score;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getScore() &#123;</div><div class="line">		return score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setScore(int score) &#123;</div><div class="line">		this.score = score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@Entity</div><div class="line">public class Teacher extends Person&#123;</div><div class="line">	private int id;</div><div class="line">	private String title;</div><div class="line">	</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getTitle() &#123;</div><div class="line">		return title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTitle(String title) &#123;</div><div class="line">		this.title = title;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成的建表语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Person (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">CREATE TABLE Student (</div><div class="line">	score integer NOT NULL, </div><div class="line">	id integer NOT NULL, </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">CREATE TABLE Teacher (</div><div class="line">	title varchar(255), </div><div class="line">	id integer NOT NULL, </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">ALTER TABLE Student</div><div class="line">	ADD CONSTRAINT FK3bkmp4kohbl54m14tb2fcqya3 FOREIGN KEY (id) REFERENCES Person (id);</div><div class="line"></div><div class="line">ALTER TABLE Teacher</div><div class="line">	ADD CONSTRAINT FKdohms8kj41vdcnbope5glh9c6 FOREIGN KEY (id) REFERENCES Person (id)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate继承映射&quot;&gt;&lt;a href=&quot;#Hibernate继承映射&quot; class=&quot;headerlink&quot; title=&quot;Hibernate继承映射&quot;&gt;&lt;/a&gt;Hibernate继承映射&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在面向对象开发中，类与类之间是可以相互继承的（单向继承），而Hibernate中也对这种继承关系提供了自己风格的封装，这就是我们接下来要介绍的Hibernate继承映射的三种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SingleTable：每棵类继承树一张表，表内有所有字段&lt;/li&gt;
&lt;li&gt;TablePerClass：每个子类一张表，每张表都有自己所有的属性字段&lt;/li&gt;
&lt;li&gt;Joined：父类、子类、子类各一张表，父表中有公共字段，子表中有个性字段+外键约束
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="CRUD" scheme="http://yoursite.com/tags/CRUD/"/>
    
  </entry>
  
</feed>
