<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hal的博客</title>
  <subtitle>愿你走出半生，仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-15T05:25:07.119Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hibernate一对多多对一双向外键关联的CRUD操作</title>
    <link href="http://yoursite.com/2017/08/04/Hibernate_one2many_many2one_crud/"/>
    <id>http://yoursite.com/2017/08/04/Hibernate_one2many_many2one_crud/</id>
    <published>2017-08-04T02:11:01.000Z</published>
    <updated>2017-09-15T05:25:07.119Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate一对多双向外键关联的CRUD操作"><a href="#Hibernate一对多双向外键关联的CRUD操作" class="headerlink" title="Hibernate一对多双向外键关联的CRUD操作"></a>Hibernate一对多双向外键关联的CRUD操作</h3><p>&emsp;&emsp;在使用Hibernate内置接口或JPA接口进行CRUD操作时，实体类的映射设置，会影响CRUD的操作结果。本文的内容就是探讨cascade和fetch属性设置对CRUD操作的影响，具体内容如下：<br><a id="more"></a></p>
<ul>
<li>cascade属性设置<ul>
<li>cascade可以设定持久化时对于关联对象的级联操作，CUD操作受cascade属性影响，R操作不熟不受cascade属性的影响</li>
<li>cascade属性仅仅是帮开发者减少了编程的麻烦，开发过程中也可以不使用</li>
<li>取值范围：CascadeType.ALL，CascadeType.PERSIST，CascadeType.MERGE，CascadeType.REFRESH，CascadeType.REMOVE，CascadeType.DETACH</li>
</ul>
</li>
</ul>
<h4 id="cascade使用示例"><a href="#cascade使用示例" class="headerlink" title="cascade使用示例"></a>cascade使用示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">//Group实体类</div><div class="line">@Entity</div><div class="line">@Table(name = &quot;t_group&quot;)</div><div class="line">public class Group &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;User&gt; users = new HashSet&lt;User&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//cascade属性设置为CascadeType.ALL，表明CUD操作都会做级联操作</div><div class="line">	@OneToMany(mappedBy = &quot;group&quot;, cascade = &#123; CascadeType.ALL &#125;)</div><div class="line">	public Set&lt;User&gt; getUsers() &#123;</div><div class="line">		return users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsers(Set&lt;User&gt; users) &#123;</div><div class="line">		this.users = users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//User实体类</div><div class="line">@Entity</div><div class="line">@Table(name = &quot;t_user&quot;)</div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Group group;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//cascade属性设置为CascadeType.ALL，表明CUD操作都会做级联操作</div><div class="line">	@ManyToOne(cascade = &#123; CascadeType.ALL&#125;)</div><div class="line">	public Group getGroup() &#123;</div><div class="line">		return group;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroup(Group group) &#123;</div><div class="line">		this.group = group;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Save测试方法："><a href="#Save测试方法：" class="headerlink" title="Save测试方法："></a>Save测试方法：</h5><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testSaveUser()&#123;</div><div class="line">	Group g = new Group();</div><div class="line">	g.setName(&quot;gr&quot;);</div><div class="line">	User u = new User();</div><div class="line">	u.setName(&quot;chenhao&quot;);</div><div class="line">	//设置双向关系</div><div class="line">	g.getUsers().add(u);</div><div class="line">	u.setGroup(g);</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	//存储User对象，观察会不会级联存储Group对象</div><div class="line">	s.save(u);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/6cx3uyt.png" alt=""><br>由于User实体类cascade设置了CascadeType.ALL，CUD操作都会做级联操作，所以在存储User时也会级联存储Group</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testSaveGroup()&#123;</div><div class="line">	//双向关系要设定双向关联</div><div class="line">	User u1 = new User();</div><div class="line">	u1.setName(&quot;u1&quot;);</div><div class="line">	User u2 = new User();</div><div class="line">	u2.setName(&quot;u2&quot;);</div><div class="line">	Group g = new Group();</div><div class="line">	g.setName(&quot;gr&quot;);</div><div class="line">	g.getUsers().add(u1);</div><div class="line">	g.getUsers().add(u2);</div><div class="line">	u1.setGroup(g);</div><div class="line">	u2.setGroup(g);</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	s.save(g);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/ULtk7XN.png" alt=""></p>
</blockquote>
<h5 id="Update测试方法"><a href="#Update测试方法" class="headerlink" title="Update测试方法:"></a>Update测试方法:</h5><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testUpdateUser()&#123;	</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	User u = (User)s.get(User.class, 2);	</div><div class="line">	s.getTransaction().commit();		</div><div class="line">	u.setName(&quot;user&quot;);</div><div class="line">	u.getGroup().setName(&quot;agggg&quot;);	</div><div class="line">	Session s2 = sf.getCurrentSession();</div><div class="line">	s2.beginTransaction();</div><div class="line">	//update方法会级联修改Group</div><div class="line">	s2.update(u);	</div><div class="line">	s2.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/th5mZcD.png" alt=""></p>
</blockquote>
<h5 id="Delete测试方法："><a href="#Delete测试方法：" class="headerlink" title="Delete测试方法："></a>Delete测试方法：</h5><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testDeleteUser()&#123;	</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction(); </div><div class="line">	User u = (User)s.load(User.class, 2);</div><div class="line">	s.delete(u);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/WNKuo0h.png" alt=""><br>可以看到将所有的user都删除了，grouop也删除除了，因为UserUser实体类cascade设置了CascadeType.ALL，所以在删除User时也会级联删除Group，同时Group实体类cascade也设置了CascadeType.ALL，所以会级联删除User。所以结果会是删除所有的同组user及所在组的group记录<br>实际应用中这种操作往往是不合理的，下面介绍打破这种级联删除的方法<br>方法1： 手动将User对象的Group属性设置为null，打破级联关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testDeleteUser()&#123;			</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction(); </div><div class="line">	User u = (User)s.load(User.class, 2);</div><div class="line">	//打破关联关系，避免级联删除</div><div class="line">	u.setGroup(null);</div><div class="line">	s.delete(u);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/VG3Hkdz.png" alt=""><br>方法2： 使用HQL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testDeleteUser()&#123;		</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction(); </div><div class="line">	User u = (User)s.load(User.class, 2);</div><div class="line">	s.delete(u);	</div><div class="line">	//使用HQL</div><div class="line">	/*s.createQuery(&quot;delete from User u  where u.id =2&quot;).executeUpdate();*/</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
<p><em>注意：cascade的属性指明做什么操作的时候跟关联的对象是绑在一起的，如果属性设置的persist，那么persist操作时对象是绑定在一起的，如果属性设置的是merge，那么merge操作时对象是绑定在一起的，如果属性设置的是refresh，那么refresh操作时对象是绑定在一起的，如果属性设置的是remove，对于hibernate来说delete操作时对象是绑定在一起的，会与EntityManager(JPA/EJB3)来说remove操作时对象是绑定在一起的</em></p>
<ul>
<li>fetch属性设置<ul>
<li>getch可以设定持久化查询操作时对于关联对象的级联操作</li>
<li>对于一对多关系，多的那一方默认值为fetch=FetchType.LAZY(不级联查询)，一的那一方默认值为fetch=FetchType.EAGER</li>
<li>取值范围：FetchType.LAZY，FetchType.EAGER</li>
</ul>
</li>
</ul>
<h4 id="fetch使用示例"><a href="#fetch使用示例" class="headerlink" title="fetch使用示例"></a>fetch使用示例</h4><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testGetUser()&#123;	</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	User u = (User)s.get(User.class, 2);</div><div class="line">	System.out.println(u.getGroup().getName());</div><div class="line">	s.getTransaction().commit();		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/KrB9lLh.png" alt=""><br>User默认的FetchType为EAGER(级联查询)，所以可以取到Group的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testGetGroup()&#123;	</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	Group g = (Group)s.get(Group.class, 1);</div><div class="line">	s.getTransaction().commit();	</div><div class="line">	System.out.println(g.getName());</div><div class="line">	System.out.println(g.getUsers().size());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在测试GetGroup方法，当打印g.getUsers().size()时，会报错，因为Group的FetchType默认为LAZY，所以不会去取group下的User的信息，session中不存在user的信息，使用时会报错<br>将Group的FetchType改为EAGER重新测试<br><img src="https://i.imgur.com/EWblhL1.png" alt=""><br>会进行级联查询，取出group下的user信息</p>
</blockquote>
<p><em>注意：使用fetch时尽量不要双方都设置为EAGER，有可能会发出多余的查询语句；另外双方都设置fetch的时候需要谨慎，结合具体应用，一般用LAZY不使用EAGER，在多方数量不多的时候可以考虑使用，因为需要级联取出的数量不多，对效率影响较小</em></p>
<h4 id="实验总结："><a href="#实验总结：" class="headerlink" title="实验总结："></a>实验总结：</h4><ul>
<li><p>映射模型</p>
<ul>
<li>jpa annotation</li>
<li>hibernate annotation extension</li>
<li>hibernate xml</li>
<li>jpaxml</li>
</ul>
</li>
<li><p>编程接口</p>
<ul>
<li>jpa</li>
<li>hibernate</li>
</ul>
</li>
<li>数据查询语言<ul>
<li>HQL</li>
<li>EJBQL(JPQL)</li>
</ul>
</li>
<li>如果想要做删除或更新，应先做load(get)，然后对对象进行更新。除非精确知道ID</li>
<li>如果想要消除关联关系，先设定关系为null，再删除对应记录，否则有可能会产生垃圾数据</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate一对多双向外键关联的CRUD操作&quot;&gt;&lt;a href=&quot;#Hibernate一对多双向外键关联的CRUD操作&quot; class=&quot;headerlink&quot; title=&quot;Hibernate一对多双向外键关联的CRUD操作&quot;&gt;&lt;/a&gt;Hibernate一对多双向外键关联的CRUD操作&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在使用Hibernate内置接口或JPA接口进行CRUD操作时，实体类的映射设置，会影响CRUD的操作结果。本文的内容就是探讨cascade和fetch属性设置对CRUD操作的影响，具体内容如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="CRUD" scheme="http://yoursite.com/tags/CRUD/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象关联之多对多关联</title>
    <link href="http://yoursite.com/2017/08/03/Hibernate_Many2Many/"/>
    <id>http://yoursite.com/2017/08/03/Hibernate_Many2Many/</id>
    <published>2017-08-03T03:33:13.000Z</published>
    <updated>2017-09-15T01:25:27.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate多对多外键关联配置"><a href="#Hibernate多对多外键关联配置" class="headerlink" title="Hibernate多对多外键关联配置"></a>Hibernate多对多外键关联配置</h3><ul>
<li>Annotation多对多单向外键关联配置<ul>
<li>选择实体类一方添加对方对象的Set集合属性</li>
<li>在Set集合属性的get方法上添加@ManyToMany注解</li>
</ul>
</li>
</ul>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">//Student实体类</div><div class="line">@Entity</div><div class="line">public class Student &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Teacher实体类</div><div class="line">@Entity</div><div class="line">public class Teacher &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;Student&gt; students = new HashSet&lt;Student&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToMany</div><div class="line">	@JoinTable(name = &quot;t_s&quot;, joinColumns = &#123; @JoinColumn(name = &quot;teacher_id&quot;) &#125;, inverseJoinColumns = &#123;</div><div class="line">			@JoinColumn(name = &quot;student_id&quot;) &#125;)</div><div class="line">	public Set&lt;Student&gt; getStudents() &#123;</div><div class="line">		return students;</div><div class="line">	&#125; </div><div class="line"></div><div class="line">	public void setStudents(Set&lt;Student&gt; students) &#123;</div><div class="line">		this.students = students;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注解@JoinTable说明：指明生成的中间表的名称及生成的中间表的字段名称，若不指明，默认生成的中间表名称为teacher_student,字段名为teacher_id和student_id<br>如果表的主键为组合主键，则生成的中间表会包含组合主键</p>
</blockquote>
<ul>
<li>Annotation多对多双向外键关联配置（很少使用）<ul>
<li>实体类双方添加对方对象的Set集合属性</li>
<li>在Set集合属性的get方法上添加@ManyToMany注解</li>
<li>在其中一方@ManyToMany注解设置mappedBy属性</li>
</ul>
</li>
</ul>
<!-- more --> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">//Student实体类</div><div class="line">@Entity</div><div class="line">public class Student &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;Teacher&gt; teachers = new HashSet&lt;Teacher&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Many2Many(mappedBy=&quot;students&quot;)</div><div class="line">	public Set&lt;Student&gt; getTeachers() &#123;</div><div class="line">		return teachers;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTeachers(Set&lt;Teacher&gt; teachers) &#123;</div><div class="line">		this.teachers = teachers;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Teacher实体类</div><div class="line">@Entity</div><div class="line">public class Teacher &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;Student&gt; students = new HashSet&lt;Student&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToMany</div><div class="line">	@JoinTable(name = &quot;t_s&quot;, joinColumns = &#123; @JoinColumn(name = &quot;teacher_id&quot;) &#125;, inverseJoinColumns = &#123;</div><div class="line">			@JoinColumn(name = &quot;student_id&quot;) &#125;)</div><div class="line">	public Set&lt;Student&gt; getStudents() &#123;</div><div class="line">		return students;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStudents(Set&lt;Student&gt; students) &#123;</div><div class="line">		this.students = students;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate多对多外键关联配置&quot;&gt;&lt;a href=&quot;#Hibernate多对多外键关联配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate多对多外键关联配置&quot;&gt;&lt;/a&gt;Hibernate多对多外键关联配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Annotation多对多单向外键关联配置&lt;ul&gt;
&lt;li&gt;选择实体类一方添加对方对象的Set集合属性&lt;/li&gt;
&lt;li&gt;在Set集合属性的get方法上添加@ManyToMany注解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="多对多关联" scheme="http://yoursite.com/tags/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象关联之组件关联</title>
    <link href="http://yoursite.com/2017/08/03/Hibernate_component/"/>
    <id>http://yoursite.com/2017/08/03/Hibernate_component/</id>
    <published>2017-08-02T16:12:03.000Z</published>
    <updated>2017-08-31T02:41:59.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate对象关联之组件关联"><a href="#Hibernate对象关联之组件关联" class="headerlink" title="Hibernate对象关联之组件关联"></a>Hibernate对象关联之组件关联</h3><ul>
<li>Annotation组件关联配置<ul>
<li>添加组件类</li>
<li>实体类中添加组件类对象属性，并在get方法上添加注解@Embedded</li>
</ul>
</li>
</ul>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">//Wife组件类</div><div class="line">public class Wife &#123;</div><div class="line">	</div><div class="line">	private String wifeName;</div><div class="line">	private int age;</div><div class="line">	</div><div class="line">	public String getwifeName() &#123;</div><div class="line">		return wifeName;</div><div class="line">	&#125;</div><div class="line">	public void setwifeName(String wifeName) &#123;</div><div class="line">		this.wifeName = wifeName;</div><div class="line">	&#125;</div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Husband实体类</div><div class="line">@Entity</div><div class="line">public class Husband &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Wife wife;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Embedded</div><div class="line">	public Wife getWife() &#123;</div><div class="line">		return wife;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setWife(Wife wife) &#123;</div><div class="line">		this.wife = wife;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：组件映射用于将一对一的两个对象映射在一张表中，此例中会生成一张名为Husband的数据表，表中包含wifename和age列</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate对象关联之组件关联&quot;&gt;&lt;a href=&quot;#Hibernate对象关联之组件关联&quot; class=&quot;headerlink&quot; title=&quot;Hibernate对象关联之组件关联&quot;&gt;&lt;/a&gt;Hibernate对象关联之组件关联&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Annotation组件关联配置&lt;ul&gt;
&lt;li&gt;添加组件类&lt;/li&gt;
&lt;li&gt;实体类中添加组件类对象属性，并在get方法上添加注解@Embedded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="组件关联" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象关联之一对多&amp;多对一关联</title>
    <link href="http://yoursite.com/2017/08/02/Hibernate_one2many_many2one_uni_fk/"/>
    <id>http://yoursite.com/2017/08/02/Hibernate_one2many_many2one_uni_fk/</id>
    <published>2017-08-02T03:33:13.000Z</published>
    <updated>2017-08-31T02:33:25.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate一对多单向外键关联配置"><a href="#Hibernate一对多单向外键关联配置" class="headerlink" title="Hibernate一对多单向外键关联配置"></a>Hibernate一对多单向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>关联对象处于一方的实体类添加对方对象的Set属性(一对多)</li>
<li>关联对象属性的get方法上添加注解@OneToMany，@JoinColumn注解用于指明生成表中外键字段的名称</li>
</ul>
</li>
</ul>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">//Group实体类</div><div class="line">@Entity</div><div class="line">public class Group &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;User&gt; users = new HashSet&lt;User&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@OneToMany</div><div class="line">	@JoinColumn(name=&quot;groupId&quot;)</div><div class="line">	public Set&lt;User&gt; getUsers() &#123;</div><div class="line">		return users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsers(Set&lt;User&gt; users) &#123;</div><div class="line">		this.users = users;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//User实体类</div><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：实体类中添加@JoinColumn(name=”groupId”)注解，如果不添加此注解，hibernate会将一对多关系解释为多对多的一种特殊方式，会通过建中间表的形式实现关联关系。<br>添加注解后生成的User表存在一列groupId，用于存储用户所在的组</p>
</blockquote>
<h3 id="Hibernate多对一单向外键关联配置"><a href="#Hibernate多对一单向外键关联配置" class="headerlink" title="Hibernate多对一单向外键关联配置"></a>Hibernate多对一单向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>关联对象处于多方的实体类添加对方对象属性</li>
<li>关联对象属性的get方法上添加注解@ManyToOne</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">//Group实体类</div><div class="line">@Entity</div><div class="line">public class Group &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//User实体类</div><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Group group;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToOne</div><div class="line">	public Group getGroup() &#123;</div><div class="line">		return group;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroup(Group group) &#123;</div><div class="line">		this.group = group;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在未添加@JoinColumn生成的User表会自动生成一列group_id，用于记录所属的组</p>
</blockquote>
<h3 id="Hibernate一对多多对一双向外键关联配置"><a href="#Hibernate一对多多对一双向外键关联配置" class="headerlink" title="Hibernate一对多多对一双向外键关联配置"></a>Hibernate一对多多对一双向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>关联对象双方添加对方对象属性，其中一方添加的是对方的Set集合</li>
<li>关联对象属性的get方法上添加注解，一方添加@OneToMany注解，多方添加@ManyToOne注解</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">//Group实体类</div><div class="line">@Entity</div><div class="line">public class Group &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;User&gt; users = new HashSet&lt;User&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@OneToMany(mappedBy=&quot;group&quot;)</div><div class="line">	public Set&lt;User&gt; getUsers() &#123;</div><div class="line">		return users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsers(Set&lt;User&gt; users) &#123;</div><div class="line">		this.users = users;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//User实体类</div><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Group group;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToOne</div><div class="line">	public Group getGroup() &#123;</div><div class="line">		return group;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroup(Group group) &#123;</div><div class="line">		this.group = group;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Group实体类添加的注解@OneToMany(mappedBy=”group”)说明：指明双向关联关系是由对应User类的group属性主导（在User表中建立指向Group的外键），生成的User表中自动生成一列group_id，记录用户所属的组<br>凡是双向关联关系必设mappedBy</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate一对多单向外键关联配置&quot;&gt;&lt;a href=&quot;#Hibernate一对多单向外键关联配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate一对多单向外键关联配置&quot;&gt;&lt;/a&gt;Hibernate一对多单向外键关联配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Annotation单向外键关联配置&lt;ul&gt;
&lt;li&gt;关联对象处于一方的实体类添加对方对象的Set属性(一对多)&lt;/li&gt;
&lt;li&gt;关联对象属性的get方法上添加注解@OneToMany，@JoinColumn注解用于指明生成表中外键字段的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="一对多关联" scheme="http://yoursite.com/tags/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象关联之一对一关联</title>
    <link href="http://yoursite.com/2017/08/01/Hibernate_one2one_uni_fk/"/>
    <id>http://yoursite.com/2017/08/01/Hibernate_one2one_uni_fk/</id>
    <published>2017-08-01T03:47:29.000Z</published>
    <updated>2017-08-31T01:54:19.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate单向外键关联配置"><a href="#Hibernate单向外键关联配置" class="headerlink" title="Hibernate单向外键关联配置"></a>Hibernate单向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>实体类中添加关联对象</li>
<li>关联对象属性的get方法上添加注解@OneToOne，@JoinColumn注解用于指明生成表中外键字段的名称</li>
</ul>
</li>
</ul>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class Husband &#123;</div><div class="line">	</div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Wife wife;</div><div class="line">	</div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">	@OneToOne</div><div class="line">	@JoinColumn(name=&quot;wifeId&quot;)</div><div class="line">	public Wife getWife() &#123;</div><div class="line">		return wife;</div><div class="line">	&#125;</div><div class="line">	public void setWife(Wife wife) &#123;</div><div class="line">		this.wife = wife;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>XML单向外键关联配置<ul>
<li>创建实体类</li>
<li>xml中配置单向外键关联关系，配置如下：</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</div><div class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-mapping package=&quot;com.lidolid.hibernate.model&quot;&gt;</div><div class="line">	&lt;class name=&quot;StuIdCard&quot; table=&quot;StuIdCard&quot; dynamic-update=&quot;true&quot;&gt;</div><div class="line">		&lt;id name=&quot;id&quot;&gt;</div><div class="line">			&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line">		&lt;property name=&quot;num&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;many-to-one name=&quot;student&quot; column=&quot;studentId&quot; unique=&quot;true&quot;&gt;&lt;/many-to-one&gt;</div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：many-to-one属性中，name是指实体类中用来关联的对象，column是指生成表中外键字段的名称，unique=”true”说明是一对一关系</p>
</blockquote>
<h3 id="Hibernate双向外键关联配置"><a href="#Hibernate双向外键关联配置" class="headerlink" title="Hibernate双向外键关联配置"></a>Hibernate双向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>另一方实体类中添加关联对象</li>
<li>关联对象属性的get方法上添加注解@OneToOne，@JoinColumn注解用于指明生成表中外键字段的名称</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">//Husband实体类</div><div class="line">@Entity</div><div class="line">public class Husband &#123;</div><div class="line">	</div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Wife wife;</div><div class="line">	</div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">	@OneToOne</div><div class="line">	@JoinColumn(name=&quot;wifeId&quot;)</div><div class="line">	public Wife getWife() &#123;</div><div class="line">		return wife;</div><div class="line">	&#125;</div><div class="line">	public void setWife(Wife wife) &#123;</div><div class="line">		this.wife = wife;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Wife实体类</div><div class="line">@Entity</div><div class="line">public class Wife &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Husband husband;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@OneToOne(mappedBy=&quot;wife&quot;)</div><div class="line">	public Husband getHusband() &#123;</div><div class="line">		return husband;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHusband(Husband husband) &#123;</div><div class="line">		this.husband = husband;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>OneToOne属性mappedBy=”wife”说明，表明双向关联关系以Husband类的wife做主导，<strong>凡是双向关联关系，都要设置mappedBy</strong></p>
</blockquote>
<ul>
<li>XML双向外键关联配置<ul>
<li>关联双方添加对方对象属性</li>
<li>关联双方的model.hbm.xml文件中添加many-to-one、one-to-one、property-ref属性</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">//Student实体类</div><div class="line">public class Student &#123;</div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	private StuIdCard stuIdCard;</div><div class="line">	</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public StuIdCard getStuIdCard() &#123;</div><div class="line">		return stuIdCard;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStuIdCard(StuIdCard stuIdCard) &#123;</div><div class="line">		this.stuIdCard = stuIdCard;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//StuIdCard实体类</div><div class="line">public class StuIdCard &#123;</div><div class="line">	private int id;</div><div class="line">	private String num;</div><div class="line">	private Student student;</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">	public String getNum() &#123;</div><div class="line">		return num;</div><div class="line">	&#125;</div><div class="line">	public void setNum(String num) &#123;</div><div class="line">		this.num = num;</div><div class="line">	&#125;</div><div class="line">	public Student getStudent() &#123;</div><div class="line">		return student;</div><div class="line">	&#125;</div><div class="line">	public void setStudent(Student student) &#123;</div><div class="line">		this.student = student;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Student实体类配置文件</div><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</div><div class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-mapping package=&quot;com.lidolid.hibernate.model&quot;&gt;</div><div class="line">	&lt;class name=&quot;Student&quot; table=&quot;student&quot; dynamic-update=&quot;true&quot;&gt;</div><div class="line">		&lt;!-- 映射主键 --&gt;</div><div class="line">		&lt;!-- &lt;id name=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt; --&gt;</div><div class="line">		&lt;id name=&quot;id&quot;&gt;</div><div class="line">			&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line">		&lt;property name=&quot;name&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;one-to-one name =&quot;stuIdCard&quot; property-ref=&quot;student&quot;&gt;&lt;/one-toone&gt;</div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div><div class="line"></div><div class="line">//StuIdCard类配置文件</div><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</div><div class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-mapping package=&quot;com.lidolid.hibernate.model&quot;&gt;</div><div class="line">	&lt;class name=&quot;StuIdCard&quot; table=&quot;StuIdCard&quot; dynamic-update=&quot;true&quot;&gt;</div><div class="line">		&lt;id name=&quot;id&quot;&gt;</div><div class="line">			&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line">		&lt;property name=&quot;num&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;many-to-one name=&quot;student&quot; column=&quot;studentId&quot; unique=&quot;true&quot;&gt;&lt;/many-to-one&gt;</div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：property-ref=”student”表明双向关联关系是与本类(Student)关联的类StuIdCard中的student属性主导的</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate单向外键关联配置&quot;&gt;&lt;a href=&quot;#Hibernate单向外键关联配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate单向外键关联配置&quot;&gt;&lt;/a&gt;Hibernate单向外键关联配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Annotation单向外键关联配置&lt;ul&gt;
&lt;li&gt;实体类中添加关联对象&lt;/li&gt;
&lt;li&gt;关联对象属性的get方法上添加注解@OneToOne，@JoinColumn注解用于指明生成表中外键字段的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="单向外键关联" scheme="http://yoursite.com/tags/%E5%8D%95%E5%90%91%E5%A4%96%E9%94%AE%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>SchemaExport的使用</title>
    <link href="http://yoursite.com/2017/07/31/Hibernate_schemaexport/"/>
    <id>http://yoursite.com/2017/07/31/Hibernate_schemaexport/</id>
    <published>2017-07-31T03:58:17.000Z</published>
    <updated>2017-08-22T14:47:15.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SchemaExport的使用"><a href="#SchemaExport的使用" class="headerlink" title="SchemaExport的使用"></a>SchemaExport的使用</h3><p>&emsp;&emsp;Hibernate中SchemaExport可以用来在程序中控制生成的建表语句，跟hibernate.cfg.xml配置文件中如下配置</p>
<blockquote>
<p>&lt;property name=”hbm2ddl.auto”&gt;create &lt;/property&gt;</p>
</blockquote>
<p>有着相同的作用。hibernate 5.x的版本中，SchemaExport的用法不同于以前的版本，而网上的诸多资料都还停留在以前的3.x， 4.x的API中，这里我简单说一下5.x版本中SchemaExport的用法。<br><a id="more"></a><br>hibernate 5.x的版本中使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().configure().build();</div><div class="line">Metadata metadata = new MetadataSources(serviceRegistry).buildMetadata();</div><div class="line">SchemaExport schemaExport = new SchemaExport();</div><div class="line">schemaExport.create(EnumSet.of(TargetType.DATABASE), metadata);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SchemaExport的使用&quot;&gt;&lt;a href=&quot;#SchemaExport的使用&quot; class=&quot;headerlink&quot; title=&quot;SchemaExport的使用&quot;&gt;&lt;/a&gt;SchemaExport的使用&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Hibernate中SchemaExport可以用来在程序中控制生成的建表语句，跟hibernate.cfg.xml配置文件中如下配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;property name=”hbm2ddl.auto”&amp;gt;create &amp;lt;/property&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有着相同的作用。hibernate 5.x的版本中，SchemaExport的用法不同于以前的版本，而网上的诸多资料都还停留在以前的3.x， 4.x的API中，这里我简单说一下5.x版本中SchemaExport的用法。&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="chemaExport" scheme="http://yoursite.com/tags/chemaExport/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象的三种状态</title>
    <link href="http://yoursite.com/2017/07/29/Hibernate_states3/"/>
    <id>http://yoursite.com/2017/07/29/Hibernate_states3/</id>
    <published>2017-07-29T15:47:15.000Z</published>
    <updated>2017-08-16T02:22:10.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate对象的三种状态"><a href="#Hibernate对象的三种状态" class="headerlink" title="Hibernate对象的三种状态"></a>Hibernate对象的三种状态</h3><p>&emsp;&emsp;在Hibernate中，对象有三种状态：临 时状态(Transient)、持久状态(Persistent)和游离状态(Detached)。处于持久态的对象也称为 PO(PersistenceObject),临时对象和游离对象也称为VO(ValueObject)。</p>
<p><img src="http://i.imgur.com/ejggriH.png" alt=""><br><a id="more"></a></p>
<h5 id="三种状态："><a href="#三种状态：" class="headerlink" title="三种状态："></a>三种状态：</h5><ul>
<li>Transient：内存中的一个对象，没有id，缓存中也没有</li>
<li>persistent：内存中有，缓存中有，数据库有，有id</li>
<li>detached： 内存有，缓存没有，数据库有，有id</li>
</ul>
<h5 id="三种状态如何区分："><a href="#三种状态如何区分：" class="headerlink" title="三种状态如何区分："></a>三种状态如何区分：</h5><ul>
<li>有没有id</li>
<li>id在数据库中有没有</li>
<li>在内存中有没有(session缓存)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate对象的三种状态&quot;&gt;&lt;a href=&quot;#Hibernate对象的三种状态&quot; class=&quot;headerlink&quot; title=&quot;Hibernate对象的三种状态&quot;&gt;&lt;/a&gt;Hibernate对象的三种状态&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Hibernate中，对象有三种状态：临 时状态(Transient)、持久状态(Persistent)和游离状态(Detached)。处于持久态的对象也称为 PO(PersistenceObject),临时对象和游离对象也称为VO(ValueObject)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ejggriH.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="对象状态" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>openSession()跟getCurrentSession()方法之间的区别</title>
    <link href="http://yoursite.com/2017/07/29/Hibernate_session/"/>
    <id>http://yoursite.com/2017/07/29/Hibernate_session/</id>
    <published>2017-07-29T04:43:20.000Z</published>
    <updated>2017-08-16T05:34:47.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hibernate中openSession-跟getCurrentSession-方法之间的区别"><a href="#hibernate中openSession-跟getCurrentSession-方法之间的区别" class="headerlink" title="hibernate中openSession()跟getCurrentSession()方法之间的区别"></a>hibernate中openSession()跟getCurrentSession()方法之间的区别</h3><p>&emsp;&emsp;openSession()和getCurrentSession()都用来产生session对象，区别如下：</p>
<ul>
<li>采用getCurrentSession()创建的Session会绑定到当前的线程中去，而采用OpenSession()则不会。</li>
<li>采用getCurrentSession()创建的Session在commit或rollback后会自动关闭，采用OpenSession()必须手动关闭。</li>
</ul>
<a id="more"></a>
<ul>
<li>采用getCurrentSession()需要在Hibernate.cfg.xml配置文件中加入如下配置：<blockquote>
<p>如果是本地事物，及JDBC一个数据库：<br>&lt;propety name=”Hibernate.current_session_context_class”&gt;thread&lt;/propety&gt;<br>如果是全局事物，及jta事物、多个数据库资源或事物资源：<br>&lt;propety name=”Hibernate.current_session_context_class”&gt;jta&lt;/propety&gt;<br><img src="http://i.imgur.com/b3GbF5Z.png" alt=""><br>JTA(Java transaction api)用于管理分布式数据库之间事务，tomcat无法提供</p>
</blockquote>
</li>
</ul>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul>
<li>Session的理解：<br>&emsp;&emsp;Session是管理一个数据库的任务单元，可以通过调用Session的方法来实现对数据库的具体操作（增、删、改、查）</li>
<li>Session的主要方法及说明：<ul>
<li>save()</li>
<li>delete()</li>
<li>update()</li>
<li>saveOrUpdate()</li>
<li>load()</li>
<li>get()</li>
<li>clear()：无论是load()还是get()，都会先查找缓存(一级缓存),如果没有才会查找数据库，调用clear()方法可以强制清除session缓存  </li>
<li>flush()：强制进行从内存到数据库的同步</li>
</ul>
</li>
<li>get()和load()的区别：<ul>
<li>不存在对应对象时表现不一样，load()不会报错，get()会报错</li>
<li>load()返回的是代理对象，等到真正使用对象内容时才发出sql语句</li>
<li>get()直接从数据库加载，不会延迟</li>
</ul>
</li>
<li>update()方法：<ul>
<li>用来更新detached对象，更新完之后，对象转换为persistent状态(get后提交，对象转换为detached状态，然后通过set方法设置对象属性的值，再调用session的update方法)</li>
<li>更新Transient对象会报错</li>
<li>可以更新自己设定id的Transient对象，如果数据中存在数据，可以更新。不存在不会报错</li>
<li>如果一个对象是persistent状态，只要设定不同状态，session提交后就会更新（如先get，然后通过实体set方法设定某个属性值，在提交时会同时update数据库中对应的列）</li>
</ul>
</li>
<li><p>使用update()方法进行部分更改</p>
<ul>
<li>xml设定property标签的update属性，Annotation设定@column的updatable属性，设定属性值为true则表明该字段不参与update更新。不过这种方式很少使用，因为不灵活。</li>
<li>使用xml中class的dynamic-update属性，JPA中没有对应的属性。xml中使用时，同一个session可以做到只更改设定属性对应字段，跨session不可以，不过可以使用merge来实现。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Student t = (Student) session.get(Student.class, 1);</div><div class="line">System.out.println(t.getName());</div><div class="line">t.setName(&quot;testUpdate5&quot;);</div><div class="line">session.getTransaction().commit();</div><div class="line"></div><div class="line">//跨session更新</div><div class="line">t.setName(&quot;testUpdate6&quot;);</div><div class="line">Session session1 = sf.getCurrentSession();</div><div class="line">session1.beginTransaction();</div><div class="line">session1.update(t);</div><div class="line">//System.out.println(t.getName());</div><div class="line">session1.getTransaction().commit();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Student t = (Student)session.get(Student.class, 1);</div><div class="line">System.out.println(t.getName());</div><div class="line">t.setName(&quot;testUpdate6&quot;);</div><div class="line">session.getTransaction().commit();</div><div class="line">	</div><div class="line">//跨session更新,并只更新改变字段</div><div class="line">t.setName(&quot;testUpdate7&quot;);</div><div class="line">Session session1 = sf.getCurrentSession();</div><div class="line">session1.beginTransaction();</div><div class="line">session1.merge(t);</div><div class="line">System.out.println(t.getName());</div><div class="line">session1.getTransaction().commit();</div></pre></td></tr></table></figure>
<ul>
<li>使用HQL(建议使用)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Query q = session.createQuery(&quot;update Student s set s.name = &apos;z5&apos; where s.id = 1&quot;);</div><div class="line">q.executeUpdate();</div><div class="line">session.getTransaction().commit();</div></pre></td></tr></table></figure>
</li>
<li><p>clear()方法说明<br>&emsp;&emsp;clear方法会强制清除session缓存，如下如不加session2.clear();则第二次取t2时并不会再进行一次查询操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Session session2 = sf.getCurrentSession();</div><div class="line">session2.beginTransaction();</div><div class="line">Teacher t = (Teacher) session2.load(Teacher.class, 1);</div><div class="line">System.out.println(t.getName());</div><div class="line"></div><div class="line">//	</div><div class="line">session2.clear();</div><div class="line">	</div><div class="line">Teacher t2 = (Teacher) session2.load(Teacher.class, 1);</div><div class="line">System.out.println(t2.getName());</div><div class="line">	</div><div class="line">session2.getTransaction().commit();</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hibernate中openSession-跟getCurrentSession-方法之间的区别&quot;&gt;&lt;a href=&quot;#hibernate中openSession-跟getCurrentSession-方法之间的区别&quot; class=&quot;headerlink&quot; title=&quot;hibernate中openSession()跟getCurrentSession()方法之间的区别&quot;&gt;&lt;/a&gt;hibernate中openSession()跟getCurrentSession()方法之间的区别&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;openSession()和getCurrentSession()都用来产生session对象，区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用getCurrentSession()创建的Session会绑定到当前的线程中去，而采用OpenSession()则不会。&lt;/li&gt;
&lt;li&gt;采用getCurrentSession()创建的Session在commit或rollback后会自动关闭，采用OpenSession()必须手动关闭。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>ID生成策略</title>
    <link href="http://yoursite.com/2017/07/28/Hibernate_ID/"/>
    <id>http://yoursite.com/2017/07/28/Hibernate_ID/</id>
    <published>2017-07-27T17:19:26.000Z</published>
    <updated>2017-08-15T02:21:20.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate中ID生成策略"><a href="#Hibernate中ID生成策略" class="headerlink" title="Hibernate中ID生成策略"></a>Hibernate中ID生成策略</h3><p>&emsp;&emsp;在开发中，数据表经常使用到ID，并以此作为主键。在插入时，ID一般不需要手动指定，可以由数据库自动生成。实际开发中，我们一般都是先建数据表，再由数据表生成实体类，研究Hibernate如何生成ID的意义就是搞清楚应该建立什么样的表与实体类映射。<br><a id="more"></a></p>
<ul>
<li><p><strong>xml生成ID</strong></p>
<ul>
<li>在id标签内添加字标签，如下  <blockquote>
<p>&lt;generator class=”uuid”&gt;&lt;/generator&gt;</p>
</blockquote>
</li>
<li>class取值，如下：<ul>
<li>native：mysql中生成的id属性auto_increment，oracle中id属性为sequence，sqlserver中id属性为identity</li>
<li>identity</li>
<li>sequence</li>
<li>uuid</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Annotation生成ID</strong></p>
<ul>
<li>在ID属性的get方法上添加注解@GeneratedValue</li>
<li>GeneratedValue取值：<ul>
<li>AUTO：默认值，同xml的native  </li>
<li>IDENTITY：@GeneratedValue(strategy=GenerationType.IDENTITY)</li>
<li>SEQUENCE:假如不指明，所有的表会共用一个sequence，使用自定义sequence名字来指明不同的表使用不同的sequence。在实体类上加上自定义sequence说明,在getId方法指明自定义generator名称<blockquote>
<p>@SequenceGenerator(name=”teacherSEQ”, sequenceName=”teacherSEQ_DB”)<br>@GeneratedValue(strategy=GenerationType.SEQUENCE, generator=”teacherSEQ”)</p>
</blockquote>
</li>
<li>TABLE:数据库生成一张独立地表来记录各个表需要的主键的值，每次取完后会进行自增,用法和sequence相似，需在实体类上方添加主键字段说明，在getId方法指明generator名称<blockquote>
<p>@@javax.persistence.TableGenerator(name = “Teacher_GEN”, table = “GENERATOR_TABLE”, pkColumnName = “pk_key”, valueColumnName = “pk_value”, pkColumnValue = “Teacher”, allocationSize = 1)<br>@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = “Teacher_GEN”)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>联合主键</p>
<ul>
<li><p>xml联合主键配置</p>
<ul>
<li>添加主键类</li>
<li>配置mdel.hbm.xml，内容如下：<blockquote>
<p>&lt;composite-id name=”pk” class=”com.lidolid.hibernate.model.StudentPK”&gt;<br>&lt;key-property name=”id” /&gt;<br>&lt;key-property name=”name” /&gt;<br>&lt;/composite-id/&gt;</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Annotation联合主键配置</p>
<ol>
<li><p>@Embeddable + @Id</p>
<ul>
<li>添加主键类</li>
<li>主键类添加@Embeddable注解</li>
<li>实体类中主键对象的get方法上添加注解@Id</li>
</ul>
</li>
<li><p>@EmbeddedId</p>
<ul>
<li>添加主键类</li>
<li>实体类中主键对象的get方法上添加注解@EmbeddedId</li>
</ul>
</li>
<li><p>@Id + @IdClass</p>
<ul>
<li>添加主键类</li>
<li>实体类中主键属性的get方法上添加注解@Id</li>
<li>实体类添加注解@IdClass</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h5 id="实验过程中遇到的问题"><a href="#实验过程中遇到的问题" class="headerlink" title="实验过程中遇到的问题"></a>实验过程中遇到的问题</h5><p>&emsp;&emsp;在通过xml配置联合主键是遇到问题如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR DriverManagerConnectionProviderImpl:92 - Collection leak detected: there are 1 unclosed connections upon shutting down pool jdbc:mysql://localhost/hibernate</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;一直没找到解决办法，最后发现是hibernate.cfg.xml配置文件中实体类的映射忘记修改了，修改正确后，hibernate正常建表，主键。遇到此类问题，可以作为一个排查的方向。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate中ID生成策略&quot;&gt;&lt;a href=&quot;#Hibernate中ID生成策略&quot; class=&quot;headerlink&quot; title=&quot;Hibernate中ID生成策略&quot;&gt;&lt;/a&gt;Hibernate中ID生成策略&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在开发中，数据表经常使用到ID，并以此作为主键。在插入时，ID一般不需要手动指定，可以由数据库自动生成。实际开发中，我们一般都是先建数据表，再由数据表生成实体类，研究Hibernate如何生成ID的意义就是搞清楚应该建立什么样的表与实体类映射。&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="ID" scheme="http://yoursite.com/tags/ID/"/>
    
      <category term="联合主键" scheme="http://yoursite.com/tags/%E8%81%94%E5%90%88%E4%B8%BB%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate基本配置</title>
    <link href="http://yoursite.com/2017/07/27/Hibernate_cfg1/"/>
    <id>http://yoursite.com/2017/07/27/Hibernate_cfg1/</id>
    <published>2017-07-27T14:42:01.000Z</published>
    <updated>2017-08-10T15:10:35.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate基础配置"><a href="#Hibernate基础配置" class="headerlink" title="Hibernate基础配置"></a>Hibernate基础配置</h3><p>&emsp;&emsp;通过近期的实验，总结一下hibernate的一些基础配置，如下：<br><a id="more"></a></p>
<ul>
<li>hibernate.cfg.xml文件中show_sql和format_sql区别：<ul>
<li>两个属性均有true和false两个取值，当为true时，show_sql将产生的sql语句显示在一行，format_sql将产生的sql进行了格式化</li>
</ul>
</li>
<li>表明和类名不同时，如何进行配置：<ul>
<li>Annotation：在实体@Entity下加一行配置@Table(name=”tableName”)</li>
<li>xml：在映射配置文件(model.hbm.xml)class属性后新增table=”tableName”</li>
</ul>
</li>
<li>实体类中字段名和属性相同，如何进行配置：<ul>
<li>Annotation：相当于默认加了@Basic注解</li>
<li>xml：xml中不需要加column</li>
</ul>
</li>
<li>实体类中字段名和属性不同，如何进行配置：<ul>
<li>Annotation：@column</li>
<li>xml：xml中需要加column</li>
</ul>
</li>
<li>实体类中存在不需要持久化(映射到数据表中)的属性：<ul>
<li>Annotation：在属性的get方法上加注解@Transient，<strong>注意Transient为javax.persistence.Transient，而不是java.beans.Transient</strong></li>
<li>xml：xml文件中不写</li>
</ul>
</li>
<li>映射到日期和时间类型，指定时间精度：<ul>
<li>Annotation：加注解@Temporal(value=”TemporalType.DATE”/TemporalType.TIME/TemporalType.TIMESTAMP)</li>
<li>xml：比较麻烦，不建议使用</li>
</ul>
</li>
<li>映射枚举类型<ul>
<li>Annotation：加注解@Enumerated(EnumType.STRING/EnumType.ORDINAL)，其中STRING表示生成的字段为String类型，ORDINAL表示生成的字段为Integer类型并存储枚举类型的下标值</li>
<li>xml：写转换器，麻烦，不建议使用</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate基础配置&quot;&gt;&lt;a href=&quot;#Hibernate基础配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate基础配置&quot;&gt;&lt;/a&gt;Hibernate基础配置&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;通过近期的实验，总结一下hibernate的一些基础配置，如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate错误：Invalid syntax error “type= MyISAM”</title>
    <link href="http://yoursite.com/2017/07/27/Hibernate_er3/"/>
    <id>http://yoursite.com/2017/07/27/Hibernate_er3/</id>
    <published>2017-07-26T16:43:20.000Z</published>
    <updated>2017-08-10T02:54:55.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate错误：Invalid-syntax-error-“type-MyISAM”-in-DDL-generated-by-Hibernate，错误信息如下："><a href="#Hibernate错误：Invalid-syntax-error-“type-MyISAM”-in-DDL-generated-by-Hibernate，错误信息如下：" class="headerlink" title="Hibernate错误：Invalid syntax error “type= MyISAM” in DDL generated by Hibernate，错误信息如下："></a>Hibernate错误：Invalid syntax error “type= MyISAM” in DDL generated by Hibernate，错误信息如下：</h3><a id="more"></a>
<blockquote>
<p>Caused by:com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException<code>: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB</code> server version for the right syntax to use near ‘type = <code>MyISAM</code>‘ at line 1</p>
</blockquote>
<h4 id="错误原因-："><a href="#错误原因-：" class="headerlink" title="错误原因 ："></a>错误原因 ：</h4><h5 id="hibernate配置文件hibernate-cfg-xml中方言设置问题"><a href="#hibernate配置文件hibernate-cfg-xml中方言设置问题" class="headerlink" title="hibernate配置文件hibernate.cfg.xml中方言设置问题"></a>hibernate配置文件hibernate.cfg.xml中方言设置问题</h5><p>当方言设置为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;</div></pre></td></tr></table></figure></p>
<p>时会报此类错误，因为方言org.hibernate.dialect.MySQLDialect实在MySQL 4.0之前使用的，生成建表语句时会生成type=MyISAM，在MySQL现有版本不建议使用，已被移除。  </p>
<h5 id="MySQL-5-x-使用的方言Hibernate配置如下："><a href="#MySQL-5-x-使用的方言Hibernate配置如下：" class="headerlink" title="MySQL 5.x 使用的方言Hibernate配置如下："></a>MySQL 5.x 使用的方言Hibernate配置如下：</h5><ul>
<li>org.hibernate.dialect.MySQL5Dialect</li>
<li>org.hibernate.dialect.MySQL55ialect</li>
<li>org.hibernate.dialect.MySQL57ialect</li>
</ul>
<p><a href="https://stackoverflow.com/questions/43716068/invalid-syntax-error-type-myisam-in-ddl-generated-by-hibernate" target="_blank" rel="external">参考链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate错误：Invalid-syntax-error-“type-MyISAM”-in-DDL-generated-by-Hibernate，错误信息如下：&quot;&gt;&lt;a href=&quot;#Hibernate错误：Invalid-syntax-error-“type-MyISAM”-in-DDL-generated-by-Hibernate，错误信息如下：&quot; class=&quot;headerlink&quot; title=&quot;Hibernate错误：Invalid syntax error “type= MyISAM” in DDL generated by Hibernate，错误信息如下：&quot;&gt;&lt;/a&gt;Hibernate错误：Invalid syntax error “type= MyISAM” in DDL generated by Hibernate，错误信息如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate错误：Unable to instantiate default tuplizer</title>
    <link href="http://yoursite.com/2017/07/26/Hibernate_er2/"/>
    <id>http://yoursite.com/2017/07/26/Hibernate_er2/</id>
    <published>2017-07-26T15:53:40.000Z</published>
    <updated>2017-08-10T02:54:56.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate错误：Unable-to-instantiate-default-tuplizer，控制台错误信息如下："><a href="#Hibernate错误：Unable-to-instantiate-default-tuplizer，控制台错误信息如下：" class="headerlink" title="Hibernate错误：Unable to instantiate default tuplizer，控制台错误信息如下："></a>Hibernate错误：Unable to instantiate default tuplizer，控制台错误信息如下：</h3><a id="more"></a>
<blockquote>
<p>Caused by: org.hibernate.HibernateException: Unable to instantiate default tuplizer [org.hibernate.tuple.entity.PojoEntityTuplizer]<br>    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructTuplizer(EntityTuplizerFactory.java:108)<br>    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructDefaultTuplizer(EntityTuplizerFactory.java:133)<br>    at org.hibernate.tuple.entity.EntityEntityModeToTuplizerMapping.<init>(EntityEntityModeToTuplizerMapping.java:80)<br>    at org.hibernate.tuple.entity.EntityMetamodel.<init>(EntityMetamodel.java:322)<br>    at org.hibernate.persister.entity.AbstractEntityPersister.<init>(AbstractEntityPersister.java:473)<br>    at org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:133)<br>    at org.hibernate.persister.PersisterFactory.createClassPersister(PersisterFactory.java:84)<br>    at org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:284)<br>    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1840)<br>    at util.HibernateSessionFactory.<clinit>(HibernateSessionFactory.java:15)<br>    … 1 more<br>Caused by: java.lang.reflect.InvocationTargetException<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)<br>    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br>    at java.lang.reflect.Constructor.newInstance(Constructor.java:408)<br>    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructTuplizer(EntityTuplizerFactory.java:105)<br>    … 10 more<br>Caused by: org.hibernate.PropertyNotFoundException: Could not find a getter for wineClass in class model.WineClass<br>    at org.hibernate.property.BasicPropertyAccessor.createGetter(BasicPropertyAccessor.java:326)<br>    at org.hibernate.property.BasicPropertyAccessor.getGetter(BasicPropertyAccessor.java:320)<br>    at org.hibernate.mapping.Property.getGetter(Property.java:304)<br>    at org.hibernate.tuple.entity.PojoEntityTuplizer.buildPropertyGetter(PojoEntityTuplizer.java:297)<br>    at org.hibernate.tuple.entity.AbstractEntityTuplizer.<init>(AbstractEntityTuplizer.java:155)<br>    at org.hibernate.tuple.entity.PojoEntityTuplizer.<init>(PojoEntityTuplizer.java:77)<br>    … 15 more</init></init></clinit></init></init></init></init></init></p>
</blockquote>
<h4 id="可能错误原因-："><a href="#可能错误原因-：" class="headerlink" title="可能错误原因 ："></a>可能错误原因 ：</h4><ul>
<li>缺少javassist.jar</li>
<li>映射文件(model.hbm.xml)或者Annotation model类中存在属性与映射文件不一致，或者model类中存在属性无对应的get set方法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate错误：Unable-to-instantiate-default-tuplizer，控制台错误信息如下：&quot;&gt;&lt;a href=&quot;#Hibernate错误：Unable-to-instantiate-default-tuplizer，控制台错误信息如下：&quot; class=&quot;headerlink&quot; title=&quot;Hibernate错误：Unable to instantiate default tuplizer，控制台错误信息如下：&quot;&gt;&lt;/a&gt;Hibernate错误：Unable to instantiate default tuplizer，控制台错误信息如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate错误：Unable to create requested service</title>
    <link href="http://yoursite.com/2017/07/26/Hibernate_er1/"/>
    <id>http://yoursite.com/2017/07/26/Hibernate_er1/</id>
    <published>2017-07-26T15:45:31.000Z</published>
    <updated>2017-08-10T02:54:57.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate错误：Unable-to-create-requested-service-org-hibernate-engine-jdbc-env-spi-JdbcEnvironment-，错误信息如下："><a href="#Hibernate错误：Unable-to-create-requested-service-org-hibernate-engine-jdbc-env-spi-JdbcEnvironment-，错误信息如下：" class="headerlink" title="Hibernate错误：Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]，错误信息如下："></a>Hibernate错误：Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]，错误信息如下：</h3><a id="more"></a>
<blockquote>
<p>org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator initiateService<br>WARN: HHH000342: Could not obtain connection to query metadata : The application must supply JDBC connections<br>Exception in thread “main” org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:244)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:208)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:189)<br>at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:51)<br>at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:94)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:217)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:189)<br>at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.handleTypes(MetadataBuildingProcess.java:352)<br>at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:111)<br>at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:83)<br>at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:418)<br>at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:87)<br>at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:692)<br>at org.fun.test.HibernateTest.main(HibernateTest.java:25)<br>Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when ‘hibernate.dialect’ not set<br>at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:100)<br>at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:54)<br>at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:137)<br>at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)<br>at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:88)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:234)<br>… 13 more</p>
</blockquote>
<p>经排查是hibernate配置文件数据库连接时，数据库驱动有问题，我写的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.driver&lt;/property&gt;</div></pre></td></tr></table></figure></p>
<p>实际应该为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</div></pre></td></tr></table></figure></p>
<p>当出现类似问题时，可能是数据源配置错误可从dialect，driverclass，url，username，password出发进行排查</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate错误：Unable-to-create-requested-service-org-hibernate-engine-jdbc-env-spi-JdbcEnvironment-，错误信息如下：&quot;&gt;&lt;a href=&quot;#Hibernate错误：Unable-to-create-requested-service-org-hibernate-engine-jdbc-env-spi-JdbcEnvironment-，错误信息如下：&quot; class=&quot;headerlink&quot; title=&quot;Hibernate错误：Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]，错误信息如下：&quot;&gt;&lt;/a&gt;Hibernate错误：Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]，错误信息如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate配置文件</title>
    <link href="http://yoursite.com/2017/07/25/Hibernate_cfg/"/>
    <id>http://yoursite.com/2017/07/25/Hibernate_cfg/</id>
    <published>2017-07-25T15:56:46.000Z</published>
    <updated>2017-08-10T02:54:58.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hibernate配置文件hibernate-cfg-xml基本信息如下："><a href="#hibernate配置文件hibernate-cfg-xml基本信息如下：" class="headerlink" title="hibernate配置文件hibernate.cfg.xml基本信息如下："></a>hibernate配置文件hibernate.cfg.xml基本信息如下：</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</div><div class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-configuration&gt;</div><div class="line">    &lt;session-factory&gt;</div><div class="line">        &lt;!-- Database Connection Settings --&gt;</div><div class="line">        &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost/hibernate&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;hibernate.connection.password&quot;&gt;cupdata&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;!-- JDBC connection pool (use the built-in) 基本不用 --&gt;</div><div class="line">        &lt;!-- &lt;property name=&quot;connection.pool_size&quot;&gt;1&lt;/property&gt; --&gt;</div><div class="line">        </div><div class="line">        &lt;!-- SQL dialect --&gt;</div><div class="line">        &lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;!-- Enable Hibernate&apos;s automatic session context management --&gt;</div><div class="line">        &lt;!-- &lt;property name=&quot;current_session_context_class&quot;&gt;thread&lt;/property&gt; --&gt;</div><div class="line">        </div><div class="line">        &lt;!-- Disable the second-level cache --&gt;</div><div class="line">        &lt;property name=&quot;cache.provider_class&quot;&gt;org.hibernate.cache.NoCacheProvider&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;!-- Echo all excuted SQL to stdout --&gt;</div><div class="line">        &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;!-- Drop and re-create the database schema on startup --&gt;</div><div class="line">        &lt;!-- &lt;property name=&quot;hbm2ddl.auto&quot;&gt;create&lt;/property&gt;  --&gt;</div><div class="line">        &lt;property name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;mapping resource=&quot;com/lidolid/hibernate/model/Student.hbm.xml&quot;/&gt;</div><div class="line">        &lt;!-- 指明Teacher被加了annotation映射 --&gt;</div><div class="line">        &lt;mapping class=&quot;com.lidolid.hibernate.model.Teacher&quot;/&gt;</div><div class="line">    &lt;/session-factory&gt;</div><div class="line">&lt;/hibernate-configuration&gt;</div></pre></td></tr></table></figure>
<h5 id="使用时，按要求修改内容"><a href="#使用时，按要求修改内容" class="headerlink" title="使用时，按要求修改内容"></a>使用时，按要求修改内容</h5><ul>
<li>Database Connection Settings，数据库连接配置，分别为数据库驱动、数据库地址、username和password</li>
<li>JDBC connection pool，连接池，一般不使用</li>
<li>SQL dialect，数据库方言，使用时注意数据库版本</li>
<li>second-level cache，二级缓存，hibernate优化是使用</li>
<li>show_sql，执行时显示生成的SQL脚本</li>
<li>hbm2ddl.auto，存在四个取值:  <ul>
<li>create：启动时删数据库中的表，然后创建，退出时不删除数据表</li>
<li>create-drop：启动时删数据库中的表，然后创建，退出时自动删除所有表</li>
<li>update：自动修改，如果表结构与实体类不一致，那么就修改表使它们一致，数据会保留</li>
<li>validate：自动校验，如果表结构与实体类不一致，那么不做任何操作，报错</li>
</ul>
</li>
<li>mapping，model与数据库映射，在使用model.hbm.xml时要用/，使用Annotation时使用.来指明了被映射</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hibernate配置文件hibernate-cfg-xml基本信息如下：&quot;&gt;&lt;a href=&quot;#hibernate配置文件hibernate-cfg-xml基本信息如下：&quot; class=&quot;headerlink&quot; title=&quot;hibernate配置文件hibernate.cfg.xml基本信息如下：&quot;&gt;&lt;/a&gt;hibernate配置文件hibernate.cfg.xml基本信息如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
