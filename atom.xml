<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hal的博客</title>
  <subtitle>愿你走出半生，仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-20T04:36:39.626Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring AOP管理hibernate事务</title>
    <link href="http://yoursite.com/2017/08/23/Spring_0903_HibernateAop/"/>
    <id>http://yoursite.com/2017/08/23/Spring_0903_HibernateAop/</id>
    <published>2017-08-23T10:52:31.000Z</published>
    <updated>2017-09-20T04:36:39.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-AOP管理hibernate事务"><a href="#Spring-AOP管理hibernate事务" class="headerlink" title="Spring AOP管理hibernate事务"></a>Spring AOP管理hibernate事务</h3><p>&emsp;&emsp;事务管理是用来以确保数据库中数据的完整性和一致性。Spring AOP技术允许开发者管理事务的声明。本文介绍一下如何使用Spring AOP进行hibernate事务管理。<br><a id="more"></a></p>
<h4 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1. 创建表"></a>1. 创建表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE  `product` (</div><div class="line">  `PRODUCT_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `PRODUCT_CODE` varchar(20) NOT NULL,</div><div class="line">  `PRODUCT_DESC` varchar(255) NOT NULL,</div><div class="line">  PRIMARY KEY (`PRODUCT_ID`) USING BTREE</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div><div class="line"></div><div class="line">CREATE TABLE  `product_qoh` (</div><div class="line">  `QOH_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `PRODUCT_ID` bigint(20) unsigned NOT NULL,</div><div class="line">  `QTY` int(10) unsigned NOT NULL,</div><div class="line">  PRIMARY KEY (`QOH_ID`),</div><div class="line">  KEY `FK_product_qoh_product_id` (`PRODUCT_ID`),</div><div class="line">  CONSTRAINT `FK_product_qoh_product_id` FOREIGN KEY (`PRODUCT_ID`) </div><div class="line">  REFERENCES `product` (`PRODUCT_ID`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h4 id="2-产品业务对象"><a href="#2-产品业务对象" class="headerlink" title="2. 产品业务对象"></a>2. 产品业务对象</h4><p>&emsp;&emsp;”productBo”实现save()方法通过”ProductDao”插入记录到”product”，并通过”productQohBo”插入记录到”productQoh”表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.product.bo.impl;</div><div class="line"></div><div class="line">import com.lidolid.product.bo.ProductBo;</div><div class="line">import com.lidolid.product.bo.ProductQohBo;</div><div class="line">import com.lidolid.product.dao.ProductDao;</div><div class="line">import com.lidolid.product.model.Product;</div><div class="line">import com.lidolid.product.model.ProductQoh;</div><div class="line"></div><div class="line">public class ProductBoImpl implements ProductBo &#123;</div><div class="line"></div><div class="line">	ProductDao productDao;</div><div class="line">	ProductQohBo productQohBo;</div><div class="line"></div><div class="line">	public void setProductDao(ProductDao productDao) &#123;</div><div class="line">		this.productDao = productDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setProductQohBo(ProductQohBo productQohBo) &#123;</div><div class="line">		this.productQohBo = productQohBo;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void save(Product product, int qoh) &#123;</div><div class="line"></div><div class="line">		productDao.save(product);</div><div class="line">		System.out.println(&quot;Product Inserted&quot;);</div><div class="line"></div><div class="line">		ProductQoh productQoh = new ProductQoh();</div><div class="line">		productQoh.setProductId(product.getProductId());</div><div class="line">		productQoh.setQty(qoh);</div><div class="line"></div><div class="line">		productQohBo.save(productQoh);</div><div class="line">		System.out.println(&quot;ProductQoh Inserted&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Spring的bean配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Product business object --&gt;</div><div class="line">&lt;bean id=&quot;productBo&quot; class=&quot;com.lidolid.product.bo.impl.ProductBoImpl&quot; &gt;</div><div class="line">		&lt;property name=&quot;productDao&quot; ref=&quot;productDao&quot; /&gt;</div><div class="line">		&lt;property name=&quot;productQohBo&quot; ref=&quot;productQohBo&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;!-- Product Data Access Object --&gt;</div><div class="line">&lt;bean id=&quot;productDao&quot; class=&quot;com.lidolid.product.dao.impl.ProductDaoImpl&quot; &gt;</div><div class="line">		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;运行它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Product product = new Product();</div><div class="line">product.setProductCode(&quot;ABC&quot;);</div><div class="line">product.setProductDesc(&quot;This is product ABC&quot;);</div><div class="line">    	</div><div class="line">ProductBo productBo = (ProductBo)appContext.getBean(&quot;productBo&quot;);</div><div class="line">productBo.save(product, 100);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>假设save() 不具有事务功能，如果异常抛出由productQohBo.save()，只插入一条记录到”product”表，没有记录将被插入到”productQoh”表。这是一个严重的问题，在数据库中打破数据一致性。</p>
</blockquote>
<h4 id="3-Spring事务管理"><a href="#3-Spring事务管理" class="headerlink" title="3. Spring事务管理"></a>3. Spring事务管理</h4><h5 id="3-1-工程结构"><a href="#3-1-工程结构" class="headerlink" title="3.1 工程结构"></a>3.1 工程结构</h5><p><img src="https://i.imgur.com/TWslpYU.png" alt=""></p>
<blockquote>
<p>代码说明：</p>
<ul>
<li>model：模型层</li>
<li>dao：数据访问层</li>
<li>bo：业务逻辑层</li>
</ul>
<p>资源文件说明：</p>
<ul>
<li>hibernate： 实体类映射文件，Hibernate事务bean定义</li>
<li>properties： 数据库连接信息</li>
<li>beans：Spring bean定义xml配置文件</li>
<li>config： 汇总配置信息文件</li>
<li>database： 数据库连接信息dataSource bean定义和hibernate配置文件bean定义</li>
</ul>
</blockquote>
<h5 id="3-2-Transaction-xml"><a href="#3-2-Transaction-xml" class="headerlink" title="3.2 Transaction.xml"></a>3.2 Transaction.xml</h5><p>声明”TransactionInterceptor” bean，以及”HibernateTransactionManager” Hibernate事务，并设置必要的属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionInterceptor&quot;</div><div class="line">		class=&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&gt;</div><div class="line">		&lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;</div><div class="line">		&lt;property name=&quot;transactionAttributes&quot;&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;save&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<ol>
<li>事务属性说明：<br>定义事务拦截器，必须定义事务的属性”传播行为”。这意味着，如果一个事务”ProductBoImpl.save()”方法调用另外的”productQohBo.save()”方法，事务应该怎么传播？它能继续在现有的事务中运行？或者为自己开始一个新的事务。<br>由Spring支持传播的 7种类型：</li>
</ol>
<ul>
<li>PROPAGATION_REQUIRED – 支持当前事务;如果不存在则创建一个新的。</li>
<li>PROPAGATION_SUPPORTS – 支持当前事务;如果不存在执行非事务。</li>
<li>PROPAGATION_MANDATORY – 支持当前事务;如果当前不存在事务抛出异常。</li>
<li>PROPAGATION_REQUIRES_NEW – 创建一个新的事务，如果当前事务暂停。</li>
<li>PROPAGATION_NOT_SUPPORTED – 不支持当前的事务;而始终执行非事务。</li>
<li>PROPAGATION_NEVER – 不支持当前的事务;如果当前事务存在则抛出异常。</li>
<li>PROPAGATION_NESTED – 如果当前存在事务嵌套事务中执行，表现与 PROPAGATION_REQUIRED 一样。</li>
</ul>
<p>在大多数情况下，可能只需要使用PROPAGATION_REQUIRED。此外，必须定义方法来支持这个事务属性。方法名支持通配符格式，save*会匹配所有的方法名 以save(…)开始的方法 。</p>
<ol>
<li>事务管理器<br>在Hibernate事务，需要使用 HibernateTransactionManager。如果只对付纯JDBC，useDataSourceTransactionManager。而如果是 JTA，需要使用 JtaTransactionManager。</li>
</ol>
</blockquote>
<h5 id="3-3-代理工厂bean"><a href="#3-3-代理工厂bean" class="headerlink" title="3.3 代理工厂bean"></a>3.3 代理工厂bean</h5><p>&emsp;&emsp;创建一个新的代理工厂bean的ProductBo，并设置”interceptorNames”属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- Product business object --&gt;</div><div class="line">   &lt;bean id=&quot;productBo&quot; class=&quot;com.lidolid.product.bo.impl.ProductBoImpl&quot; &gt;</div><div class="line">   		&lt;property name=&quot;productDao&quot; ref=&quot;productDao&quot; /&gt;</div><div class="line">   		&lt;property name=&quot;productQohBo&quot; ref=&quot;productQohBo&quot; /&gt;</div><div class="line">   &lt;/bean&gt;</div><div class="line"> </div><div class="line">   &lt;!-- Product Data Access Object --&gt;</div><div class="line">   &lt;bean id=&quot;productDao&quot; class=&quot;com.lidolid.product.dao.impl.ProductDaoImpl&quot; &gt;</div><div class="line">   		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;</div><div class="line">   &lt;/bean&gt;</div><div class="line">   </div><div class="line">   &lt;bean id=&quot;productBoProxy&quot;</div><div class="line">		class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;productBo&quot; /&gt;</div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;transactionInterceptor&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">   &lt;/bean&gt;   		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h6 id="3-4-运行"><a href="#3-4-运行" class="headerlink" title="3.4 运行"></a>3.4 运行</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.product.bo.ProductBo;</div><div class="line">import com.lidolid.product.model.Product;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext appContext = new ClassPathXmlApplicationContext(&quot;spring/config/BeanLocations.xml&quot;);</div><div class="line"></div><div class="line">		Product product = new Product();</div><div class="line">		product.setProductCode(&quot;ABC&quot;);</div><div class="line">		product.setProductDesc(&quot;This is product ABC&quot;);</div><div class="line"></div><div class="line">		ProductBo productBo = (ProductBo) appContext.getBean(&quot;productBoProxy&quot;);</div><div class="line">		productBo.save(product, 100);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：<br><img src="https://i.imgur.com/xCOIYja.png" alt=""></p>
<blockquote>
<p>代理 bean”productBoProxy”的save()方法是支持事务的。现在，里面productBo.save()方法任何异常会导致整个事务回滚，没有数据会被插入到数据库中。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-AOP管理hibernate事务&quot;&gt;&lt;a href=&quot;#Spring-AOP管理hibernate事务&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP管理hibernate事务&quot;&gt;&lt;/a&gt;Spring AOP管理hibernate事务&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;事务管理是用来以确保数据库中数据的完整性和一致性。Spring AOP技术允许开发者管理事务的声明。本文介绍一下如何使用Spring AOP进行hibernate事务管理。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合hibernate注解形式</title>
    <link href="http://yoursite.com/2017/08/22/Spring_0902_HibernateAnnotation/"/>
    <id>http://yoursite.com/2017/08/22/Spring_0902_HibernateAnnotation/</id>
    <published>2017-08-21T16:17:06.000Z</published>
    <updated>2017-09-20T02:40:54.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring整合hibernate注解形式"><a href="#Spring整合hibernate注解形式" class="headerlink" title="Spring整合hibernate注解形式"></a>Spring整合hibernate注解形式</h3><p>&emsp;&emsp;在使用hibernate进行实体类映射时，可以使用xml映射或者注解(Annotation)方式，本文简单介绍一下如何使用在spring整合hibernate时使用hibernate注解，通过hibernate实现数据库的增删改查。<br><a id="more"></a></p>
<h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p><img src="https://i.imgur.com/cZgYxHQ.png" alt=""></p>
<h4 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2. 创建表"></a>2. 创建表</h4><p>&emsp;&emsp;在MySQL数据库中创建一张“stock”表。 SQL语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE  `stock` (</div><div class="line">  `STOCK_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `STOCK_CODE` varchar(10) NOT NULL,</div><div class="line">  `STOCK_NAME` varchar(20) NOT NULL,</div><div class="line">  PRIMARY KEY (`STOCK_ID`) USING BTREE,</div><div class="line">  UNIQUE KEY `UNI_STOCK_NAME` (`STOCK_NAME`),</div><div class="line">  UNIQUE KEY `UNI_STOCK_ID` (`STOCK_CODE`) USING BTREE</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>
<h4 id="3-Model-amp-BO-amp-DAO"><a href="#3-Model-amp-BO-amp-DAO" class="headerlink" title="3. Model &amp; BO &amp; DAO"></a>3. Model &amp; BO &amp; DAO</h4><h5 id="3-1-Stock-Model"><a href="#3-1-Stock-Model" class="headerlink" title="3.1 Stock Model"></a>3.1 Stock Model</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.model;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">import javax.persistence.Column;</div><div class="line">import javax.persistence.Entity;</div><div class="line">import javax.persistence.GeneratedValue;</div><div class="line">import javax.persistence.GenerationType;</div><div class="line">import javax.persistence.Id;</div><div class="line">import javax.persistence.Table;</div><div class="line">import javax.persistence.UniqueConstraint;</div><div class="line"></div><div class="line">@Entity</div><div class="line">@Table(name = &quot;stock&quot;, catalog = &quot;yiibai&quot;, uniqueConstraints = &#123; @UniqueConstraint(columnNames = &quot;STOCK_NAME&quot;),</div><div class="line">		@UniqueConstraint(columnNames = &quot;STOCK_CODE&quot;) &#125;)</div><div class="line">public class Stock implements Serializable &#123;</div><div class="line"></div><div class="line">	private Long stockId;</div><div class="line">	private String stockCode;</div><div class="line">	private String stockName;</div><div class="line"></div><div class="line">	public Stock() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">	@Column(name = &quot;STOCK_ID&quot;, unique = true, nullable = false)</div><div class="line">	public Long getStockId() &#123;</div><div class="line">		return stockId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStockId(Long stockId) &#123;</div><div class="line">		this.stockId = stockId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Column(name = &quot;STOCK_CODE&quot;, unique = true, nullable = false, length = 10)</div><div class="line">	public String getStockCode() &#123;</div><div class="line">		return stockCode;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void setStockCode(String stockCode) &#123;</div><div class="line">		this.stockCode = stockCode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Column(name = &quot;STOCK_NAME&quot;, unique = true, nullable = false, length = 20)</div><div class="line">	public String getStockName() &#123;</div><div class="line">		return stockName;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void setStockName(String stockName) &#123;</div><div class="line">		this.stockName = stockName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Stock [stockCode=&quot; + stockCode + &quot;, stockId=&quot; + stockId + &quot;, stockName=&quot; + stockName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-2-Stock-Business-Object-BO"><a href="#3-2-Stock-Business-Object-BO" class="headerlink" title="3.2 Stock Business Object (BO)"></a>3.2 Stock Business Object (BO)</h5><p>&emsp;&emsp;Stock 业务对象(BO)接口和实现，它是用来存储项目的业务功能，真正的数据库操作(CRUD)的工作不参与这一个类，而是用一个DAO(StockDao)类来做到这一点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.bo;</div><div class="line"></div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public interface StockBo &#123;</div><div class="line">	void save(Stock stock);</div><div class="line">	void update(Stock stock);</div><div class="line">	void delete(Stock stock);</div><div class="line">	Stock findByStockCode(String stockCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;使这个类中的 Spring IoC容器的 bean”stockBo”自动装配库存DAO类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.bo.impl;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.lidolid.stock.bo.StockBo;</div><div class="line">import com.lidolid.stock.dao.StockDao;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">@Service(&quot;stockBo&quot;)</div><div class="line">public class StockBoImpl implements StockBo &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	StockDao stockDao;</div><div class="line"></div><div class="line">	public void setStockDao(StockDao stockDao) &#123;</div><div class="line">		this.stockDao = stockDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void save(Stock stock) &#123;</div><div class="line">		stockDao.save(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void update(Stock stock) &#123;</div><div class="line">		stockDao.update(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void delete(Stock stock) &#123;</div><div class="line">		stockDao.delete(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Stock findByStockCode(String stockCode) &#123;</div><div class="line">		return stockDao.findByStockCode(stockCode);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-3-Stock-Data-Access-Object-DAO"><a href="#3-3-Stock-Data-Access-Object-DAO" class="headerlink" title="3.3 Stock Data Access Object(DAO)"></a>3.3 Stock Data Access Object(DAO)</h5><p>&emsp;&emsp;Stock DAO接口和实现。在xml配置中，DAO类是直接扩展”HibernateDaoSupport”。但注释方式不可能做到这一点，因为<strong><em>没有办法从DAO类会话到工厂bean自动装配</em></strong>。解决方法是创建一个自定义类(CustomHibernateDaoSupport)，并扩展了”HibernateDaoSupport”和自动装配会话工厂，DAO类扩展了这个类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.util;</div><div class="line"></div><div class="line">import org.hibernate.SessionFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.orm.hibernate5.support.HibernateDaoSupport;</div><div class="line"></div><div class="line">public class CustomHibernateDaoSupport extends HibernateDaoSupport &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">    public void anyMethodName(SessionFactory sessionFactory)</div><div class="line">    &#123;</div><div class="line">        setSessionFactory(sessionFactory);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.dao;</div><div class="line"></div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public interface StockDao &#123;</div><div class="line">	void save(Stock stock);</div><div class="line"></div><div class="line">	void update(Stock stock);</div><div class="line"></div><div class="line">	void delete(Stock stock);</div><div class="line"></div><div class="line">	Stock findByStockCode(String stockCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.dao.impl;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line">import org.springframework.transaction.annotation.Propagation;</div><div class="line">import org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line">import com.lidolid.stock.dao.StockDao;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line">import com.lidolid.util.CustomHibernateDaoSupport;</div><div class="line"></div><div class="line">@Transactional(readOnly = false, propagation = Propagation.REQUIRES_NEW )</div><div class="line">@Repository(&quot;stockDao&quot;)</div><div class="line">public class StockDaoImpl extends CustomHibernateDaoSupport implements StockDao &#123;</div><div class="line">	public void save(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().save(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void update(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().update(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void delete(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().delete(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Stock findByStockCode(String stockCode) &#123;</div><div class="line">		List list = getHibernateTemplate().find(&quot;from Stock where stockCode=?&quot;, stockCode);</div><div class="line">		return (Stock) list.get(0);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-资源配置"><a href="#4-资源配置" class="headerlink" title="4. 资源配置"></a>4. 资源配置</h4><h5 id="4-1-Spring-Configuration"><a href="#4-1-Spring-Configuration" class="headerlink" title="4.1 Spring Configuration"></a>4.1 Spring Configuration</h5><p>&emsp;&emsp;创建一个属性文件(database.properties)来存放数据库的详细信息，把它放到properties文件夹中,用于设置dataSource bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql://localhost:3306/spring</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=cupdata</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;为数据库创建一个”dataSource”bean配置文件(DataSource.xml)，并从database.properties导入的属性，把它放入到database文件夹中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean</div><div class="line">		class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</div><div class="line">		&lt;property name=&quot;location&quot;&gt;</div><div class="line">			&lt;value&gt;properties/database.properties&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;创建一个会话工厂bean配置文件(Hibernate.xml)，把它放入database文件夹中。这个 LocalSessionFactoryBean中设置一个共享的Hibernate SessionFactory。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- Hibernate session factory --&gt;</div><div class="line">	&lt;bean id=&quot;sessionFactory&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;dataSource&quot;&gt;</div><div class="line">			&lt;ref bean=&quot;dataSource&quot; /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;hibernateProperties&quot;&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;annotatedClasses&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;com.lidolid.stock.model.Stock&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;导入所有的 Spring bean 配置文件合并为一个文件(BeanLocations.xml)，把它放到config文件夹,BeanLocations.xml。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</div><div class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </div><div class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</div><div class="line">		p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line">	&lt;tx:advice id=&quot;txAdviceHibernate&quot; transaction-manager=&quot;transactionManager&quot;&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; /&gt;</div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;aop:pointcut id=&quot;serviceMethodsHibnerate&quot;</div><div class="line">			expression=&quot;execution(* com.lidolid.stock.dao..*.*(..))&quot; /&gt;</div><div class="line">		&lt;aop:advisor advice-ref=&quot;txAdviceHibernate&quot; pointcut-ref=&quot;serviceMethodsHibnerate&quot; /&gt;</div><div class="line">	&lt;/aop:config&gt;</div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line">	</div><div class="line">	&lt;!-- Database Configuration --&gt;</div><div class="line">	&lt;import resource=&quot;../database/DataSource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;../database/Hibernate.xml&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- Auto scan the components --&gt;</div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.stock&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>同样需要设置Spring事务</p>
</blockquote>
<h4 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行"></a>5. 运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.stock.bo.StockBo;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext appContext = new ClassPathXmlApplicationContext(&quot;config/BeanLocations.xml&quot;);</div><div class="line"></div><div class="line">		StockBo stockBo = (StockBo) appContext.getBean(&quot;stockBo&quot;);</div><div class="line"></div><div class="line">		/** insert **/</div><div class="line">		Stock stock = new Stock();</div><div class="line">		stock.setStockCode(&quot;7668&quot;);</div><div class="line">		stock.setStockName(&quot;HAIO&quot;);</div><div class="line">		stockBo.save(stock);</div><div class="line"></div><div class="line">		/** select **/</div><div class="line">		Stock stock2 = stockBo.findByStockCode(&quot;7668&quot;);</div><div class="line">		System.out.println(stock2);</div><div class="line"></div><div class="line">		/** update **/</div><div class="line">		stock2.setStockName(&quot;HAIO-1&quot;);</div><div class="line">		stockBo.update(stock2);</div><div class="line"></div><div class="line">		/** delete **/</div><div class="line">		stockBo.delete(stock2);</div><div class="line"></div><div class="line">		System.out.println(&quot;Done&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：<br><img src="https://i.imgur.com/jCtOTbt.png" alt=""></p>
<h4 id="6-注意"><a href="#6-注意" class="headerlink" title="6. 注意"></a>6. 注意</h4><ul>
<li>在使用Annotation注解后，不在需要stock.xml bean定义文件和实体类映射文件Stock.hbm.xml</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring整合hibernate注解形式&quot;&gt;&lt;a href=&quot;#Spring整合hibernate注解形式&quot; class=&quot;headerlink&quot; title=&quot;Spring整合hibernate注解形式&quot;&gt;&lt;/a&gt;Spring整合hibernate注解形式&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在使用hibernate进行实体类映射时，可以使用xml映射或者注解(Annotation)方式，本文简单介绍一下如何使用在spring整合hibernate时使用hibernate注解，通过hibernate实现数据库的增删改查。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合hibernate问题汇总</title>
    <link href="http://yoursite.com/2017/08/21/Spring_0901_Hibernateproblems/"/>
    <id>http://yoursite.com/2017/08/21/Spring_0901_Hibernateproblems/</id>
    <published>2017-08-21T11:37:14.000Z</published>
    <updated>2017-09-19T17:05:32.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring整合hibernate问题汇总"><a href="#Spring整合hibernate问题汇总" class="headerlink" title="Spring整合hibernate问题汇总"></a>Spring整合hibernate问题汇总</h3><p>&emsp;&emsp;我在使用Spring整合Hibernate时，出现了一系列的问题。通过查询各种资料最后才得以解决。下面我总结一下我认为比较棘手的问题，供学习参考。</p>
<ul>
<li>InvalidDataAccessApiUsageException</li>
<li>NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext</li>
</ul>
<a id="more"></a>
<h4 id="1-InvalidDataAccessApiUsageException"><a href="#1-InvalidDataAccessApiUsageException" class="headerlink" title="1. InvalidDataAccessApiUsageException"></a>1. InvalidDataAccessApiUsageException</h4><p>&emsp;&emsp;DAO实现类扩展了Spring的”HibernateDaoSupport”，以使Spring框架支持Hibernate。之后可以通过getHibernateTemplate()执行Hibernate功能。但在实际做更新操作(增、改、删)时，却出现了异常，报错信息如下：</p>
<blockquote>
<p>Exception in thread “main” org.springframework.dao.InvalidDataAccessApiUsageException: Write operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove ‘readOnly’ marker from transaction definition.<br><img src="https://i.imgur.com/L5rfS9t.png" alt=""></p>
</blockquote>
<h5 id="1-1-问题分析："><a href="#1-1-问题分析：" class="headerlink" title="1.1 问题分析："></a>1.1 问题分析：</h5><p>&emsp;&emsp;这个异常是因为，在hibernate事务管理中，你在dao中写的方法，被hibernate列为了只读属性，只能从数据库中读取数据，不能进行增加和更新和删除操作。</p>
<h5 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h5><p>&emsp;&emsp;配置Spring事务,让spring 来管理hibernate session。<br>BeanLocations.xml文件添加事务配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</div><div class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </div><div class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</div><div class="line">		p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line">	&lt;tx:advice id=&quot;txAdviceHibernate&quot; transaction-manager=&quot;transactionManager&quot;&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; /&gt;</div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;aop:pointcut id=&quot;serviceMethodsHibnerate&quot;</div><div class="line">			expression=&quot;execution(* com.lidolid.stock.dao..*.*(..))&quot; /&gt;</div><div class="line">		&lt;aop:advisor advice-ref=&quot;txAdviceHibernate&quot; pointcut-ref=&quot;serviceMethodsHibnerate&quot; /&gt;</div><div class="line">	&lt;/aop:config&gt;</div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line"></div><div class="line">	&lt;!-- Database Configuration --&gt;</div><div class="line">	&lt;import resource=&quot;../database/DataSource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;../database/Hibernate.xml&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- Beans Declaration --&gt;</div><div class="line">	&lt;import resource=&quot;../spring/Stock.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：在进行事务配置时，使用了p模式和tx模式，需要进行声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; </div><div class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div></pre></td></tr></table></figure>
</blockquote>
<p><a href="http://blog.csdn.net/longxia1987/article/details/7819242" target="_blank" rel="external">参考链接</a></p>
<h4 id="2-NoClassDefFoundError-org-hibernate-engine-transaction-spi-TransactionContext"><a href="#2-NoClassDefFoundError-org-hibernate-engine-transaction-spi-TransactionContext" class="headerlink" title="2. NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext"></a>2. NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext</h4><p>&emsp;&emsp;在进行Spring事务配置时，在xml文件中添加了一段配置，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;transactionManager&quot;</div><div class="line">	class=&quot;org.springframework.orm.hibernate4.HibernateTransactionManager&quot;</div><div class="line">	p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>结果产生了异常，报错信息如下：</p>
<blockquote>
<p>Exception in thread “main” org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is java.lang.NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext<br><img src="https://i.imgur.com/QnorTH5.png" alt=""></p>
</blockquote>
<h5 id="2-1-问题分析："><a href="#2-1-问题分析：" class="headerlink" title="2.1 问题分析："></a>2.1 问题分析：</h5><p>&emsp;&emsp;我在项目中使用的时Hibernate5.2.8，但我声明的时hibernate4，所以产生了此错误。</p>
<h5 id="2-2-解决方案："><a href="#2-2-解决方案：" class="headerlink" title="2.2 解决方案："></a>2.2 解决方案：</h5><p>将事务配置中声明由hibernate4改为hibernate5，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;transactionManager&quot;</div><div class="line">	class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</div><div class="line">	p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在使用hibernate时，请注意版本</p>
</blockquote>
<p><a href="http://www.cnblogs.com/Hdaydayup/p/6534982.html" target="_blank" rel="external">参考链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring整合hibernate问题汇总&quot;&gt;&lt;a href=&quot;#Spring整合hibernate问题汇总&quot; class=&quot;headerlink&quot; title=&quot;Spring整合hibernate问题汇总&quot;&gt;&lt;/a&gt;Spring整合hibernate问题汇总&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我在使用Spring整合Hibernate时，出现了一系列的问题。通过查询各种资料最后才得以解决。下面我总结一下我认为比较棘手的问题，供学习参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InvalidDataAccessApiUsageException&lt;/li&gt;
&lt;li&gt;NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring+Hibernate+MySql</title>
    <link href="http://yoursite.com/2017/08/20/Spring_0900_Hibernate/"/>
    <id>http://yoursite.com/2017/08/20/Spring_0900_Hibernate/</id>
    <published>2017-08-20T15:04:11.000Z</published>
    <updated>2017-09-19T16:31:56.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Hibernate-MySql"><a href="#Spring-Hibernate-MySql" class="headerlink" title="Spring+Hibernate+MySql"></a>Spring+Hibernate+MySql</h3><p>&emsp;&emsp;使用JDBC与数据库交互时，总是避免不了写一些重复的sql脚本，且不符合面向对象的编程理念，而Hibernate则解决了这个问题。本文展示如何使用Spring+Hibernate+Mysql实现对数据库的增删改查操作。<br><a id="more"></a></p>
<h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p><img src="https://i.imgur.com/COpEqja.png" alt=""></p>
<blockquote>
<p>代码说明：</p>
<ul>
<li>model：模型层</li>
<li>dao：数据访问层</li>
<li>bo：业务逻辑层</li>
</ul>
<p>资源文件说明：</p>
<ul>
<li>spring：Spring bean定义xml配置文件</li>
<li>properties： 数据库连接信息</li>
<li>hibernate： 实体类映射文件</li>
<li>database： 数据库连接信息dataSource bean定义和hibernate配置文件bean定义</li>
<li>config： 汇总配置信息文件</li>
</ul>
</blockquote>
<h4 id="2-创建表stock"><a href="#2-创建表stock" class="headerlink" title="2. 创建表stock"></a>2. 创建表stock</h4><p>&emsp;&emsp;在MySQL数据库中创建一张”stock”表。 SQL语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE  `stock` (</div><div class="line">  `STOCK_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `STOCK_CODE` varchar(10) NOT NULL,</div><div class="line">  `STOCK_NAME` varchar(20) NOT NULL,</div><div class="line">  PRIMARY KEY (`STOCK_ID`) USING BTREE,</div><div class="line">  UNIQUE KEY `UNI_STOCK_NAME` (`STOCK_NAME`),</div><div class="line">  UNIQUE KEY `UNI_STOCK_ID` (`STOCK_CODE`) USING BTREE</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>
<h4 id="3-Model-amp-BO-amp-DAO"><a href="#3-Model-amp-BO-amp-DAO" class="headerlink" title="3. Model &amp; BO &amp; DAO"></a>3. Model &amp; BO &amp; DAO</h4><h5 id="3-1-Stock-Model"><a href="#3-1-Stock-Model" class="headerlink" title="3.1 Stock Model"></a>3.1 Stock Model</h5><p>&emsp;&emsp;Stock模型类以后用于存储库存数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.model;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">public class Stock implements Serializable &#123;</div><div class="line"></div><div class="line">	private Long stockId;</div><div class="line">	private String stockCode;</div><div class="line">	private String stockName;</div><div class="line"></div><div class="line">	public Stock() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Long getStockId() &#123;</div><div class="line">		return stockId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStockId(Long stockId) &#123;</div><div class="line">		this.stockId = stockId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getStockCode() &#123;</div><div class="line">		return stockCode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStockCode(String stockCode) &#123;</div><div class="line">		this.stockCode = stockCode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getStockName() &#123;</div><div class="line">		return stockName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStockName(String stockName) &#123;</div><div class="line">		this.stockName = stockName;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-2-Stock-Business-Object-BO"><a href="#3-2-Stock-Business-Object-BO" class="headerlink" title="3.2 Stock Business Object (BO)"></a>3.2 Stock Business Object (BO)</h5><p>&emsp;&emsp;Stock 业务对象(BO)接口和实现，它是用来存储项目的业务功能，真正的数据库操作(CRUD)的工作不应该参与这一个类，而是有一个DAO(StockDao)类来做到这一点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.bo;</div><div class="line"></div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public interface StockBo &#123;</div><div class="line">	void save(Stock stock);</div><div class="line">	void update(Stock stock);</div><div class="line">	void delete(Stock stock);</div><div class="line">	Stock findByStockCode(String stockCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.bo.impl;</div><div class="line"></div><div class="line">import com.lidolid.stock.bo.StockBo;</div><div class="line">import com.lidolid.stock.dao.StockDao;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public class StockBoImpl implements StockBo &#123;</div><div class="line"></div><div class="line">	StockDao stockDao;</div><div class="line"></div><div class="line">	public void setStockDao(StockDao stockDao) &#123;</div><div class="line">		this.stockDao = stockDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void save(Stock stock) &#123;</div><div class="line">		stockDao.save(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void update(Stock stock) &#123;</div><div class="line">		stockDao.update(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void delete(Stock stock) &#123;</div><div class="line">		stockDao.delete(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Stock findByStockCode(String stockCode) &#123;</div><div class="line">		return stockDao.findByStockCode(stockCode);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-3-Stock-Data-Access-Object-DAO"><a href="#3-3-Stock-Data-Access-Object-DAO" class="headerlink" title="3.3 Stock Data Access Object(DAO)"></a>3.3 Stock Data Access Object(DAO)</h5><p>&emsp;&emsp;Stock DAO接口和实现，DAO实现类扩展了Spring的”HibernateDaoSupport”，以使Spring框架支持Hibernate。之后可以通过getHibernateTemplate()执行Hibernate功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.dao;</div><div class="line"></div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public interface StockDao &#123;</div><div class="line">	void save(Stock stock);</div><div class="line"></div><div class="line">	void update(Stock stock);</div><div class="line"></div><div class="line">	void delete(Stock stock);</div><div class="line"></div><div class="line">	Stock findByStockCode(String stockCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.dao.impl;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.orm.hibernate5.support.HibernateDaoSupport;</div><div class="line"></div><div class="line">import com.lidolid.stock.dao.StockDao;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public class StockDaoImpl extends HibernateDaoSupport implements StockDao &#123;</div><div class="line">	public void save(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().save(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void update(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().update(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void delete(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().delete(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Stock findByStockCode(String stockCode) &#123;</div><div class="line">		List list = getHibernateTemplate().find(&quot;from Stock where stockCode=?&quot;, stockCode);</div><div class="line">		return (Stock) list.get(0);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-资源配置"><a href="#4-资源配置" class="headerlink" title="4.资源配置"></a>4.资源配置</h4><h5 id="4-1-Hibernate-Configuration"><a href="#4-1-Hibernate-Configuration" class="headerlink" title="4.1 Hibernate Configuration"></a>4.1 Hibernate Configuration</h5><p>&emsp;&emsp;创建Hibernate映射文件(Stock.hbm.xml)的Stock表，把它放在hibernate文件夹中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</div><div class="line">&quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">    &lt;class name=&quot;com.lidolid.stock.model.Stock&quot; table=&quot;stock&quot; catalog=&quot;lidolid&quot;&gt;</div><div class="line">        &lt;id name=&quot;stockId&quot; type=&quot;java.lang.Long&quot;&gt;</div><div class="line">            &lt;column name=&quot;STOCK_ID&quot; /&gt;</div><div class="line">            &lt;generator class=&quot;identity&quot; /&gt;</div><div class="line">        &lt;/id&gt;</div><div class="line">        &lt;property name=&quot;stockCode&quot; type=&quot;string&quot;&gt;</div><div class="line">            &lt;column name=&quot;STOCK_CODE&quot; length=&quot;10&quot; not-null=&quot;true&quot; unique=&quot;true&quot; /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=&quot;stockName&quot; type=&quot;string&quot;&gt;</div><div class="line">            &lt;column name=&quot;STOCK_NAME&quot; length=&quot;20&quot; not-null=&quot;true&quot; unique=&quot;true&quot; /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure></p>
<h5 id="4-2-Spring-Configuration"><a href="#4-2-Spring-Configuration" class="headerlink" title="4.2 Spring Configuration"></a>4.2 Spring Configuration</h5><p>&emsp;&emsp;创建一个属性文件(database.properties)数据库的详细信息，把它放在properties 文件夹中，用于设置dataSource bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql://localhost:3306/spring</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=cupdata</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;为数据库创建一个”dataSource”bean配置文件(DataSource.xml)，并从database.properties导入的属性，把它放入到database文件夹中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean</div><div class="line">		class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</div><div class="line">		&lt;property name=&quot;location&quot;&gt;</div><div class="line">			&lt;value&gt;properties/database.properties&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;创建一个会话工厂bean配置文件(Hibernate.xml)，把它放入database文件夹中。这个 LocalSessionFactoryBean中设置一个共享的Hibernate SessionFactory。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">   </div><div class="line">	&lt;!-- Hibernate session factory --&gt;</div><div class="line">	&lt;bean id=&quot;sessionFactory&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;dataSource&quot;&gt;</div><div class="line">			&lt;ref bean=&quot;dataSource&quot; /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;hibernateProperties&quot;&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;mappingResources&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hibernate/Stock.hbm.xml&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;创建一个bean配置文件(Stock.xml)的BO和DAO类，把它放入spring文件夹中。依赖的 DAO(stockDao)bean 注入到 bo(stockBo)bean; SessionFactory bean到stockDao。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- Stock business object --&gt;</div><div class="line">	&lt;bean id=&quot;stockBo&quot; class=&quot;com.lidolid.stock.bo.impl.StockBoImpl&quot;&gt;</div><div class="line">		&lt;property name=&quot;stockDao&quot; ref=&quot;stockDao&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- Stock Data Access Object --&gt;</div><div class="line">	&lt;bean id=&quot;stockDao&quot; class=&quot;com.lidolid.stock.dao.impl.StockDaoImpl&quot;&gt;</div><div class="line">		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;导入所有的Spring bean配置文件合并为一个文件(BeanLocations.xml)，把它变成了config文件夹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</div><div class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </div><div class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</div><div class="line">		p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line">	&lt;tx:advice id=&quot;txAdviceHibernate&quot; transaction-manager=&quot;transactionManager&quot;&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; /&gt;</div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;aop:pointcut id=&quot;serviceMethodsHibnerate&quot;</div><div class="line">			expression=&quot;execution(* com.lidolid.stock.dao..*.*(..))&quot; /&gt;</div><div class="line">		&lt;aop:advisor advice-ref=&quot;txAdviceHibernate&quot; pointcut-ref=&quot;serviceMethodsHibnerate&quot; /&gt;</div><div class="line">	&lt;/aop:config&gt;</div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line"></div><div class="line">	&lt;!-- Database Configuration --&gt;</div><div class="line">	&lt;import resource=&quot;../database/DataSource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;../database/Hibernate.xml&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- Beans Declaration --&gt;</div><div class="line">	&lt;import resource=&quot;../spring/Stock.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：在配置文件中要进行事务配置，否则执行更新(增、改、删)操作时，会报错操作权限错误</p>
</blockquote>
<h4 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行"></a>5. 运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.stock.bo.StockBo;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext appContext = new ClassPathXmlApplicationContext(&quot;config/BeanLocations.xml&quot;);</div><div class="line"></div><div class="line">		StockBo stockBo = (StockBo) appContext.getBean(&quot;stockBo&quot;);</div><div class="line"></div><div class="line">		/** insert **/</div><div class="line">		Stock stock = new Stock();</div><div class="line">		stock.setStockCode(&quot;7668&quot;);</div><div class="line">		stock.setStockName(&quot;HAIO&quot;);</div><div class="line">		stockBo.save(stock);</div><div class="line"></div><div class="line">		/** select **/</div><div class="line">		Stock stock2 = stockBo.findByStockCode(&quot;7668&quot;);</div><div class="line">		System.out.println(stock2);</div><div class="line"></div><div class="line">		/** update **/</div><div class="line">		stock2.setStockName(&quot;HAIO-1&quot;);</div><div class="line">		stockBo.update(stock2);</div><div class="line"></div><div class="line">		/** delete **/</div><div class="line">		stockBo.delete(stock2);</div><div class="line"></div><div class="line">		System.out.println(&quot;Done&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;结果输出：<br><img src="https://i.imgur.com/eY9NWqV.png" alt=""></p>
<h4 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a>6. 注意事项</h4><h5 id="6-1-Spring整合Hibernate必要jar包"><a href="#6-1-Spring整合Hibernate必要jar包" class="headerlink" title="6.1 Spring整合Hibernate必要jar包"></a>6.1 Spring整合Hibernate必要jar包</h5><p><img src="https://i.imgur.com/cHVAyU5.png" alt=""></p>
<p>Maven pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">	&lt;groupId&gt;com.lidolid&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;Spring_0100_HelloWorld&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line"></div><div class="line">		&lt;!-- Spring Core --&gt;</div><div class="line">		&lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- Spring Context --&gt;</div><div class="line">		&lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;5.0.2&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;5.2.8.Final&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.aspectj&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.8.5&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;同时，使用时请注意各个包之间的版本兼容，如果jar包冲突，调试也将是一件很麻烦的事情。此时，使用Maven在一定程度上减轻了这种麻烦。本工程Hibernate-core本来我使用的版本是5.2.20，但是却出现了jar包冲突问题，经了解Hibernate-core 5.2.20版本做了很大改动，容易与Spring产生冲突，所以试验中我该用了5.2.8版本</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Hibernate-MySql&quot;&gt;&lt;a href=&quot;#Spring-Hibernate-MySql&quot; class=&quot;headerlink&quot; title=&quot;Spring+Hibernate+MySql&quot;&gt;&lt;/a&gt;Spring+Hibernate+MySql&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用JDBC与数据库交互时，总是避免不了写一些重复的sql脚本，且不符合面向对象的编程理念，而Hibernate则解决了这个问题。本文展示如何使用Spring+Hibernate+Mysql实现对数据库的增删改查操作。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring自动代理</title>
    <link href="http://yoursite.com/2017/08/19/Spring_0802_AutoProxyCreator/"/>
    <id>http://yoursite.com/2017/08/19/Spring_0802_AutoProxyCreator/</id>
    <published>2017-08-19T12:46:29.000Z</published>
    <updated>2017-09-19T14:55:04.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring自动代理"><a href="#Spring自动代理" class="headerlink" title="Spring自动代理"></a>Spring自动代理</h3><p>&emsp;&emsp;要对一个bean进行拦截，必须手动创建一个代理bean(ProxyFactryBean)。若要拦截多个bean，则需要对每个Bean AOP支持。这不是一种有效的方式，例如，如果想在客户模块，所有的DAO类实现SQL日志支持(提醒)的AOP功能，那么必须手动创建很多代理工厂bean，因此在bean配置文件可能会泛滥代理类。这显然是不合适的，在实际开发中，可以使用自动代理来创建代理bean。<br><a id="more"></a><br>&emsp;&emsp;自动代理分为以下两种方式：</p>
<ul>
<li>BeanNameAutoProxyCreator</li>
<li>DefaultAdvisorAutoProxyCreator</li>
</ul>
<h4 id="1-不使用自动代理示例"><a href="#1-不使用自动代理示例" class="headerlink" title="1. 不使用自动代理示例"></a>1. 不使用自动代理示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; </div><div class="line">                class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;customerAdvisor&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt; --&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 上述配置等价于下面的配置 --&gt;</div><div class="line">	&lt;bean id=&quot;customerYiibaicut&quot; </div><div class="line">                class=&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot; </div><div class="line">                 class=&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;pointcut&quot; ref=&quot;customerYiibaicut&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用代理名称”customerServiceProxy”来获得bean</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)appContext.getBean(&quot;customerServiceProxy&quot;);</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-BeanNameAutoProxyCreator示例"><a href="#2-BeanNameAutoProxyCreator示例" class="headerlink" title="2. BeanNameAutoProxyCreator示例"></a>2. BeanNameAutoProxyCreator示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean class=&quot;org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator&quot;&gt;</div><div class="line">		&lt;property name=&quot;beanNames&quot;&gt;</div><div class="line">            &lt;list&gt;</div><div class="line">                &lt;value&gt;*Service&lt;/value&gt;</div><div class="line">            &lt;/list&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">            &lt;list&gt;</div><div class="line">                &lt;value&gt;customerAdvisor&lt;/value&gt;</div><div class="line">            &lt;/list&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>自动代理机制，只需要创建一个的 BeanNameAutoProxyCreator，并包含所有你的bean(通过bean的名字，或正则表达式名)和”advisor”作为一个单位。<br>可以通过“CustomerService”的原始名称获取bean, 如果知道这个bean已经代理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)appContext.getBean(&quot;customerService&quot;);</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-DefaultAdvisorAutoProxyCreator示例"><a href="#2-DefaultAdvisorAutoProxyCreator示例" class="headerlink" title="2. DefaultAdvisorAutoProxyCreator示例"></a>2. DefaultAdvisorAutoProxyCreator示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>DefaultAdvisorAutoProxyCreator是非常强大的，如果有bean相关连，Spring会自动创建一个代理。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring自动代理&quot;&gt;&lt;a href=&quot;#Spring自动代理&quot; class=&quot;headerlink&quot; title=&quot;Spring自动代理&quot;&gt;&lt;/a&gt;Spring自动代理&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;要对一个bean进行拦截，必须手动创建一个代理bean(ProxyFactryBean)。若要拦截多个bean，则需要对每个Bean AOP支持。这不是一种有效的方式，例如，如果想在客户模块，所有的DAO类实现SQL日志支持(提醒)的AOP功能，那么必须手动创建很多代理工厂bean，因此在bean配置文件可能会泛滥代理类。这显然是不合适的，在实际开发中，可以使用自动代理来创建代理bean。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="自动代理" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP切入点</title>
    <link href="http://yoursite.com/2017/08/19/Spring_0801_pointcut/"/>
    <id>http://yoursite.com/2017/08/19/Spring_0801_pointcut/</id>
    <published>2017-08-18T16:06:38.000Z</published>
    <updated>2017-09-19T14:27:08.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-AOP切入点"><a href="#Spring-AOP切入点" class="headerlink" title="Spring AOP切入点"></a>Spring AOP切入点</h3><p>&emsp;&emsp;如果不设置AOP切入点的话，一个类所有的方法都会被自动拦截。但在大多数情况下，可能只需要一种方式来拦截一个或两个方法，这时候接需要设置切入点，它允许你通过它的方法名来拦截方法。<br>&emsp;&emsp;在Spring AOP中，有三个非常专业术语- Advices，Yiibaicut，Advisor</p>
<ul>
<li>Advice – 指示之前或方法执行后采取的行动</li>
<li>Yiibaicut – 指明哪些方法应该拦截，通过方法的名称或正则表达式模式</li>
<li>Advisor – 分组”通知”和”切入点“成为一个单元，并把它传递到代理工厂对象</li>
</ul>
<a id="more"></a>
<h4 id="1-切入点：名称匹配"><a href="#1-切入点：名称匹配" class="headerlink" title="1. 切入点：名称匹配"></a>1. 切入点：名称匹配</h4><h5 id="1-1-CustomerService定义"><a href="#1-1-CustomerService定义" class="headerlink" title="1.1 CustomerService定义"></a>1.1 CustomerService定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">public class CustomerService &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private String url;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUrl(String url) &#123;</div><div class="line">		this.url = url;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printName() &#123;</div><div class="line">		System.out.println(&quot;Customer name : &quot; + this.name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printURL() &#123;</div><div class="line">		System.out.println(&quot;Customer website : &quot; + this.url);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printThrowException() &#123;</div><div class="line">		throw new IllegalArgumentException();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-2-创建一个实现MethodInterceptor接口的类"><a href="#1-2-创建一个实现MethodInterceptor接口的类" class="headerlink" title="1.2 创建一个实现MethodInterceptor接口的类"></a>1.2 创建一个实现MethodInterceptor接口的类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">import org.aopalliance.intercept.MethodInterceptor;</div><div class="line">import org.aopalliance.intercept.MethodInvocation;</div><div class="line"></div><div class="line">public class HijackAroundMethod implements MethodInterceptor &#123;</div><div class="line"></div><div class="line">	public HijackAroundMethod() &#123;</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;Method name : &quot; + methodInvocation.getMethod().getName());</div><div class="line">		System.out.println(&quot;Method arguments : &quot; + Arrays.toString(methodInvocation.getArguments()));</div><div class="line"></div><div class="line">		// same with MethodBeforeAdvice</div><div class="line">		System.out.println(&quot;HijackAroundMethod : Before method hijacked!&quot;);</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			// proceed to original method call</div><div class="line">			Object result = methodInvocation.proceed();</div><div class="line"></div><div class="line">			// same with AfterReturningAdvice</div><div class="line">			System.out.println(&quot;HijackAroundMethod : Before after hijacked!&quot;);</div><div class="line"></div><div class="line">			return result;</div><div class="line"></div><div class="line">		&#125; catch (IllegalArgumentException e) &#123;</div><div class="line">			// same with ThrowsAdvice</div><div class="line">			System.out.println(&quot;HijackAroundMethod : Throw exception hijacked!&quot;);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-3-Bean配置文件-beans-pointcut-xml"><a href="#1-3-Bean配置文件-beans-pointcut-xml" class="headerlink" title="1.3 Bean配置文件(beans_pointcut.xml)"></a>1.3 Bean配置文件(beans_pointcut.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; </div><div class="line">                class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;customerAdvisor&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt; --&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 上述配置等价于下面的配置 --&gt;</div><div class="line">	&lt;bean id=&quot;customerYiibaicut&quot; </div><div class="line">                class=&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot; </div><div class="line">                 class=&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;pointcut&quot; ref=&quot;customerYiibaicut&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：xml定义切入点和分组可以分开两个bean定义，也可以合为一个bean定义，定义方式见上述xml文件配置</p>
<ul>
<li>Yiibaicut：指明哪些方法应该拦截，通过方法的名称或正则表达式模式</li>
<li>Advisor：分组”通知”和”切入点”成为一个单元，并把它传递到代理工厂对象</li>
</ul>
</blockquote>
<h5 id="1-4-运行"><a href="#1-4-运行" class="headerlink" title="1.4 运行"></a>1.4 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_pointcut.xml&quot;);</div><div class="line">		</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-5-运行结果"><a href="#1-5-运行结果" class="headerlink" title="1.5 运行结果"></a>1.5 运行结果</h5><p><img src="https://i.imgur.com/LxbqEI6.png" alt=""></p>
<blockquote>
<p>只有printName()方法被拦截</p>
</blockquote>
<h4 id="2-切入点：正则表达式匹配"><a href="#2-切入点：正则表达式匹配" class="headerlink" title="2. 切入点：正则表达式匹配"></a>2. 切入点：正则表达式匹配</h4><p>&emsp;&emsp;可以通过使用正则表达式匹配切入点方法的名称  – RegexpMethodYiibaicutAdvisor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; </div><div class="line">                class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;customerAdvisor&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;patterns&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;.*URL.*&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt; </div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>它拦截方法名称中有“URL”的方法。在实践中，可以用它来管理DAO层，声明“.<em>DAO.</em>” 拦截所有的DAO类来支持事务。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-AOP切入点&quot;&gt;&lt;a href=&quot;#Spring-AOP切入点&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP切入点&quot;&gt;&lt;/a&gt;Spring AOP切入点&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果不设置AOP切入点的话，一个类所有的方法都会被自动拦截。但在大多数情况下，可能只需要一种方式来拦截一个或两个方法，这时候接需要设置切入点，它允许你通过它的方法名来拦截方法。&lt;br&gt;&amp;emsp;&amp;emsp;在Spring AOP中，有三个非常专业术语- Advices，Yiibaicut，Advisor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advice – 指示之前或方法执行后采取的行动&lt;/li&gt;
&lt;li&gt;Yiibaicut – 指明哪些方法应该拦截，通过方法的名称或正则表达式模式&lt;/li&gt;
&lt;li&gt;Advisor – 分组”通知”和”切入点“成为一个单元，并把它传递到代理工厂对象&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP通知</title>
    <link href="http://yoursite.com/2017/08/18/Spring_0800_aop/"/>
    <id>http://yoursite.com/2017/08/18/Spring_0800_aop/</id>
    <published>2017-08-17T16:37:29.000Z</published>
    <updated>2017-09-19T14:14:57.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-AOP通知"><a href="#Spring-AOP通知" class="headerlink" title="Spring AOP通知"></a>Spring AOP通知</h3><p>&emsp;&emsp;Spring AOP(面向方面编程)框架，用于在模块化方面的横切关注点。简单得说，它只是一个拦截器拦截一些过程，例如，当一个方法执行，Spring AOP 可以劫持一个执行的方法，在方法执行之前或之后添加额外的功能。在Spring AOP中，有4种类型通知(advices)的支持：</p>
<ul>
<li>通知(Advice)之前 - 该方法执行前运行</li>
<li>通知(Advice)返回之后 – 运行后，该方法返回一个结果</li>
<li>通知(Advice)抛出之后 – 运行方法抛出异常后</li>
<li>环绕通知 – 环绕方法执行运行，结合以上这三个通知</li>
</ul>
<a id="more"></a>
<h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p><img src="https://i.imgur.com/FH7yCuN.png" alt=""></p>
<p>&emsp;&emsp;CustomerService定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">public class CustomerService &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private String url;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUrl(String url) &#123;</div><div class="line">		this.url = url;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printName() &#123;</div><div class="line">		System.out.println(&quot;Customer name : &quot; + this.name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printURL() &#123;</div><div class="line">		System.out.println(&quot;Customer website : &quot; + this.url);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printThrowException() &#123;</div><div class="line">		throw new IllegalArgumentException();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-之前通知"><a href="#2-之前通知" class="headerlink" title="2. 之前通知"></a>2. 之前通知</h4><h5 id="2-1-创建一个实现MethodBeforeAdvice接口的类，它会在方法执行之前执行"><a href="#2-1-创建一个实现MethodBeforeAdvice接口的类，它会在方法执行之前执行" class="headerlink" title="2.1 创建一个实现MethodBeforeAdvice接口的类，它会在方法执行之前执行"></a>2.1 创建一个实现MethodBeforeAdvice接口的类，它会在方法执行之前执行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">import org.springframework.aop.MethodBeforeAdvice;</div><div class="line"></div><div class="line">public class HijackBeforeMethod implements MethodBeforeAdvice &#123;</div><div class="line">	@Override</div><div class="line">	public void before(Method arg0, Object[] arg1, Object arg2) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;HijackBeforeMethod : Before method hijacked!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-2-Bean配置文件-beans-beforeadvice-xml"><a href="#2-2-Bean配置文件-beans-beforeadvice-xml" class="headerlink" title="2.2 Bean配置文件(beans_beforeadvice.xml)"></a>2.2 Bean配置文件(beans_beforeadvice.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackBeforeMethodBean&quot; class=&quot;com.lidolid.aop.HijackBeforeMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hijackBeforeMethodBean&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个 bean 的 HijackBeforeMethod 类，并命名为“customerServiceProxy” 作为一个新的代理对象。</p>
<ul>
<li>“target” - 定义想拦截的bean</li>
<li>“interceptorNames” - 定义要应用这个代理/目标对象的类(通知)</li>
</ul>
</blockquote>
<h5 id="2-3-运行"><a href="#2-3-运行" class="headerlink" title="2.3 运行"></a>2.3 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_beforeadvice.xml&quot;);</div><div class="line">				</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：现在得到新的 customerServiceProxy bean，而不是原来的CustomerService bean</p>
</blockquote>
<h5 id="2-4-运行结果"><a href="#2-4-运行结果" class="headerlink" title="2.4 运行结果"></a>2.4 运行结果</h5><p><img src="https://i.imgur.com/wBxlrk1.png" alt=""></p>
<h4 id="3-返回后通知"><a href="#3-返回后通知" class="headerlink" title="3. 返回后通知"></a>3. 返回后通知</h4><h5 id="3-1-创建一个实现AfterReturningAdvice接口的类，它会在方法返回结果之后执行"><a href="#3-1-创建一个实现AfterReturningAdvice接口的类，它会在方法返回结果之后执行" class="headerlink" title="3.1 创建一个实现AfterReturningAdvice接口的类，它会在方法返回结果之后执行"></a>3.1 创建一个实现AfterReturningAdvice接口的类，它会在方法返回结果之后执行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">import org.springframework.aop.AfterReturningAdvice;</div><div class="line"></div><div class="line">public class HijackAfterMethod implements AfterReturningAdvice &#123;</div><div class="line"></div><div class="line">	public HijackAfterMethod() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void afterReturning(Object arg0, Method arg1, Object[] arg2, Object arg3) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;HijackAfterMethod : After method hijacked!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-2-Bean配置文件-beans-afterreturningadvice-xml"><a href="#3-2-Bean配置文件-beans-afterreturningadvice-xml" class="headerlink" title="3.2 Bean配置文件(beans_afterreturningadvice.xml)"></a>3.2 Bean配置文件(beans_afterreturningadvice.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAfterMethodBean&quot; class=&quot;com.lidolid.aop.HijackAfterMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hijackAfterMethodBean&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h5 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_afterreturningadvice.xml&quot;);</div><div class="line">		</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-4-运行结果"><a href="#3-4-运行结果" class="headerlink" title="3.4 运行结果"></a>3.4 运行结果</h5><p><img src="https://i.imgur.com/0hPAdde.png" alt=""></p>
<h4 id="4-抛出后通知"><a href="#4-抛出后通知" class="headerlink" title="4. 抛出后通知"></a>4. 抛出后通知</h4><h5 id="4-1-创建一个实现ThrowsAdvice接口的类"><a href="#4-1-创建一个实现ThrowsAdvice接口的类" class="headerlink" title="4.1 创建一个实现ThrowsAdvice接口的类"></a>4.1 创建一个实现ThrowsAdvice接口的类</h5><p>&emsp;&emsp;它将在执行方法抛出一个异常后。创建一个实现ThrowsAdvice接口的类，并创建一个afterThrowing方法拦截抛出：IllegalArgumentException异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import org.springframework.aop.ThrowsAdvice;</div><div class="line"></div><div class="line">public class HijackThrowException implements ThrowsAdvice &#123;</div><div class="line"></div><div class="line">	public HijackThrowException() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void afterThrowing(IllegalArgumentException e) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;HijackThrowException : Throw exception hijacked!&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="4-2-Bean配置文件-beans-thorowsadvice-xml"><a href="#4-2-Bean配置文件-beans-thorowsadvice-xml" class="headerlink" title="4.2 Bean配置文件(beans_thorowsadvice.xml)"></a>4.2 Bean配置文件(beans_thorowsadvice.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackThrowExceptionBean&quot; class=&quot;com.lidolid.aop.HijackThrowException&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hijackThrowExceptionBean&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h5 id="4-3-运行"><a href="#4-3-运行" class="headerlink" title="4.3 运行"></a>4.3 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		/*ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_beforeadvice.xml&quot;);*/</div><div class="line">		/*ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_afterreturningadvice.xml&quot;);*/</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_thorowsadvice.xml&quot;);</div><div class="line">		/*ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_methodinterceptor.xml&quot;);*/</div><div class="line">		</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-4-执行结果："><a href="#4-4-执行结果：" class="headerlink" title="4.4 执行结果："></a>4.4 执行结果：</h5><p><img src="https://i.imgur.com/VacnNSi.png" alt=""></p>
<h4 id="5-环绕通知"><a href="#5-环绕通知" class="headerlink" title="5. 环绕通知"></a>5. 环绕通知</h4><h5 id="5-1-创建一个实现MethodInterceptor接口的类"><a href="#5-1-创建一个实现MethodInterceptor接口的类" class="headerlink" title="5.1 创建一个实现MethodInterceptor接口的类"></a>5.1 创建一个实现MethodInterceptor接口的类</h5><p>&emsp;&emsp;它结合了上面的三个通知，在方法执行过程中执行。创建一个实现了MethodInterceptor接口的类。必须调用”methodInvocation.proceed()”继续在原来的方法执行，否则原来的方法将不会执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">import org.aopalliance.intercept.MethodInterceptor;</div><div class="line">import org.aopalliance.intercept.MethodInvocation;</div><div class="line"></div><div class="line">public class HijackAroundMethod implements MethodInterceptor &#123;</div><div class="line"></div><div class="line">	public HijackAroundMethod() &#123;</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;Method name : &quot; + methodInvocation.getMethod().getName());</div><div class="line">		System.out.println(&quot;Method arguments : &quot; + Arrays.toString(methodInvocation.getArguments()));</div><div class="line"></div><div class="line">		// same with MethodBeforeAdvice</div><div class="line">		System.out.println(&quot;HijackAroundMethod : Before method hijacked!&quot;);</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			// proceed to original method call</div><div class="line">			Object result = methodInvocation.proceed();</div><div class="line"></div><div class="line">			// same with AfterReturningAdvice</div><div class="line">			System.out.println(&quot;HijackAroundMethod : Before after hijacked!&quot;);</div><div class="line"></div><div class="line">			return result;</div><div class="line"></div><div class="line">		&#125; catch (IllegalArgumentException e) &#123;</div><div class="line">			// same with ThrowsAdvice</div><div class="line">			System.out.println(&quot;HijackAroundMethod : Throw exception hijacked!&quot;);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="5-2-Bean配置文件-beans-methodinterceptor-xml"><a href="#5-2-Bean配置文件-beans-methodinterceptor-xml" class="headerlink" title="5.2 Bean配置文件(beans_methodinterceptor.xml)"></a>5.2 Bean配置文件(beans_methodinterceptor.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; </div><div class="line">                class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hijackAroundMethodBean&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h5 id="5-3-运行"><a href="#5-3-运行" class="headerlink" title="5.3 运行"></a>5.3 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_methodinterceptor.xml&quot;);</div><div class="line">		</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="5-4-运行结果"><a href="#5-4-运行结果" class="headerlink" title="5.4 运行结果"></a>5.4 运行结果</h5><p><img src="https://i.imgur.com/HuREDx9.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-AOP通知&quot;&gt;&lt;a href=&quot;#Spring-AOP通知&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP通知&quot;&gt;&lt;/a&gt;Spring AOP通知&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring AOP(面向方面编程)框架，用于在模块化方面的横切关注点。简单得说，它只是一个拦截器拦截一些过程，例如，当一个方法执行，Spring AOP 可以劫持一个执行的方法，在方法执行之前或之后添加额外的功能。在Spring AOP中，有4种类型通知(advices)的支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通知(Advice)之前 - 该方法执行前运行&lt;/li&gt;
&lt;li&gt;通知(Advice)返回之后 – 运行后，该方法返回一个结果&lt;/li&gt;
&lt;li&gt;通知(Advice)抛出之后 – 运行方法抛出异常后&lt;/li&gt;
&lt;li&gt;环绕通知 – 环绕方法执行运行，结合以上这三个通知&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring 自动扫描组件</title>
    <link href="http://yoursite.com/2017/08/17/Spring_0700_component/"/>
    <id>http://yoursite.com/2017/08/17/Spring_0700_component/</id>
    <published>2017-08-17T05:07:31.000Z</published>
    <updated>2017-09-19T06:21:15.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-自动扫描组件"><a href="#Spring-自动扫描组件" class="headerlink" title="Spring 自动扫描组件"></a>Spring 自动扫描组件</h3><p>&emsp;&emsp;通常情况下，要声明所有的Bean类或组件的XML bean配置文件，这样Spring容器可以检测并注册Bean类或组件。 其实，Spring是能够自动扫描，检测和预定义的项目包并实例化bean的，可以在XML文件中省略繁琐的Bean类声明。<br><a id="more"></a></p>
<h4 id="1-手动声明方式"><a href="#1-手动声明方式" class="headerlink" title="1. 手动声明方式"></a>1. 手动声明方式</h4><p>&emsp;&emsp;手动声明xml配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;customerDAO&quot; ref=&quot;customerDAO&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.CustomerDAO&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-自动扫描组件"><a href="#2-自动扫描组件" class="headerlink" title="2. 自动扫描组件"></a>2. 自动扫描组件</h4><h5 id="2-1-DAO层，添加-Component，表明这也是一个自动扫描组件。"><a href="#2-1-DAO层，添加-Component，表明这也是一个自动扫描组件。" class="headerlink" title="2.1 DAO层，添加@Component，表明这也是一个自动扫描组件。"></a>2.1 DAO层，添加@Component，表明这也是一个自动扫描组件。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line">@Component</div><div class="line">public class CustomerService </div><div class="line">&#123;</div><div class="line">	@Autowired</div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;CustomerService [customerDAO=&quot; + customerDAO + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-2-注册自动扫描组件"><a href="#2-2-注册自动扫描组件" class="headerlink" title="2.2 注册自动扫描组件"></a>2.2 注册自动扫描组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.customer&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>“context:component”在bean配置文件，意味着，在Spring中启用自动扫描功能。base-package是指明存储组件，Spring将扫描该文件夹，并找出Bean(注解为@Component)并注册到Spring容器。</p>
</blockquote>
<h4 id="3-自定义自动扫描组件名称"><a href="#3-自定义自动扫描组件名称" class="headerlink" title="3. 自定义自动扫描组件名称"></a>3. 自定义自动扫描组件名称</h4><p>&emsp;&emsp;默认情况下，Spring 将小写部件的第一字符,从’CustomerService’到’customerService’。可以检索该组件名称为”CustomerService”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);</div></pre></td></tr></table></figure></p>
<p>要创建组件的自定义名称，可以这样自定义名称：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Service(&quot;AAA&quot;)</div><div class="line">public class CustomerService </div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>现在，可以用’AAA’这个名称进行检索了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)context.getBean(&quot;AAA&quot;);</div></pre></td></tr></table></figure></p>
<h4 id="4-自动扫描组件注释类型"><a href="#4-自动扫描组件注释类型" class="headerlink" title="4. 自动扫描组件注释类型"></a>4. 自动扫描组件注释类型</h4><p>&emsp;&emsp;在Spring2.5中，有4种类型的自动扫描组件注释类型</p>
<ul>
<li>@Component:指示自动扫描组件。</li>
<li>@Repository:表示在持久层DAO组件。</li>
<li>@Service:表示在业务层服务组件。</li>
<li>@Controller:表示在表示层控制器组件。</li>
</ul>
<blockquote>
<p>查看@Component，@Repository，@Service 或 @Controller 源代码可以发现，所有的 @Repository, @Service 或 @Controller 被注解为 @Component。因此，我们可以只使用 @Component 对所有组件进行自动扫描。但为便于阅读，应该始终声明@Repository，@ Service或@Controller在指定的层。</p>
</blockquote>
<h4 id="5-过滤自动扫描组件"><a href="#5-过滤自动扫描组件" class="headerlink" title="5. 过滤自动扫描组件"></a>5. 过滤自动扫描组件</h4><p>&emsp;&emsp;使用过滤自动扫描组件，Spring会”过滤”扫描并注册匹配定义”regex”，即使该类组件的名称未标注@Component。<br>&emsp;&emsp;DAO层：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao;</div><div class="line"></div><div class="line">public class CustomerDAO </div><div class="line">&#123;</div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Hello , This is CustomerDAO&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Service层:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line">public class CustomerService </div><div class="line">&#123;</div><div class="line">	@Autowired</div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;CustomerService [customerDAO=&quot; + customerDAO + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Spring过滤，包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid&quot; &gt;</div><div class="line"></div><div class="line">		&lt;context:include-filter type=&quot;regex&quot; </div><div class="line">                       expression=&quot;com.lidolid.customer.dao.*DAO.*&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;context:include-filter type=&quot;regex&quot; </div><div class="line">                       expression=&quot;com.lidolid.customer.services.*Service.*&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在这个XML过滤中，所有文件的名称中包含DAO或Service(<em>DAO.</em>, <em>Services.</em>)单词将被检测并在 Spring 容器中注册。</p>
</blockquote>
<p>&emsp;&emsp;Spring过滤，不包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;context:component-scan base-package=&quot;com.yiibai&quot; &gt;</div><div class="line">		&lt;context:exclude-filter type=&quot;regex&quot; </div><div class="line">			expression=&quot;com.yiibai.customer.dao.*DAO.*&quot; /&gt;		</div><div class="line">&lt;/context:component-scan&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>不包括那些包含DAO这个词组文件名</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-自动扫描组件&quot;&gt;&lt;a href=&quot;#Spring-自动扫描组件&quot; class=&quot;headerlink&quot; title=&quot;Spring 自动扫描组件&quot;&gt;&lt;/a&gt;Spring 自动扫描组件&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;通常情况下，要声明所有的Bean类或组件的XML bean配置文件，这样Spring容器可以检测并注册Bean类或组件。 其实，Spring是能够自动扫描，检测和预定义的项目包并实例化bean的，可以在XML文件中省略繁琐的Bean类声明。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring EL表达式</title>
    <link href="http://yoursite.com/2017/08/16/Spring_0600_EL/"/>
    <id>http://yoursite.com/2017/08/16/Spring_0600_EL/</id>
    <published>2017-08-16T12:13:52.000Z</published>
    <updated>2017-09-19T05:06:59.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-EL表达式"><a href="#Spring-EL表达式" class="headerlink" title="Spring EL表达式"></a>Spring EL表达式</h3><p>&emsp;&emsp;Spring EL与OGNL和JSF EL相似，计算评估或在bean创建时执行。此外，所有的Spring表达式都可以通过XML或注解。本文简单介绍如何使用Spring EL表达式注入字符串，整数，Bean到属性。<br><a id="more"></a></p>
<h4 id="1-Spring-Beans定义"><a href="#1-Spring-Beans定义" class="headerlink" title="1. Spring Beans定义"></a>1. Spring Beans定义</h4><p>&emsp;&emsp;Item Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">public class Item &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private int qty;</div><div class="line"></div><div class="line">	public Item() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getQty() &#123;</div><div class="line">		return qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setQty(int qty) &#123;</div><div class="line">		this.qty = qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Item [name=&quot; + name + &quot;, qty=&quot; + qty + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	private Item item;</div><div class="line">	private String itemName;</div><div class="line"></div><div class="line">	public Item getItem() &#123;</div><div class="line">		return item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItem(Item item) &#123;</div><div class="line">		this.item = item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getItemName() &#123;</div><div class="line">		return itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItemName(String itemName) &#123;</div><div class="line">		this.itemName = itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [item=&quot; + item + &quot;, itemName=&quot; + itemName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-Spring-EL以XML形式"><a href="#2-Spring-EL以XML形式" class="headerlink" title="2. Spring EL以XML形式"></a>2. Spring EL以XML形式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;itemBean&quot; class=&quot;com.lidolid.core.Item&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;itemA&quot; /&gt;</div><div class="line">		&lt;property name=&quot;qty&quot; value=&quot;10&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerBean&quot; class=&quot;com.lidolid.core.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;item&quot; value=&quot;#&#123;itemBean&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;itemName&quot; value=&quot;#&#123;itemBean.name&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>#{itemBean} – 注入“itemBean”到“customerBean”Bean 的“item”属性。</li>
<li>#{itemBean.name} – 注入“itemBean”的“name”属性到 “customerBean” bean的”itemname”属性。</li>
</ul>
</blockquote>
<h4 id="3-Spring-EL以注解形式"><a href="#3-Spring-EL以注解形式" class="headerlink" title="3. Spring EL以注解形式"></a>3. Spring EL以注解形式</h4><p>&emsp;&emsp;Item Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">@Component(&quot;itemBean&quot;)</div><div class="line">public class Item &#123;</div><div class="line"></div><div class="line">	@Value(&quot;itemA&quot;) //inject String directly</div><div class="line">	private String name;</div><div class="line">	@Value(&quot;10&quot;) //inject interger directly</div><div class="line">	private int qty;</div><div class="line">	</div><div class="line">	public Item() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getQty() &#123;</div><div class="line">		return qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setQty(int qty) &#123;</div><div class="line">		this.qty = qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Item [name=&quot; + name + &quot;, qty=&quot; + qty + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">@Component(&quot;customerBean&quot;)</div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;itemBean&#125;&quot;)</div><div class="line">	private Item item;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;itemBean.name&#125;&quot;)</div><div class="line">	private String itemName;</div><div class="line"></div><div class="line">	public Item getItem() &#123;</div><div class="line">		return item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItem(Item item) &#123;</div><div class="line">		this.item = item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getItemName() &#123;</div><div class="line">		return itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItemName(String itemName) &#123;</div><div class="line">		this.itemName = itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [item=&quot; + item + &quot;, itemName=&quot; + itemName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：要在注解使用使用SpEL，必须通过注解自动扫描组件，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.core&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-EL表达式&quot;&gt;&lt;a href=&quot;#Spring-EL表达式&quot; class=&quot;headerlink&quot; title=&quot;Spring EL表达式&quot;&gt;&lt;/a&gt;Spring EL表达式&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring EL与OGNL和JSF EL相似，计算评估或在bean创建时执行。此外，所有的Spring表达式都可以通过XML或注解。本文简单介绍如何使用Spring EL表达式注入字符串，整数，Bean到属性。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="EL" scheme="http://yoursite.com/tags/EL/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean配置继承</title>
    <link href="http://yoursite.com/2017/08/15/Spring_0507_extendsbean/"/>
    <id>http://yoursite.com/2017/08/15/Spring_0507_extendsbean/</id>
    <published>2017-08-15T14:29:51.000Z</published>
    <updated>2017-09-19T04:23:41.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean配置继承"><a href="#Spring-Bean配置继承" class="headerlink" title="Spring Bean配置继承"></a>Spring Bean配置继承</h3><p>&emsp;&emsp;在 Spring，继承是用为支持bean设置一个bean来分享共同的值，属性或配置。一个子bean或继承的bean可以继承其父bean的配置，属性和一些属性。另外，子Bean允许覆盖继承的值。Bean继承可分为以下三类：</p>
<ul>
<li>普通继承：仅在父类中声明class，子类则只需要声明parent，父类Bean和子类Bean均可以实例化</li>
<li>抽象继承：父类中声明class和abstract=true ，子类只需要声明Parent，父类Bean不可以实例化</li>
<li>纯模板继承：父类不声明class，只作为模板出现，用来设置共享属性<a id="more"></a>
</li>
</ul>
<h4 id="1-普通继承"><a href="#1-普通继承" class="headerlink" title="1. 普通继承"></a>1. 普通继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 普通继承 --&gt;</div><div class="line">	&lt;bean id=&quot;BaseCustomerMalaysia&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;country&quot; value=&quot;Malaysia&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; parent=&quot;BaseCustomerMalaysia&quot;&gt;</div><div class="line">		&lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>“BaseCustomerMalaysia”Bean中含有的 country 属性的值，而”CustomerBean”Bean 继承其父(‘BaseCustomerMalaysia’)这个值。<br>‘BaseCustomerMalaysia’ 仍然能够实例化，例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Customer cust = (Customer)context.getBean(&quot;BaseCustomerMalaysia&quot;);</div><div class="line">``` </div><div class="line"></div><div class="line">#### 2. 抽象继承</div><div class="line">&amp;emsp;&amp;emsp;如果要让这个bean作为一个基础模板，不允许别人来实例化它，可以在一个&amp;lt;bean&amp;gt;元素中添加一个“abstract”的属性。</div></pre></td></tr></table></figure>
</blockquote>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util" xsi:schemalocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-2.5.xsd">

<pre><code>&lt;!-- 抽象继承 --&gt;
&lt;bean id=&quot;BaseCustomerMalaysia&quot; class=&quot;com.lidolid.common.Customer&quot; abstract=&quot;true&quot;&gt;
    &lt;property name=&quot;country&quot; value=&quot;Malaysia&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;CustomerBean&quot; parent=&quot;BaseCustomerMalaysia&quot;&gt;
    &lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;
    &lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;
    &lt;!-- 子类bean可覆盖父类 --&gt;
    &lt;property name=&quot;country&quot; value=&quot;China&quot; /&gt;
&lt;/bean&gt;
</code></pre><p></p></beans><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 3. 纯模板继承</div><div class="line">&amp;emsp;&amp;emsp;父bean不需要定义类的属性，很多时候，你可能只需要一个共同的属性共享，可以使用纯模板继承。</div></pre></td></tr></table></figure><p></p>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util" xsi:schemalocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-2.5.xsd">

<pre><code>&lt;!-- 模板继承 --&gt;
&lt;bean id=&quot;BaseCustomerMalaysia&quot; abstract=&quot;true&quot;&gt;
    &lt;property name=&quot;country&quot; value=&quot;Malaysia&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;CustomerBean&quot; parent=&quot;BaseCustomerMalaysia&quot; 
    class=&quot;com.lidolid.common.Customer&quot;&gt;

    &lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;
    &lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;
&lt;/bean&gt;
</code></pre><p></p></beans><br>```<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean配置继承&quot;&gt;&lt;a href=&quot;#Spring-Bean配置继承&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean配置继承&quot;&gt;&lt;/a&gt;Spring Bean配置继承&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在 Spring，继承是用为支持bean设置一个bean来分享共同的值，属性或配置。一个子bean或继承的bean可以继承其父bean的配置，属性和一些属性。另外，子Bean允许覆盖继承的值。Bean继承可分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通继承：仅在父类中声明class，子类则只需要声明parent，父类Bean和子类Bean均可以实例化&lt;/li&gt;
&lt;li&gt;抽象继承：父类中声明class和abstract=true ，子类只需要声明Parent，父类Bean不可以实例化&lt;/li&gt;
&lt;li&gt;纯模板继承：父类不声明class，只作为模板出现，用来设置共享属性
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="继承" scheme="http://yoursite.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer</title>
    <link href="http://yoursite.com/2017/08/14/Spring_0506_PropertyPlaceholderConfigurer/"/>
    <id>http://yoursite.com/2017/08/14/Spring_0506_PropertyPlaceholderConfigurer/</id>
    <published>2017-08-14T12:17:53.000Z</published>
    <updated>2017-09-19T03:21:08.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring使用properties文件注入bean属性值-PropertyPlaceholderConfigurer"><a href="#Spring使用properties文件注入bean属性值-PropertyPlaceholderConfigurer" class="headerlink" title="Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer"></a>Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer</h3><p>&emsp;&emsp;很多时候，大多数Spring开发人员只是把整个部署的详细信息(数据库的详细信息，日志文件的路径)写在XML bean配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerSimpleDAO&quot; class=&quot;com.lidolid.customer.dao.impl.SimpleJdbcCustomerDAO&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/lidolidjava&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;password&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;但是，在企业环境中，部署的细节通常只可以由系统管理员或数据库管理员来’触碰’，他们可能会拒绝直接访问你的bean的配置文件，它们会要求部署配置一个单独的文件，例如，一个简单的性能(properties)文件，仅具有部署细节。本文展示通过PropertyPlaceholderConfigurer使用properties文件注入值到bean。<br><a id="more"></a></p>
<h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p><img src="https://i.imgur.com/AT8PgZs.png" alt=""></p>
<h4 id="2-properties文件"><a href="#2-properties文件" class="headerlink" title="2. properties文件"></a>2. properties文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql://localhost:3306/spring</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=cupdata</div></pre></td></tr></table></figure>
<h4 id="3-bean配置文件"><a href="#3-bean配置文件" class="headerlink" title="3. bean配置文件"></a>3. bean配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean</div><div class="line">		class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;location&quot;&gt;</div><div class="line">			&lt;value&gt;databaspro/database.properties&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意： PropertyPlaceholderConfigurer的location属性是指明properties文件路径，默认根路径为<strong><em>classpath</em></strong><br>值得注入方式为：${jdbc.driverClassName}</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring使用properties文件注入bean属性值-PropertyPlaceholderConfigurer&quot;&gt;&lt;a href=&quot;#Spring使用properties文件注入bean属性值-PropertyPlaceholderConfigurer&quot; class=&quot;headerlink&quot; title=&quot;Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer&quot;&gt;&lt;/a&gt;Spring使用properties文件注入bean属性值 PropertyPlaceholderConfigurer&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;很多时候，大多数Spring开发人员只是把整个部署的详细信息(数据库的详细信息，日志文件的路径)写在XML bean配置文件如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;bean id=&amp;quot;customerDAO&amp;quot; class=&amp;quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;bean id=&amp;quot;customerSimpleDAO&amp;quot; class=&amp;quot;com.lidolid.customer.dao.impl.SimpleJdbcCustomerDAO&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;bean id=&amp;quot;dataSource&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		class=&amp;quot;org.springframework.jdbc.datasource.DriverManagerDataSource&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;com.mysql.jdbc.Driver&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://localhost:3306/lidolidjava&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;password&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;但是，在企业环境中，部署的细节通常只可以由系统管理员或数据库管理员来’触碰’，他们可能会拒绝直接访问你的bean的配置文件，它们会要求部署配置一个单独的文件，例如，一个简单的性能(properties)文件，仅具有部署细节。本文展示通过PropertyPlaceholderConfigurer使用properties文件注入值到bean。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="PropertyPlaceholderConfigurer" scheme="http://yoursite.com/tags/PropertyPlaceholderConfigurer/"/>
    
  </entry>
  
  <entry>
    <title>Spring注入日期到bean属性</title>
    <link href="http://yoursite.com/2017/08/13/Spring_0505_dateinjection/"/>
    <id>http://yoursite.com/2017/08/13/Spring_0505_dateinjection/</id>
    <published>2017-08-13T15:13:35.000Z</published>
    <updated>2017-09-19T03:05:16.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring注入日期到bean属性"><a href="#Spring注入日期到bean属性" class="headerlink" title="Spring注入日期到bean属性"></a>Spring注入日期到bean属性</h3><p>&emsp;&emsp;本文展示如何为bean属性注入一个”日期”。<br><a id="more"></a></p>
<h4 id="1-Customer类定义"><a href="#1-Customer类定义" class="headerlink" title="1. Customer类定义"></a>1. Customer类定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	Date date;</div><div class="line"></div><div class="line">	public Date getDate() &#123;</div><div class="line">		return date;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setDate(Date date) &#123;</div><div class="line">		this.date = date;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [date=&quot; + date + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-bean配置文件，不做日期转换，直接将字符串格式的日期注入"><a href="#2-bean配置文件，不做日期转换，直接将字符串格式的日期注入" class="headerlink" title="2. bean配置文件，不做日期转换，直接将字符串格式的日期注入"></a>2. bean配置文件，不做日期转换，直接将字符串格式的日期注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;date&quot; value=&quot;1994-02-21&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h4 id="3-执行程序"><a href="#3-执行程序" class="headerlink" title="3.执行程序"></a>3.执行程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;SpringBeans.xml&quot;);</div><div class="line"></div><div class="line">		Customer cust = (Customer) context.getBean(&quot;customer&quot;);</div><div class="line">		System.out.println(cust);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：</p>
<blockquote>
<p>Caused by: org.springframework.beans.TypeMismatchException:Failed to convert property value of type [java.lang.String] to required type [java.util.Date] for property ‘date’;<br>nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.String] to required type [java.util.Date] for property ‘date’: no matching editors or conversion strategy found</p>
</blockquote>
<p><em>即无法将字符串格式的日期注入</em></p>
<h4 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h4><p>&emsp;&emsp;在Spring中，可以通过如下注入日期：</p>
<h5 id="4-1-Factory-bean"><a href="#4-1-Factory-bean" class="headerlink" title="4.1 Factory bean"></a>4.1 Factory bean</h5><p>&emsp;&emsp;声明一个dateFormat bean，在”customer”Bean，引用”dateFormat”bean作为一个工厂bean。该工厂方法将调用SimpleDateFormat.parse()自动转换成字符串Date对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dateFormat&quot; class=&quot;java.text.SimpleDateFormat&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;yyyy-MM-dd&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;date&quot;&gt;</div><div class="line">			&lt;bean factory-bean=&quot;dateFormat&quot; factory-method=&quot;parse&quot;&gt;</div><div class="line">				&lt;constructor-arg value=&quot;2015-12-31&quot; /&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring注入日期到bean属性&quot;&gt;&lt;a href=&quot;#Spring注入日期到bean属性&quot; class=&quot;headerlink&quot; title=&quot;Spring注入日期到bean属性&quot;&gt;&lt;/a&gt;Spring注入日期到bean属性&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文展示如何为bean属性注入一个”日期”。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Date" scheme="http://yoursite.com/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>Spring使用FactoryBean注入结合bean</title>
    <link href="http://yoursite.com/2017/08/13/Spring_0504_factorybean/"/>
    <id>http://yoursite.com/2017/08/13/Spring_0504_factorybean/</id>
    <published>2017-08-13T05:51:09.000Z</published>
    <updated>2017-09-19T02:47:40.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring使用FactoryBean注入结合bean"><a href="#Spring使用FactoryBean注入结合bean" class="headerlink" title="Spring使用FactoryBean注入结合bean"></a>Spring使用FactoryBean注入结合bean</h3><p>&emsp;&emsp;Spring也提供FactoryBean实现注入集合bean，主要分为以下三种：</p>
<ul>
<li>ListFactoryBean: 创建一个具体的列表集合类(ArrayList和LinkedList)</li>
<li>SetFactoryBean: 创建一个具体的Set集合(HashSet 和 TreeSet)</li>
<li>MapFactoryBean: 创建一个具体的Map集合类(HashMap和TreeMap)</li>
</ul>
<a id="more"></a>
<h4 id="1-ListFactoryBean"><a href="#1-ListFactoryBean" class="headerlink" title="1. ListFactoryBean"></a>1. ListFactoryBean</h4><p>&emsp;&emsp;Spring bean配置文件 - applicationContext.html 文件的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">    &lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;lists&quot;&gt;</div><div class="line">			&lt;bean class=&quot;org.springframework.beans.factory.config.ListFactoryBean&quot;&gt;</div><div class="line">				&lt;property name=&quot;targetListClass&quot;&gt;</div><div class="line">					&lt;value&gt;java.util.ArrayList&lt;/value&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">				&lt;property name=&quot;sourceList&quot;&gt;</div><div class="line">					&lt;list&gt;</div><div class="line">						&lt;value&gt;one&lt;/value&gt;</div><div class="line">						&lt;value&gt;2&lt;/value&gt;</div><div class="line">						&lt;value&gt;three&lt;/value&gt;</div><div class="line">					&lt;/list&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>另外，还可以使用util模式和<util:list> 来达到同样的目的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;lists&quot;&gt;</div><div class="line">			&lt;util:list list-class=&quot;java.util.ArrayList&quot;&gt;</div><div class="line">				&lt;value&gt;one&lt;/value&gt;</div><div class="line">				&lt;value&gt;2&lt;/value&gt;</div><div class="line">				&lt;value&gt;three&lt;/value&gt;</div><div class="line">			&lt;/util:list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></util:list></p>
<blockquote>
<p>注意：使用util模式时，注意要包含util模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:util=&quot;http://www.springframework.org/schema/util</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-SetFactoryBean"><a href="#1-SetFactoryBean" class="headerlink" title="1. SetFactoryBean"></a>1. SetFactoryBean</h4><p>&emsp;&emsp;Spring的bean配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">    &lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;sets&quot;&gt;</div><div class="line">			&lt;bean class=&quot;org.springframework.beans.factory.config.SetFactoryBean&quot;&gt;</div><div class="line">				&lt;property name=&quot;targetSetClass&quot;&gt;</div><div class="line">					&lt;value&gt;java.util.HashSet&lt;/value&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">				&lt;property name=&quot;sourceSet&quot;&gt;</div><div class="line">					&lt;list&gt;</div><div class="line">						&lt;value&gt;one&lt;/value&gt;</div><div class="line">						&lt;value&gt;2&lt;/value&gt;</div><div class="line">						&lt;value&gt;three&lt;/value&gt;</div><div class="line">					&lt;/list&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>使用util模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;sets&quot;&gt;</div><div class="line">			&lt;util:list list-class=&quot;java.util.ArrayList&quot;&gt;</div><div class="line">				&lt;value&gt;one&lt;/value&gt;</div><div class="line">				&lt;value&gt;2&lt;/value&gt;</div><div class="line">				&lt;value&gt;three&lt;/value&gt;</div><div class="line">			&lt;/util:list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="1-MapFactoryBean"><a href="#1-MapFactoryBean" class="headerlink" title="1. MapFactoryBean"></a>1. MapFactoryBean</h4><p>&emsp;&emsp;Spring 的bean配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">    &lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;maps&quot;&gt;</div><div class="line">			&lt;bean class=&quot;org.springframework.beans.factory.config.MapFactoryBean&quot;&gt;</div><div class="line">				&lt;property name=&quot;targetMapClass&quot;&gt;</div><div class="line">					&lt;value&gt;java.util.HashMap&lt;/value&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">				&lt;property name=&quot;sourceMap&quot;&gt;</div><div class="line">					&lt;map&gt;</div><div class="line">						&lt;entry key=&quot;Key1&quot; value=&quot;one&quot; /&gt;</div><div class="line">						&lt;entry key=&quot;Key2&quot; value=&quot;two&quot; /&gt;</div><div class="line">						&lt;entry key=&quot;Key3&quot; value=&quot;three&quot; /&gt;</div><div class="line">					&lt;/map&gt;</div><div class="line">				&lt;/property&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>使用util模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;maps&quot;&gt;</div><div class="line">			&lt;util:map map-class=&quot;java.util.HashMap&quot;&gt;</div><div class="line">				&lt;entry key=&quot;Key1&quot; value=&quot;1&quot; /&gt;</div><div class="line">				&lt;entry key=&quot;Key2&quot; value=&quot;2&quot; /&gt;</div><div class="line">				&lt;entry key=&quot;Key3&quot; value=&quot;3&quot; /&gt;</div><div class="line">			&lt;/util:map&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring使用FactoryBean注入结合bean&quot;&gt;&lt;a href=&quot;#Spring使用FactoryBean注入结合bean&quot; class=&quot;headerlink&quot; title=&quot;Spring使用FactoryBean注入结合bean&quot;&gt;&lt;/a&gt;Spring使用FactoryBean注入结合bean&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring也提供FactoryBean实现注入集合bean，主要分为以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ListFactoryBean: 创建一个具体的列表集合类(ArrayList和LinkedList)&lt;/li&gt;
&lt;li&gt;SetFactoryBean: 创建一个具体的Set集合(HashSet 和 TreeSet)&lt;/li&gt;
&lt;li&gt;MapFactoryBean: 创建一个具体的Map集合类(HashMap和TreeMap)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="FactoryBean" scheme="http://yoursite.com/tags/FactoryBean/"/>
    
  </entry>
  
  <entry>
    <title>Spring 集合</title>
    <link href="http://yoursite.com/2017/08/12/Spring_0503_collection/"/>
    <id>http://yoursite.com/2017/08/12/Spring_0503_collection/</id>
    <published>2017-08-12T12:49:33.000Z</published>
    <updated>2017-09-19T02:34:42.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-集合"><a href="#Spring-集合" class="headerlink" title="Spring 集合"></a>Spring 集合</h3><p>&emsp;&emsp;Spring支持4个主要的集合类型,本文介绍Spring如何注入值到集合类型(List, Set, Map, and Properties)。</p>
<ul>
<li>List - &lt;list/&gt;</li>
<li>Set  - &lt;Set/&gt;</li>
<li>Map  - &lt;Map/&gt;</li>
<li>Properties - &lt;Props/&gt;</li>
</ul>
<a id="more"></a>
<h4 id="1-Customer类，存在四个集合属性。"><a href="#1-Customer类，存在四个集合属性。" class="headerlink" title="1. Customer类，存在四个集合属性。"></a>1. Customer类，存在四个集合属性。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Properties;</div><div class="line">import java.util.Set;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	private List&lt;Object&gt; lists;</div><div class="line">	private Set&lt;Object&gt; sets;</div><div class="line">	private Map&lt;Object, Object&gt; maps;</div><div class="line">	private Properties pros;</div><div class="line"></div><div class="line">	public Customer() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Object&gt; getLists() &#123;</div><div class="line">		return lists;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setLists(List&lt;Object&gt; lists) &#123;</div><div class="line">		this.lists = lists;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Set&lt;Object&gt; getSets() &#123;</div><div class="line">		return sets;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setSets(Set&lt;Object&gt; sets) &#123;</div><div class="line">		this.sets = sets;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Map&lt;Object, Object&gt; getMaps() &#123;</div><div class="line">		return maps;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMaps(Map&lt;Object, Object&gt; maps) &#123;</div><div class="line">		this.maps = maps;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Properties getPros() &#123;</div><div class="line">		return pros;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPros(Properties pros) &#123;</div><div class="line">		this.pros = pros;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [lists=&quot; + lists + &quot;, sets=&quot; + sets + &quot;, maps=&quot; + maps + &quot;, pros=&quot; + pros + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Person类，存储Person的基础信息。"><a href="#2-Person类，存储Person的基础信息。" class="headerlink" title="2. Person类，存储Person的基础信息。"></a>2. Person类，存储Person的基础信息。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private String address;</div><div class="line">	private int age;</div><div class="line"></div><div class="line">	public Person() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getAddress() &#123;</div><div class="line">		return address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAddress(String address) &#123;</div><div class="line">		this.address = address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [name=&quot; + name + &quot;, address=&quot; + address + &quot;, age=&quot; + age + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-beans-xml-实现集合注入"><a href="#3-beans-xml-实现集合注入" class="headerlink" title="3. beans.xml,实现集合注入"></a>3. beans.xml,实现集合注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">     &lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line"></div><div class="line">		&lt;!-- java.util.List --&gt;</div><div class="line">		&lt;property name=&quot;lists&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;1&lt;/value&gt;</div><div class="line">				&lt;ref bean=&quot;PersonBean&quot; /&gt;</div><div class="line">				&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">					&lt;property name=&quot;name&quot; value=&quot;lidolidList&quot; /&gt;</div><div class="line">					&lt;property name=&quot;address&quot; value=&quot;Hainan Haikou&quot; /&gt;</div><div class="line">					&lt;property name=&quot;age&quot; value=&quot;28&quot; /&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;!-- java.util.Set --&gt;</div><div class="line">		&lt;property name=&quot;sets&quot;&gt;</div><div class="line">			&lt;set&gt;</div><div class="line">				&lt;value&gt;1&lt;/value&gt;</div><div class="line">				&lt;ref bean=&quot;PersonBean&quot; /&gt;</div><div class="line">				&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">					&lt;property name=&quot;name&quot; value=&quot;lidolidSet&quot; /&gt;</div><div class="line">					&lt;property name=&quot;address&quot; value=&quot;Hainan Haikou&quot; /&gt;</div><div class="line">					&lt;property name=&quot;age&quot; value=&quot;28&quot; /&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/set&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;!-- java.util.Map --&gt;</div><div class="line">		&lt;property name=&quot;maps&quot;&gt;</div><div class="line">			&lt;map&gt;</div><div class="line">				&lt;entry key=&quot;Key 1&quot; value=&quot;1&quot; /&gt;</div><div class="line">				&lt;entry key=&quot;Key 2&quot; value-ref=&quot;PersonBean&quot; /&gt;</div><div class="line">				&lt;entry key=&quot;Key 3&quot;&gt;</div><div class="line">					&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">						&lt;property name=&quot;name&quot; value=&quot;lidolidMap&quot; /&gt;</div><div class="line">						&lt;property name=&quot;address&quot; value=&quot;Hainan Haikou&quot; /&gt;</div><div class="line">						&lt;property name=&quot;age&quot; value=&quot;28&quot; /&gt;</div><div class="line">					&lt;/bean&gt;</div><div class="line">				&lt;/entry&gt;</div><div class="line">			&lt;/map&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;!-- java.util.Properties --&gt;</div><div class="line">		&lt;property name=&quot;pros&quot;&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;admin&quot;&gt;admin@lidolid.com&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;support&quot;&gt;support@lidolid.com&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;PersonBean&quot; class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid1&quot; /&gt;</div><div class="line">		&lt;property name=&quot;address&quot; value=&quot;Hainan Haikou 1&quot; /&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;28&quot; /&gt;</div><div class="line">	&lt;/bean&gt;  </div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h4 id="4-调用执行"><a href="#4-调用执行" class="headerlink" title="4. 调用执行"></a>4. 调用执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</div><div class="line"></div><div class="line">		Customer cust = (Customer) context.getBean(&quot;CustomerBean&quot;);</div><div class="line">		System.out.println(cust);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;执行结果:</p>
<blockquote>
<p>九月 19, 2017 10:32:17 上午 org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh<br>信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@2e817b38: startup date [Tue Sep 19 10:32:17 CST 2017]; root of context hierarchy<br>九月 19, 2017 10:32:17 上午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions<br>信息: Loading XML bean definitions from class path resource [beans.xml]</p>
<p>Customer [lists=[1, Person [name=lidolid1, address=Hainan Haikou 1, age=28], Person [name=lidolidList, address=Hainan Haikou, age=28]], sets=[1, Person [name=lidolid1, address=Hainan Haikou 1, age=28], Person [name=lidolidSet, address=Hainan Haikou, age=28]], maps={Key 1=1, Key 2=Person [name=lidolid1, address=Hainan Haikou 1, age=28], Key 3=Person [name=lidolidMap, address=Hainan Haikou, age=28]}, pros={admin=admin@lidolid.com, support=support@lidolid.com}]</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-集合&quot;&gt;&lt;a href=&quot;#Spring-集合&quot; class=&quot;headerlink&quot; title=&quot;Spring 集合&quot;&gt;&lt;/a&gt;Spring 集合&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring支持4个主要的集合类型,本文介绍Spring如何注入值到集合类型(List, Set, Map, and Properties)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List - &amp;lt;list/&amp;gt;&lt;/li&gt;
&lt;li&gt;Set  - &amp;lt;Set/&amp;gt;&lt;/li&gt;
&lt;li&gt;Map  - &amp;lt;Map/&amp;gt;&lt;/li&gt;
&lt;li&gt;Properties - &amp;lt;Props/&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="集合" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean作用域</title>
    <link href="http://yoursite.com/2017/08/12/Spring_0502_beanscope/"/>
    <id>http://yoursite.com/2017/08/12/Spring_0502_beanscope/</id>
    <published>2017-08-12T07:48:41.000Z</published>
    <updated>2017-09-19T02:10:58.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean作用域"><a href="#Spring-Bean作用域" class="headerlink" title="Spring Bean作用域"></a>Spring Bean作用域</h3><p>&emsp;&emsp;在Spring中，bean作用域用于确定哪种类型的 bean 实例应该从Spring容器中返回给调用者。bean支持的5种范围域：</p>
<ul>
<li>单例 - 每个Spring IoC 容器返回一个bean实例</li>
<li>原型 - 当每次请求时返回一个新的bean实例</li>
<li>请求 - 返回每个HTTP请求的一个Bean实例</li>
<li>会话 - 返回每个HTTP会话的一个bean实例</li>
<li>会话 - 返回每个HTTP会话的一个bean实例</li>
</ul>
<a id="more"></a>
<p>&emsp;&emsp;在大多数情况下，可能只处理了 Spring 的核心作用域 - 单例和原型，默认作用域是单例。</p>
<h4 id="1-单例"><a href="#1-单例" class="headerlink" title="1. 单例"></a>1. 单例</h4><p>&emsp;&emsp;如果 bean 配置文件中没有指定 bean 的范围，默认为单例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">     &lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.service.CustomerService&quot;&gt;</div><div class="line">     		&lt;property name=&quot;message&quot; value=&quot;customerServiceA&quot;/&gt;</div><div class="line">     &lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;CustomerService类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.service;</div><div class="line"></div><div class="line">public class CustomerService &#123;</div><div class="line">	</div><div class="line">	String message;</div><div class="line">	public String getMessage() &#123;</div><div class="line">		return message;</div><div class="line">	&#125;</div><div class="line">	public void setMessage(String message) &#123;</div><div class="line">		this.message = message;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;调用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.service.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123; &quot;beans.xml&quot; &#125;);</div><div class="line"></div><div class="line">		CustomerService custA = (CustomerService) context.getBean(&quot;customerService&quot;);</div><div class="line">		custA.setMessage(&quot;Message by scope&quot;);</div><div class="line">		System.out.println(&quot;Message : &quot; + custA.getMessage());</div><div class="line"></div><div class="line">		//retrieve it again</div><div class="line">		CustomerService custB = (CustomerService) context.getBean(&quot;customerService&quot;);</div><div class="line">		System.out.println(&quot;Message : &quot; + custB.getMessage());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;执行结果：<br><img src="https://i.imgur.com/aZEXr5i.png" alt=""></p>
<blockquote>
<p>单例每个Spring IoC 容器返回一个bean实例，所以两次获取的bean值相同</p>
</blockquote>
<h4 id="2-原型"><a href="#2-原型" class="headerlink" title="2. 原型"></a>2. 原型</h4><p>&emsp;&emsp;如果想有一个新的”CustomerService”bean 实例，每次调用它的时候，需要使用原型(prototype)来代替。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">  </div><div class="line">     &lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.service.CustomerService&quot; scope=&quot;prototype&quot;&gt;</div><div class="line">     		&lt;property name=&quot;message&quot; value=&quot;customerServiceA&quot;/&gt;</div><div class="line">     &lt;/bean&gt;</div><div class="line">   </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;执行结果：<br><img src="https://i.imgur.com/EXYcnjF.png" alt=""></p>
<blockquote>
<p>原型每次请求时返回一个新的bean实例，所以第二次返回的bean为xml文件中定义的bean</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean作用域&quot;&gt;&lt;a href=&quot;#Spring-Bean作用域&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean作用域&quot;&gt;&lt;/a&gt;Spring Bean作用域&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring中，bean作用域用于确定哪种类型的 bean 实例应该从Spring容器中返回给调用者。bean支持的5种范围域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例 - 每个Spring IoC 容器返回一个bean实例&lt;/li&gt;
&lt;li&gt;原型 - 当每次请求时返回一个新的bean实例&lt;/li&gt;
&lt;li&gt;请求 - 返回每个HTTP请求的一个Bean实例&lt;/li&gt;
&lt;li&gt;会话 - 返回每个HTTP会话的一个bean实例&lt;/li&gt;
&lt;li&gt;会话 - 返回每个HTTP会话的一个bean实例&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Spring内部bean</title>
    <link href="http://yoursite.com/2017/08/12/Spring_0501_innerbean/"/>
    <id>http://yoursite.com/2017/08/12/Spring_0501_innerbean/</id>
    <published>2017-08-12T05:36:27.000Z</published>
    <updated>2017-09-19T01:45:10.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring内部bean"><a href="#Spring内部bean" class="headerlink" title="Spring内部bean"></a>Spring内部bean</h3><p>&emsp;&emsp;在Spring框架中，一个bean仅用于一个特定的属性，建议声明为一个内部bean。内部bean支持setter注入”property”和构造器注入”constructor-arg”。<br><a id="more"></a></p>
<h4 id="1-Spring不使用内部bean注入"><a href="#1-Spring不使用内部bean注入" class="headerlink" title="1. Spring不使用内部bean注入"></a>1. Spring不使用内部bean注入</h4><p>&emsp;&emsp;使用”ref”属性来引用”Person”bean到”Customer”Bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;person&quot; ref=&quot;PersonBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;PersonBean&quot; class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">		&lt;property name=&quot;address&quot; value=&quot;address1&quot; /&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;18&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-Spring内部bean使用property注入"><a href="#2-Spring内部bean使用property注入" class="headerlink" title="2. Spring内部bean使用property注入"></a>2. Spring内部bean使用property注入</h4><p>&emsp;&emsp;由于”lidolid”person bean 只用于Customer bean，这是更好地声明”lidolid” person作为一个内部 bean，通过property注入的方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;person&quot;&gt;</div><div class="line">			&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">				&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">				&lt;property name=&quot;address&quot; value=&quot;address1&quot; /&gt;</div><div class="line">				&lt;property name=&quot;age&quot; value=&quot;18&quot; /&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="3-Spring内部bean使用constructor-arg注入"><a href="#3-Spring内部bean使用constructor-arg注入" class="headerlink" title="3. Spring内部bean使用constructor-arg注入"></a>3. Spring内部bean使用constructor-arg注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;constructor-arg&gt;</div><div class="line">			&lt;bean class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">				&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">				&lt;property name=&quot;address&quot; value=&quot;address1&quot; /&gt;</div><div class="line">				&lt;property name=&quot;age&quot; value=&quot;18&quot; /&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring内部bean&quot;&gt;&lt;a href=&quot;#Spring内部bean&quot; class=&quot;headerlink&quot; title=&quot;Spring内部bean&quot;&gt;&lt;/a&gt;Spring内部bean&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring框架中，一个bean仅用于一个特定的属性，建议声明为一个内部bean。内部bean支持setter注入”property”和构造器注入”constructor-arg”。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="bean" scheme="http://yoursite.com/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean基础</title>
    <link href="http://yoursite.com/2017/08/11/Spring_0500_javabean/"/>
    <id>http://yoursite.com/2017/08/11/Spring_0500_javabean/</id>
    <published>2017-08-11T12:17:54.000Z</published>
    <updated>2017-09-19T01:21:39.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean基础"><a href="#Spring-Bean基础" class="headerlink" title="Spring Bean基础"></a>Spring Bean基础</h3><p>&emsp;&emsp;本文简单介绍一下Bean引用，Bean property注入方式和配置文件加载方式。<br><a id="more"></a></p>
<h4 id="1-Spring-Bean引用"><a href="#1-Spring-Bean引用" class="headerlink" title="1. Spring Bean引用"></a>1. Spring Bean引用</h4><p>&emsp;&emsp;在Spring，bean可以”访问”对方，通过bean配置文件指定相同或不同的引用。</p>
<h5 id="1-1-Bean在不同的XML文件"><a href="#1-1-Bean在不同的XML文件" class="headerlink" title="1.1 Bean在不同的XML文件"></a>1.1 Bean在不同的XML文件</h5><p>&emsp;&emsp;如果是在不同XML文件中的bean，可以用一个”ref”标签，”bean”属性引用它<br>File : Spring-Common.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;OutputHelper&quot; class=&quot;com.lidolid.output.OutputHelper&quot;&gt;</div><div class="line">		&lt;property name=&quot;outputGenerator&quot; &gt;</div><div class="line">			&lt;ref bean=&quot;CsvOutputGenerator&quot;/&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>File : Spring-Output.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CsvOutputGenerator&quot; class=&quot;com.yiibai.output.impl.CsvOutputGenerator&quot; /&gt;</div><div class="line">	&lt;bean id=&quot;JsonOutputGenerator&quot; class=&quot;com.yiibai.output.impl.JsonOutputGenerator&quot; /&gt;		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="1-2-Bean在同一个XML文件中的Bean"><a href="#1-2-Bean在同一个XML文件中的Bean" class="headerlink" title="1.2 Bean在同一个XML文件中的Bean"></a>1.2 Bean在同一个XML文件中的Bean</h5><p>&emsp;&emsp;如果引用在同一个XML文件中的bean，可以用”ref”标签，”local”属性引用它。<br>File : Spring-Common.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;OutputHelper&quot; class=&quot;com.yiibai.output.OutputHelper&quot;&gt;</div><div class="line">		&lt;property name=&quot;outputGenerator&quot; &gt;</div><div class="line">			&lt;ref local=&quot;CsvOutputGenerator&quot;/&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;CsvOutputGenerator&quot; class=&quot;com.lidolid.output.impl.CsvOutputGenerator&quot; /&gt;</div><div class="line">	&lt;bean id=&quot;JsonOutputGenerator&quot; class=&quot;com.lidolid.output.impl.JsonOutputGenerator&quot; /&gt;		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>其实，无论是在相同或不同的XML文件，”ref”标签可以访问一个bean，但是，对于该项目的可读性，如果引用了相同的 XML文件中声明 bean，建议应该使用”local”属性。</p>
</blockquote>
<h4 id="1-注入值到Spring-bean属性"><a href="#1-注入值到Spring-bean属性" class="headerlink" title="1. 注入值到Spring bean属性"></a>1. 注入值到Spring bean属性</h4><p>&emsp;&emsp;在Spring中，有三种方式注入值到 bean 属性:</p>
<ul>
<li>正常的方式</li>
<li>快捷方式</li>
<li>“p”模式</li>
</ul>
<h5 id="2-1-正常方式"><a href="#2-1-正常方式" class="headerlink" title="2.1 正常方式"></a>2.1 正常方式</h5><p>&emsp;&emsp;在一个”value”标签注入值，并附有”property”标签结束。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot;&gt;</div><div class="line">			&lt;value&gt;lidolid&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;type&quot;&gt;</div><div class="line">			&lt;value&gt;txt&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="2-2-快捷方式"><a href="#2-2-快捷方式" class="headerlink" title="2.2 快捷方式"></a>2.2 快捷方式</h5><p>&emsp;&emsp;注入值”value”属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;txt&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="2-3-“P”模式"><a href="#2-3-“P”模式" class="headerlink" title="2.3 “P”模式"></a>2.3 “P”模式</h5><p>&emsp;&emsp;通过使用”p”模式作为注入值到一个属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot; </div><div class="line">             p:name=&quot;lidolid&quot; p:type=&quot;txt&quot; /&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用”p”模式注入bean属性值时，要声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">声明 xmlns:p=”http://www.springframework.org/schema/p&quot;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="3-Spring-bean加载多个配置文件"><a href="#3-Spring-bean加载多个配置文件" class="headerlink" title="3. Spring bean加载多个配置文件"></a>3. Spring bean加载多个配置文件</h4><p>&emsp;&emsp;在一个大的项目结构，Spring bean配置文件位于不同的文件夹以便于维护和模块化。例如，Spring-Common.xml在common 文件夹中，Spring-Connection.xml 在connection文件夹，Spring-ModuleA.xml在ModuleA 文件夹等等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;common/Spring-Common.xml&quot;/&gt;</div><div class="line">        &lt;import resource=&quot;connection/Spring-Connection.xml&quot;/&gt;</div><div class="line">        &lt;import resource=&quot;moduleA/Spring-ModuleA.xml&quot;/&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean基础&quot;&gt;&lt;a href=&quot;#Spring-Bean基础&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean基础&quot;&gt;&lt;/a&gt;Spring Bean基础&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文简单介绍一下Bean引用，Bean property注入方式和配置文件加载方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="bean" scheme="http://yoursite.com/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring JavaConfig配置</title>
    <link href="http://yoursite.com/2017/08/10/Spring_0400_javaconfig/"/>
    <id>http://yoursite.com/2017/08/10/Spring_0400_javaconfig/</id>
    <published>2017-08-10T15:03:51.000Z</published>
    <updated>2017-09-19T04:44:10.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-JavaConfig配置"><a href="#Spring-JavaConfig配置" class="headerlink" title="Spring JavaConfig配置"></a>Spring JavaConfig配置</h3><p>&emsp;&emsp;从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bean定义在Spring配置XML文件或Java类中。<br>但是，仍然允许使用经典的XML方式来定义bean和配置，JavaConfig是另一种替代解决方案。<br><a id="more"></a><br>&emsp;&emsp;如下定义在Spring容器中的bean：<br>Spring XML file - applicationContext.xml :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</div><div class="line"> </div><div class="line">	&lt;bean id=&quot;helloBean&quot; class=&quot;com.lidolid.hello.impl.HelloWorldImpl&quot;&gt;</div><div class="line">		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;如下为等效的JavaConfig的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import com.yiibai.hello.HelloWorld;</div><div class="line">import com.yiibai.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class AppConfig &#123;</div><div class="line">	</div><div class="line">    @Bean(name=&quot;helloBean&quot;)</div><div class="line">    public HelloWorld helloWorld() &#123;</div><div class="line">        return new HelloWorldImpl();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="JavaConfig示例"><a href="#JavaConfig示例" class="headerlink" title="JavaConfig示例"></a>JavaConfig示例</h4><p>&emsp;&emsp;展示如何使用JavaConfig代替XML定义bean，使用properties文件注入bean的property内容。</p>
<h5 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h5><p><img src="https://i.imgur.com/z6zlZex.png" alt=""></p>
<h5 id="2-代码说明"><a href="#2-代码说明" class="headerlink" title="2. 代码说明"></a>2. 代码说明</h5><p>&emsp;&emsp;接口HelloWorld：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.hello;</div><div class="line"></div><div class="line">public interface HelloWorld &#123;</div><div class="line">	void printHelloWorld(String msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;HelloWorld接口实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.hello.impl;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line"></div><div class="line">public class HelloWorldImpl implements HelloWorld &#123;</div><div class="line">	@Value(&quot;$&#123;app.implName&#125;&quot;)</div><div class="line">	private String implName;</div><div class="line"></div><div class="line">	@Value(&quot;$&#123;app.helloName&#125;&quot;)</div><div class="line">	private String helloName;</div><div class="line"></div><div class="line">	public String getImplName() &#123;</div><div class="line">		return implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setImplName(String implName) &#123;</div><div class="line">		this.implName = implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getHelloName() &#123;</div><div class="line">		return helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHelloName(String helloName) &#123;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl(String implName, String helloName) &#123;</div><div class="line">		super();</div><div class="line">		this.implName = implName;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;HelloWorldImpl [implName=&quot; + implName + &quot;, helloName=&quot; + helloName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void printHelloWorld(String msg) &#123;</div><div class="line">		System.out.println(msg + &quot; &quot; + implName + &quot; &quot; + helloName);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl() &#123;</div><div class="line">		super();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>说明：要给property注入值，相当于xml bean定义的property属性。可以直接指定@value(“property_name”)，但是基于spring松耦合的考虑，使用properties文件注入的方式更符合松耦合的思想。</p>
</blockquote>
<p>&emsp;&emsp;新增bean配置类AppConfig：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.ComponentScan;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.PropertySource;</div><div class="line">import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line">import com.lidolid.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">@ComponentScan</div><div class="line">@PropertySource(&quot;properties/cons.properties&quot;)</div><div class="line">public class AppConfig &#123;</div><div class="line">	</div><div class="line">	@Bean</div><div class="line">	public static PropertySourcesPlaceholderConfigurer placeholderConfigurer() &#123;</div><div class="line">		return new PropertySourcesPlaceholderConfigurer();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    @Bean(name=&quot;helloBean&quot;)</div><div class="line">    public HelloWorld helloWorld() &#123;</div><div class="line">        return new HelloWorldImpl();</div><div class="line">    &#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：由于property值注入使用了@Value(“${app.implName}”) 这种占位符的方式，必须要配置一个PropertyPlaceholderConfigurer bean或PropertySourcesPlaceholderConfigurer bean。从Spring 3.1开始，推荐使PropertySourcesPlaceholderConfigurer，因为它能够基于Spring Environment及其属性源来解析占位符。即上述代码中的定义。<br>@PropertySource(“properties/cons.properties”)用来指明用于注入的properties文件的路径</p>
</blockquote>
<p>&emsp;&emsp;cons.properties文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.implName=chenhao</div><div class="line">app.helloName=nihao</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;调用测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.config.AppConfig;</div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);</div><div class="line">		HelloWorld obj = (HelloWorld) context.getBean(&quot;helloBean&quot;);</div><div class="line"></div><div class="line">		obj.printHelloWorld(&quot;Spring Java Config&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-运行结果"><a href="#3-运行结果" class="headerlink" title="3. 运行结果"></a>3. 运行结果</h5><p><img src="https://i.imgur.com/OxytFN0.png" alt=""></p>
<blockquote>
<p>properties文件定义的内容已经注入</p>
</blockquote>
<h4 id="多个bean配置类合并问题"><a href="#多个bean配置类合并问题" class="headerlink" title="多个bean配置类合并问题"></a>多个bean配置类合并问题</h4><p>&emsp;&emsp;在xml定义中，便于开发与管理，可定义多个xml文件，最终使用import标签合并到一个xml文件中，最终在使用时即可通过一个bean文件获取所有定义的bean。在JavaConfig中也有相似的功能，合并多个bean配置类。<br>xml方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;database/Spring-Datasource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;customer/Spring-Customer.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>JavaConfig方式：<br>SchedulerConfig配置类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">import com.lidolid.core.SchedulerBo;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class SchedulerConfig &#123;</div><div class="line"></div><div class="line">	@Bean(name=&quot;scheduler&quot;)</div><div class="line">	public SchedulerBo suchedulerBo()&#123;		</div><div class="line">		return new SchedulerBo();		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CustomerConfig配置类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">import com.lidolid.core.CustomerBo;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class CustomerConfig &#123;</div><div class="line"></div><div class="line">	@Bean(name = &quot;customer&quot;)</div><div class="line">	public CustomerBo customerBo() &#123;</div><div class="line">		return new CustomerBo();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置类的合并Appconfig：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">@Import(&#123; CustomerConfig.class, SchedulerConfig.class &#125;)</div><div class="line">public class AppConfig &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-JavaConfig不使用AppConfig配置类的实现"><a href="#4-JavaConfig不使用AppConfig配置类的实现" class="headerlink" title="4. JavaConfig不使用AppConfig配置类的实现"></a>4. JavaConfig不使用AppConfig配置类的实现</h4><p>&emsp;&emsp;上述实现使用了一个配置类，也可以不使用，直接在类上定义，如下：</p>
<h5 id="4-1-HelloWorldImpl类"><a href="#4-1-HelloWorldImpl类" class="headerlink" title="4.1 HelloWorldImpl类"></a>4.1 HelloWorldImpl类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.hello.impl;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.PropertySource;</div><div class="line">import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line"></div><div class="line">@Configuration(&quot;helloBean&quot;)</div><div class="line">@PropertySource(&quot;properties/cons.properties&quot;)</div><div class="line">public class HelloWorldImpl implements HelloWorld &#123;</div><div class="line">	</div><div class="line">	@Bean</div><div class="line">	public static PropertySourcesPlaceholderConfigurer placeholderConfigurer() &#123;</div><div class="line">		return new PropertySourcesPlaceholderConfigurer();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Value(&quot;$&#123;app.implName&#125;&quot;)</div><div class="line">	private String implName;</div><div class="line"></div><div class="line">	@Value(&quot;$&#123;app.helloName&#125;&quot;)</div><div class="line">	private String helloName;</div><div class="line"></div><div class="line">	public String getImplName() &#123;</div><div class="line">		return implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setImplName(String implName) &#123;</div><div class="line">		this.implName = implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getHelloName() &#123;</div><div class="line">		return helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHelloName(String helloName) &#123;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl(String implName, String helloName) &#123;</div><div class="line">		super();</div><div class="line">		this.implName = implName;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;HelloWorldImpl [implName=&quot; + implName + &quot;, helloName=&quot; + helloName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void printHelloWorld(String msg) &#123;</div><div class="line">		System.out.println(msg + &quot; &quot; + implName + &quot; &quot; + helloName);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl() &#123;</div><div class="line">		super();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-2-调用代码"><a href="#4-2-调用代码" class="headerlink" title="4.2 调用代码"></a>4.2 调用代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line">import com.lidolid.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldImpl.class);</div><div class="line">		HelloWorld obj = (HelloWorld) context.getBean(&quot;helloBean&quot;);</div><div class="line"></div><div class="line">		obj.printHelloWorld(&quot;Spring Java Config&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>同样可以最终配置一个AppConfig配置类，将所有的Bean包含到一个类中，最后在调用时只是使用那个配置类</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-JavaConfig配置&quot;&gt;&lt;a href=&quot;#Spring-JavaConfig配置&quot; class=&quot;headerlink&quot; title=&quot;Spring JavaConfig配置&quot;&gt;&lt;/a&gt;Spring JavaConfig配置&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bean定义在Spring配置XML文件或Java类中。&lt;br&gt;但是，仍然允许使用经典的XML方式来定义bean和配置，JavaConfig是另一种替代解决方案。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="JavaConfig" scheme="http://yoursite.com/tags/JavaConfig/"/>
    
  </entry>
  
  <entry>
    <title>Spring 使用@Autowired注解自动装配</title>
    <link href="http://yoursite.com/2017/08/10/Spring_0301_@autowired/"/>
    <id>http://yoursite.com/2017/08/10/Spring_0301_@autowired/</id>
    <published>2017-08-09T16:16:59.000Z</published>
    <updated>2017-09-18T07:32:15.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-使用-Autowired注解自动装配"><a href="#Spring-使用-Autowired注解自动装配" class="headerlink" title="Spring 使用@Autowired注解自动装配"></a>Spring 使用@Autowired注解自动装配</h3><p>&emsp;&emsp;在Spring中，可以使用 @Autowired 注解通过setter方法，构造函数或字段自动装配Bean,@Autowired注解是通过匹配数据类型自动装配Bean的。<br><a id="more"></a></p>
<p>&emsp;&emsp;Person基类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String name;</div><div class="line">	private String address;</div><div class="line">	private int age;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getAddress() &#123;</div><div class="line">		return address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAddress(String address) &#123;</div><div class="line">		this.address = address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer实体类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line">	</div><div class="line">	private Person person;</div><div class="line">	private int type;</div><div class="line">	private String action;</div><div class="line"></div><div class="line">	public Person getPerson() &#123;</div><div class="line">		return person;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void setPerson(Person person) &#123;</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getType() &#123;</div><div class="line">		return type;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setType(int type) &#123;</div><div class="line">		this.type = type;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getAction() &#123;</div><div class="line">		return action;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAction(String action) &#123;</div><div class="line">		this.action = action;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	public Customer(Person person) &#123;</div><div class="line">		super();</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [person=&quot; + person + &quot;, type=&quot; + type + &quot;, action=&quot; + action + &quot;]&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;applicationContext.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 使用@Autowire注解时bean配置的两种方式如下： --&gt;</div><div class="line">	&lt;!-- &lt;context:annotation-config /&gt; --&gt;</div><div class="line">	&lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;PersonBean&quot; class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">		&lt;property name=&quot;address&quot; value=&quot;address ABC&quot; /&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;29&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：使用@Autowired注解自动装配时，要启用@Autowired，必须注册”AutowiredAnnotationBeanPostProcessor”，可以使用如下两种方式注册：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;context:annotation-config /&gt;</div><div class="line">或者</div><div class="line">&lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>调用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123; &quot;applicationContext.xml&quot; &#125;);</div><div class="line"></div><div class="line">		Customer cust = (Customer) context.getBean(&quot;CustomerBean&quot;);</div><div class="line">		System.out.println(cust);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/KeMZvw6.png" alt=""></p>
<blockquote>
<p>注意点，由于@AutoWired是使用byType自动装配的，加入applicationContext中存在两个相同类型的bean，容器将无法自动按类型装配。@Autowired提供了一种解决方案，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line">	&lt;!-- &lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt; --&gt;</div><div class="line">	&lt;context:annotation-config /&gt;	</div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; &gt;</div><div class="line">		&lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;</div><div class="line">	&lt;/bean&gt;		</div><div class="line">	&lt;bean id=&quot;personA&quot; class=&quot;com.lidolid.common.Person&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolidA&quot; /&gt;</div><div class="line">	&lt;/bean&gt;	</div><div class="line">	&lt;bean id=&quot;personB&quot; class=&quot;com.lidolid.common.Person&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolidB&quot; /&gt;</div><div class="line">	&lt;/bean&gt;	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.beans.factory.annotation.Qualifier;</div><div class="line">public class Customer &#123;</div><div class="line">	@Autowired</div><div class="line">	@Qualifier(&quot;personB&quot;)</div><div class="line">	private Person person;</div><div class="line">	private int type;</div><div class="line">	private String action;</div><div class="line">	public Person getPerson() &#123;</div><div class="line">		return person;</div><div class="line">	&#125;</div><div class="line">	public void setPerson(Person person) &#123;</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line">	public int getType() &#123;</div><div class="line">		return type;</div><div class="line">	&#125;</div><div class="line">	public void setType(int type) &#123;</div><div class="line">		this.type = type;</div><div class="line">	&#125;</div><div class="line">	public String getAction() &#123;</div><div class="line">		return action;</div><div class="line">	&#125;</div><div class="line">	public void setAction(String action) &#123;</div><div class="line">		this.action = action;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [person=&quot; + person + &quot;, type=&quot; + type + &quot;, action=&quot;</div><div class="line">				+ action + &quot;]&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-使用-Autowired注解自动装配&quot;&gt;&lt;a href=&quot;#Spring-使用-Autowired注解自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring 使用@Autowired注解自动装配&quot;&gt;&lt;/a&gt;Spring 使用@Autowired注解自动装配&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring中，可以使用 @Autowired 注解通过setter方法，构造函数或字段自动装配Bean,@Autowired注解是通过匹配数据类型自动装配Bean的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="自动装配" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean自动装配</title>
    <link href="http://yoursite.com/2017/08/08/Spring_0300_autowiredd/"/>
    <id>http://yoursite.com/2017/08/08/Spring_0300_autowiredd/</id>
    <published>2017-08-08T15:39:47.000Z</published>
    <updated>2017-09-18T07:50:27.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean自动装配"><a href="#Spring-Bean自动装配" class="headerlink" title="Spring Bean自动装配"></a>Spring Bean自动装配</h3><p>&emsp;&emsp;在Spring框架，可以用 auto-wiring 功能会自动装配Bean。要启用它，只需要在 <bean>定义“autowire”属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; autowire=&quot;byName&quot; /&gt;</div></pre></td></tr></table></figure></bean></p>
<p>&emsp;&emsp;在Spring中，支持 5 自动装配模式。</p>
<ul>
<li>no – 缺省情况下，自动配置是通过”ref”属性手动设定</li>
<li>byName – 根据属性名称自动装配。如果一个bean的名称和其他bean属性的名称是一样的，将会自装配它。</li>
<li>byType – 按数据类型自动装配。如果一个bean的数据类型是用其它bean属性的数据类型，兼容并自动装配它。</li>
<li>constructor – 在构造函数参数的byType方式。</li>
<li>autodetect – 如果找到默认的构造函数，使用”自动装配用构造”; 否则，使用”按类型自动装配”。</li>
</ul>
<a id="more"></a>
<h4 id="1-byName"><a href="#1-byName" class="headerlink" title="1. byName"></a>1. byName</h4><p>&emsp;&emsp;在Spring中，”按名称自动装配”是指，如果一个bean的名称与其他bean属性的名称是一样的，那么将自动装配它。<br>&emsp;&emsp;例如，如果”customer” bean有一个”address”属性，Spring会在当前容器中找到”address”bean，并自动装配。如果没有匹配找到，那么什么也不做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- customer has a property name &quot;address&quot; --&gt;</div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; autowire=&quot;byName&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;address&quot; class=&quot;com.lidolid.common.Address&quot; &gt;</div><div class="line">		&lt;property name=&quot;fulladdress&quot; value=&quot;YiLong Road, CA 188&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-byType"><a href="#2-byType" class="headerlink" title="2. byType"></a>2. byType</h4><p>&emsp;&emsp;在Spring中，”类型自动装配”的意思是如果一个bean的数据类型与其它bean属性的数据类型相同，将自动兼容装配它。<br>&emsp;&emsp;例如，一个”persion” bean 公开以”ability”类数据类型作为属性，Spring会找到ability类相同的数据类型，并自动装配它的Bean。如果没有匹配找到，它什么也不做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- person has a property type of class &quot;ability&quot; --&gt;</div><div class="line">	&lt;bean id=&quot;person&quot; class=&quot;com.lidolid.common.Person&quot; autowire=&quot;byType&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;bean id=&quot;invisible&quot; class=&quot;com.lidolid.common.Ability&quot; &gt;</div><div class="line">		&lt;property name=&quot;skill&quot; value=&quot;Invisible&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：在上述byType自动装配时，如果容器中存在两个Ability类型对的bean，容器将无法确认从哪个bean装配，将会报错UnsatisfiedDependencyException。</p>
</blockquote>
<h4 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h4><p>&emsp;&emsp;在Spring中，可以使用”通过构造方法自动装配”，实际上是按构造函数的参数类型自动装配。 这意味着，如果一个bean的数据类型与其他bean的构造器参数的数据类型是相同的，那么将自动装配。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;person&quot; class=&quot;com.lidolid.common.Person&quot; autowire=&quot;constructor&quot; /&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;ability&quot; class=&quot;com.lidolid.common.Ability&quot; &gt;</div><div class="line">	&lt;property name=&quot;skill&quot; value=&quot;Invisible&quot; /&gt;</div><div class="line">	&lt;property name=&quot;test&quot; value=&quot;test&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>解释：ability bean的数据类型与person bean的构造器数据类型一致，那么person bean将自动装配</p>
</blockquote>
<h4 id="4-autodetect"><a href="#4-autodetect" class="headerlink" title="4. autodetect"></a>4. autodetect</h4><p>&emsp;&emsp;通过bean类的自省机制（introspection）来决定是使用constructor还是byType方式进行自动装配。如果发现默认的构造器，那么将使用byType方式。<br>KungFu类定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class KungFu &#123;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Language [name=&quot; + name + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Panda类定义，存在默认参数类型为Kungfu的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public Panda(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Panda(String kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>applicationContext.xml定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">   &lt;!-- // by www.yiibai.com --&gt;</div><div class="line">	&lt;bean id=&quot;panda&quot; class=&quot;com.lidolid.common.Panda&quot; autowire=&quot;autodetect&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;bean id=&quot;kungfu&quot; class=&quot;com.lidolid.common.KungFu&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Tai Ji&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>调用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</div><div class="line"></div><div class="line">		Panda panda = (Panda) context.getBean(&quot;panda&quot;);</div><div class="line">		System.out.println(panda);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://i.imgur.com/Md15Ztq.png" alt=""></p>
<blockquote>
<p>Panda类存在参数类型为Kungfu的构造函数，所以此时会通过constructor自动装配。</p>
</blockquote>
<p>修改Panda类，删除参数类型为Kungfu的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public Panda(String kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/Z1dYOjK.png" alt=""></p>
<blockquote>
<p>由于Panda类中存在构造函数，参数类型为String，容器中不存在类型为String的bean，所以报错</p>
</blockquote>
<p>修改Panda类，删除所有构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/MgbPndD.png" alt=""></p>
<blockquote>
<p>不存在构造函数，byType自动装配</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean自动装配&quot;&gt;&lt;a href=&quot;#Spring-Bean自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean自动装配&quot;&gt;&lt;/a&gt;Spring Bean自动装配&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring框架，可以用 auto-wiring 功能会自动装配Bean。要启用它，只需要在 &lt;bean&gt;定义“autowire”属性。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;bean id=&amp;quot;customer&amp;quot; class=&amp;quot;com.lidolid.common.Customer&amp;quot; autowire=&amp;quot;byName&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/bean&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在Spring中，支持 5 自动装配模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no – 缺省情况下，自动配置是通过”ref”属性手动设定&lt;/li&gt;
&lt;li&gt;byName – 根据属性名称自动装配。如果一个bean的名称和其他bean属性的名称是一样的，将会自装配它。&lt;/li&gt;
&lt;li&gt;byType – 按数据类型自动装配。如果一个bean的数据类型是用其它bean属性的数据类型，兼容并自动装配它。&lt;/li&gt;
&lt;li&gt;constructor – 在构造函数参数的byType方式。&lt;/li&gt;
&lt;li&gt;autodetect – 如果找到默认的构造函数，使用”自动装配用构造”; 否则，使用”按类型自动装配”。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="自动装配" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
</feed>
