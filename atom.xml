<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hal的博客</title>
  <subtitle>愿你走出半生，仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-18T16:50:51.392Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Bean基础</title>
    <link href="http://yoursite.com/2017/08/11/Spring_0500_javabean/"/>
    <id>http://yoursite.com/2017/08/11/Spring_0500_javabean/</id>
    <published>2017-08-11T12:17:54.000Z</published>
    <updated>2017-09-18T16:50:51.392Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean基础"><a href="#Spring-Bean基础" class="headerlink" title="Spring Bean基础"></a>Spring Bean基础</h3><p>&emsp;&emsp;本文简单介绍一下Bean引用，Bean property注入方式和配置文件加载方式。<br><a id="more"></a></p>
<h4 id="1-Spring-Bean引用"><a href="#1-Spring-Bean引用" class="headerlink" title="1. Spring Bean引用"></a>1. Spring Bean引用</h4><p>&emsp;&emsp;在Spring，bean可以”访问”对方通过bean配置文件指定相同或不同的引用。</p>
<h5 id="1-1-Bean在不同的XML文件"><a href="#1-1-Bean在不同的XML文件" class="headerlink" title="1.1 Bean在不同的XML文件"></a>1.1 Bean在不同的XML文件</h5><p>&emsp;&emsp;如果是在不同XML文件中的bean，可以用一个”ref”标签，”bean”属性引用它<br>File : Spring-Common.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;OutputHelper&quot; class=&quot;com.lidolid.output.OutputHelper&quot;&gt;</div><div class="line">		&lt;property name=&quot;outputGenerator&quot; &gt;</div><div class="line">			&lt;ref bean=&quot;CsvOutputGenerator&quot;/&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>File : Spring-Output.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;CsvOutputGenerator&quot; class=&quot;com.yiibai.output.impl.CsvOutputGenerator&quot; /&gt;</div><div class="line">	&lt;bean id=&quot;JsonOutputGenerator&quot; class=&quot;com.yiibai.output.impl.JsonOutputGenerator&quot; /&gt;		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="1-2-Bean在同一个XML文件中的Bean"><a href="#1-2-Bean在同一个XML文件中的Bean" class="headerlink" title="1.2 Bean在同一个XML文件中的Bean"></a>1.2 Bean在同一个XML文件中的Bean</h5><p>&emsp;&emsp;如果引用在同一个XML文件中的bean，可以用”ref”标签，”local”属性引用它。<br>File : Spring-Common.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;OutputHelper&quot; class=&quot;com.yiibai.output.OutputHelper&quot;&gt;</div><div class="line">		&lt;property name=&quot;outputGenerator&quot; &gt;</div><div class="line">			&lt;ref local=&quot;CsvOutputGenerator&quot;/&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;CsvOutputGenerator&quot; class=&quot;com.lidolid.output.impl.CsvOutputGenerator&quot; /&gt;</div><div class="line">	&lt;bean id=&quot;JsonOutputGenerator&quot; class=&quot;com.lidolid.output.impl.JsonOutputGenerator&quot; /&gt;		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>其实，无论是在相同或不同的XML文件，”ref”标签可以访问一个bean，但是，对于该项目的可读性，如果引用了相同的 XML文件中声明 bean，建议应该使用”local”属性。</p>
</blockquote>
<h4 id="1-注入值到Spring-bean属性"><a href="#1-注入值到Spring-bean属性" class="headerlink" title="1. 注入值到Spring bean属性"></a>1. 注入值到Spring bean属性</h4><p>&emsp;&emsp;在Spring中，有三种方式注入值到 bean 属性:</p>
<ul>
<li>正常的方式</li>
<li>快捷方式</li>
<li>“p”模式</li>
</ul>
<h5 id="2-1-正常方式"><a href="#2-1-正常方式" class="headerlink" title="2.1 正常方式"></a>2.1 正常方式</h5><p>&emsp;&emsp;在一个”value”标签注入值，并附有”property”标签结束。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot;&gt;</div><div class="line">			&lt;value&gt;lidolid&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;type&quot;&gt;</div><div class="line">			&lt;value&gt;txt&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="2-2-快捷方式"><a href="#2-2-快捷方式" class="headerlink" title="2.2 快捷方式"></a>2.2 快捷方式</h5><p>&emsp;&emsp;注入值”value”属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;txt&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="2-3-“P”模式"><a href="#2-3-“P”模式" class="headerlink" title="2.3 “P”模式"></a>2.3 “P”模式</h5><p>&emsp;&emsp;通过使用”p”模式作为注入值到一个属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;FileNameGenerator&quot; class=&quot;com.lidolid.common.FileNameGenerator&quot; </div><div class="line">             p:name=&quot;lidolid&quot; p:type=&quot;txt&quot; /&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用”p”模式注入bean属性值时，要声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">声明 xmlns:p=”http://www.springframework.org/schema/p&quot;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="3-Spring-bean加载多个配置文件"><a href="#3-Spring-bean加载多个配置文件" class="headerlink" title="3. Spring bean加载多个配置文件"></a>3. Spring bean加载多个配置文件</h4><p>&emsp;&emsp;在一个大的项目结构，Spring bean配置文件位于不同的文件夹以便于维护和模块化。例如，Spring-Common.xml在common 文件夹中，Spring-Connection.xml 在connection文件夹，Spring-ModuleA.xml在ModuleA 文件夹等等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;common/Spring-Common.xml&quot;/&gt;</div><div class="line">        &lt;import resource=&quot;connection/Spring-Connection.xml&quot;/&gt;</div><div class="line">        &lt;import resource=&quot;moduleA/Spring-ModuleA.xml&quot;/&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean基础&quot;&gt;&lt;a href=&quot;#Spring-Bean基础&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean基础&quot;&gt;&lt;/a&gt;Spring Bean基础&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文简单介绍一下Bean引用，Bean property注入方式和配置文件加载方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="bean" scheme="http://yoursite.com/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring JavaConfig配置</title>
    <link href="http://yoursite.com/2017/08/10/Spring_0400_javaconfig/"/>
    <id>http://yoursite.com/2017/08/10/Spring_0400_javaconfig/</id>
    <published>2017-08-10T15:03:51.000Z</published>
    <updated>2017-09-18T16:26:23.718Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-JavaConfig配置"><a href="#Spring-JavaConfig配置" class="headerlink" title="Spring JavaConfig配置"></a>Spring JavaConfig配置</h3><p>&emsp;&emsp;从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bean定义在Spring配置XML文件或Java类中。<br>但是，仍然允许使用经典的XML方式来定义bean和配置，JavaConfig是另一种替代解决方案。<br><a id="more"></a><br>&emsp;&emsp;如下定义在Spring容器中的bean：<br>Spring XML file - applicationContext.xml :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</div><div class="line"> </div><div class="line">	&lt;bean id=&quot;helloBean&quot; class=&quot;com.lidolid.hello.impl.HelloWorldImpl&quot;&gt;</div><div class="line">		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;如下为等效的JavaConfig的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import com.yiibai.hello.HelloWorld;</div><div class="line">import com.yiibai.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class AppConfig &#123;</div><div class="line">	</div><div class="line">    @Bean(name=&quot;helloBean&quot;)</div><div class="line">    public HelloWorld helloWorld() &#123;</div><div class="line">        return new HelloWorldImpl();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="JavaConfig示例"><a href="#JavaConfig示例" class="headerlink" title="JavaConfig示例"></a>JavaConfig示例</h4><p>&emsp;&emsp;展示如何使用JavaConfig代替XML定义bean，使用properties文件注入bean的property内容。</p>
<h5 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h5><p><img src="https://i.imgur.com/z6zlZex.png" alt=""></p>
<h5 id="2-代码说明"><a href="#2-代码说明" class="headerlink" title="2. 代码说明"></a>2. 代码说明</h5><p>&emsp;&emsp;接口HelloWorld：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.hello;</div><div class="line"></div><div class="line">public interface HelloWorld &#123;</div><div class="line">	void printHelloWorld(String msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;HelloWorld接口实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.hello.impl;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line"></div><div class="line">public class HelloWorldImpl implements HelloWorld &#123;</div><div class="line">	@Value(&quot;$&#123;app.implName&#125;&quot;)</div><div class="line">	private String implName;</div><div class="line"></div><div class="line">	@Value(&quot;$&#123;app.helloName&#125;&quot;)</div><div class="line">	private String helloName;</div><div class="line"></div><div class="line">	public String getImplName() &#123;</div><div class="line">		return implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setImplName(String implName) &#123;</div><div class="line">		this.implName = implName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getHelloName() &#123;</div><div class="line">		return helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHelloName(String helloName) &#123;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl(String implName, String helloName) &#123;</div><div class="line">		super();</div><div class="line">		this.implName = implName;</div><div class="line">		this.helloName = helloName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;HelloWorldImpl [implName=&quot; + implName + &quot;, helloName=&quot; + helloName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void printHelloWorld(String msg) &#123;</div><div class="line">		System.out.println(msg + &quot; &quot; + implName + &quot; &quot; + helloName);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorldImpl() &#123;</div><div class="line">		super();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>说明：要给property注入值，相当于xml bean定义的property属性。可以直接指定@value(“property_name”)，但是基于spring松耦合的考虑，使用properties文件注入的方式更符合松耦合的思想。</p>
</blockquote>
<p>&emsp;&emsp;新增bean配置类AppConfig：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.ComponentScan;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.PropertySource;</div><div class="line">import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</div><div class="line"></div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line">import com.lidolid.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">@ComponentScan</div><div class="line">@PropertySource(&quot;properties/cons.properties&quot;)</div><div class="line">public class AppConfig &#123;</div><div class="line">	</div><div class="line">	@Bean</div><div class="line">	public static PropertySourcesPlaceholderConfigurer placeholderConfigurer() &#123;</div><div class="line">		return new PropertySourcesPlaceholderConfigurer();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    @Bean(name=&quot;helloBean&quot;)</div><div class="line">    public HelloWorld helloWorld() &#123;</div><div class="line">        return new HelloWorldImpl();</div><div class="line">    &#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：由于property值注入使用了@Value(“${app.implName}”) 这种占位符的方式，必须要配置一个PropertyPlaceholderConfigurer bean或PropertySourcesPlaceholderConfigurer bean。从Spring 3.1开始，推荐使PropertySourcesPlaceholderConfigurer，因为它能够基于Spring Environment及其属性源来解析占位符。即上述代码中的定义。<br>@PropertySource(“properties/cons.properties”)用来指明用于注入的properties文件的路径</p>
</blockquote>
<p>&emsp;&emsp;cons.properties文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.implName=chenhao</div><div class="line">app.helloName=nihao</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;调用测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.config.AppConfig;</div><div class="line">import com.lidolid.hello.HelloWorld;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);</div><div class="line">		HelloWorld obj = (HelloWorld) context.getBean(&quot;helloBean&quot;);</div><div class="line"></div><div class="line">		obj.printHelloWorld(&quot;Spring Java Config&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-运行结果"><a href="#3-运行结果" class="headerlink" title="3. 运行结果"></a>3. 运行结果</h5><p><img src="https://i.imgur.com/OxytFN0.png" alt=""></p>
<blockquote>
<p>properties文件定义的内容已经注入</p>
</blockquote>
<h4 id="多个bean配置类合并问题"><a href="#多个bean配置类合并问题" class="headerlink" title="多个bean配置类合并问题"></a>多个bean配置类合并问题</h4><p>&emsp;&emsp;在xml定义中，便于开发与管理，可定义多个xml文件，最终使用import标签合并到一个xml文件中，最终在使用时即可通过一个bean文件获取所有定义的bean。在JavaConfig中也有相似的功能，合并多个bean配置类。<br>xml方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;database/Spring-Datasource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;customer/Spring-Customer.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>s<br>JavaConfig方式：<br>SchedulerConfig配置类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">import com.lidolid.core.SchedulerBo;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class SchedulerConfig &#123;</div><div class="line"></div><div class="line">	@Bean(name=&quot;scheduler&quot;)</div><div class="line">	public SchedulerBo suchedulerBo()&#123;		</div><div class="line">		return new SchedulerBo();		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CustomerConfig配置类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">import com.lidolid.core.CustomerBo;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class CustomerConfig &#123;</div><div class="line"></div><div class="line">	@Bean(name = &quot;customer&quot;)</div><div class="line">	public CustomerBo customerBo() &#123;</div><div class="line">		return new CustomerBo();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置类的合并Appconfig：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.config;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">@Import(&#123; CustomerConfig.class, SchedulerConfig.class &#125;)</div><div class="line">public class AppConfig &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-JavaConfig配置&quot;&gt;&lt;a href=&quot;#Spring-JavaConfig配置&quot; class=&quot;headerlink&quot; title=&quot;Spring JavaConfig配置&quot;&gt;&lt;/a&gt;Spring JavaConfig配置&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bean定义在Spring配置XML文件或Java类中。&lt;br&gt;但是，仍然允许使用经典的XML方式来定义bean和配置，JavaConfig是另一种替代解决方案。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="JavaConfig" scheme="http://yoursite.com/tags/JavaConfig/"/>
    
  </entry>
  
  <entry>
    <title>Spring 使用@Autowired注解自动装配</title>
    <link href="http://yoursite.com/2017/08/10/Spring_0301_@autowired/"/>
    <id>http://yoursite.com/2017/08/10/Spring_0301_@autowired/</id>
    <published>2017-08-09T16:16:59.000Z</published>
    <updated>2017-09-18T07:32:15.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-使用-Autowired注解自动装配"><a href="#Spring-使用-Autowired注解自动装配" class="headerlink" title="Spring 使用@Autowired注解自动装配"></a>Spring 使用@Autowired注解自动装配</h3><p>&emsp;&emsp;在Spring中，可以使用 @Autowired 注解通过setter方法，构造函数或字段自动装配Bean,@Autowired注解是通过匹配数据类型自动装配Bean的。<br><a id="more"></a></p>
<p>&emsp;&emsp;Person基类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String name;</div><div class="line">	private String address;</div><div class="line">	private int age;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getAddress() &#123;</div><div class="line">		return address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAddress(String address) &#123;</div><div class="line">		this.address = address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer实体类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line">	</div><div class="line">	private Person person;</div><div class="line">	private int type;</div><div class="line">	private String action;</div><div class="line"></div><div class="line">	public Person getPerson() &#123;</div><div class="line">		return person;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void setPerson(Person person) &#123;</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getType() &#123;</div><div class="line">		return type;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setType(int type) &#123;</div><div class="line">		this.type = type;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getAction() &#123;</div><div class="line">		return action;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAction(String action) &#123;</div><div class="line">		this.action = action;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	public Customer(Person person) &#123;</div><div class="line">		super();</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [person=&quot; + person + &quot;, type=&quot; + type + &quot;, action=&quot; + action + &quot;]&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;applicationContext.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 使用@Autowire注解时bean配置的两种方式如下： --&gt;</div><div class="line">	&lt;!-- &lt;context:annotation-config /&gt; --&gt;</div><div class="line">	&lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;CustomerBean&quot; class=&quot;com.lidolid.common.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;PersonBean&quot; class=&quot;com.lidolid.common.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid&quot; /&gt;</div><div class="line">		&lt;property name=&quot;address&quot; value=&quot;address ABC&quot; /&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;29&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：使用@Autowired注解自动装配时，要启用@Autowired，必须注册”AutowiredAnnotationBeanPostProcessor”，可以使用如下两种方式注册：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;context:annotation-config /&gt;</div><div class="line">或者</div><div class="line">&lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>调用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123; &quot;applicationContext.xml&quot; &#125;);</div><div class="line"></div><div class="line">		Customer cust = (Customer) context.getBean(&quot;CustomerBean&quot;);</div><div class="line">		System.out.println(cust);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/KeMZvw6.png" alt=""></p>
<blockquote>
<p>注意点，由于@AutoWired是使用byType自动装配的，加入applicationContext中存在两个相同类型的bean，容器将无法自动按类型装配。@Autowired提供了一种解决方案，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line">	&lt;!-- &lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt; --&gt;</div><div class="line">	&lt;context:annotation-config /&gt;	</div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; &gt;</div><div class="line">		&lt;property name=&quot;action&quot; value=&quot;buy&quot; /&gt;</div><div class="line">		&lt;property name=&quot;type&quot; value=&quot;1&quot; /&gt;</div><div class="line">	&lt;/bean&gt;		</div><div class="line">	&lt;bean id=&quot;personA&quot; class=&quot;com.lidolid.common.Person&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolidA&quot; /&gt;</div><div class="line">	&lt;/bean&gt;	</div><div class="line">	&lt;bean id=&quot;personB&quot; class=&quot;com.lidolid.common.Person&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolidB&quot; /&gt;</div><div class="line">	&lt;/bean&gt;	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.beans.factory.annotation.Qualifier;</div><div class="line">public class Customer &#123;</div><div class="line">	@Autowired</div><div class="line">	@Qualifier(&quot;personB&quot;)</div><div class="line">	private Person person;</div><div class="line">	private int type;</div><div class="line">	private String action;</div><div class="line">	public Person getPerson() &#123;</div><div class="line">		return person;</div><div class="line">	&#125;</div><div class="line">	public void setPerson(Person person) &#123;</div><div class="line">		this.person = person;</div><div class="line">	&#125;</div><div class="line">	public int getType() &#123;</div><div class="line">		return type;</div><div class="line">	&#125;</div><div class="line">	public void setType(int type) &#123;</div><div class="line">		this.type = type;</div><div class="line">	&#125;</div><div class="line">	public String getAction() &#123;</div><div class="line">		return action;</div><div class="line">	&#125;</div><div class="line">	public void setAction(String action) &#123;</div><div class="line">		this.action = action;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [person=&quot; + person + &quot;, type=&quot; + type + &quot;, action=&quot;</div><div class="line">				+ action + &quot;]&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-使用-Autowired注解自动装配&quot;&gt;&lt;a href=&quot;#Spring-使用-Autowired注解自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring 使用@Autowired注解自动装配&quot;&gt;&lt;/a&gt;Spring 使用@Autowired注解自动装配&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring中，可以使用 @Autowired 注解通过setter方法，构造函数或字段自动装配Bean,@Autowired注解是通过匹配数据类型自动装配Bean的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="自动装配" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean自动装配</title>
    <link href="http://yoursite.com/2017/08/08/Spring_0300_autowiredd/"/>
    <id>http://yoursite.com/2017/08/08/Spring_0300_autowiredd/</id>
    <published>2017-08-08T15:39:47.000Z</published>
    <updated>2017-09-18T07:50:27.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Bean自动装配"><a href="#Spring-Bean自动装配" class="headerlink" title="Spring Bean自动装配"></a>Spring Bean自动装配</h3><p>&emsp;&emsp;在Spring框架，可以用 auto-wiring 功能会自动装配Bean。要启用它，只需要在 <bean>定义“autowire”属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; autowire=&quot;byName&quot; /&gt;</div></pre></td></tr></table></figure></bean></p>
<p>&emsp;&emsp;在Spring中，支持 5 自动装配模式。</p>
<ul>
<li>no – 缺省情况下，自动配置是通过”ref”属性手动设定</li>
<li>byName – 根据属性名称自动装配。如果一个bean的名称和其他bean属性的名称是一样的，将会自装配它。</li>
<li>byType – 按数据类型自动装配。如果一个bean的数据类型是用其它bean属性的数据类型，兼容并自动装配它。</li>
<li>constructor – 在构造函数参数的byType方式。</li>
<li>autodetect – 如果找到默认的构造函数，使用”自动装配用构造”; 否则，使用”按类型自动装配”。</li>
</ul>
<a id="more"></a>
<h4 id="1-byName"><a href="#1-byName" class="headerlink" title="1. byName"></a>1. byName</h4><p>&emsp;&emsp;在Spring中，”按名称自动装配”是指，如果一个bean的名称与其他bean属性的名称是一样的，那么将自动装配它。<br>&emsp;&emsp;例如，如果”customer” bean有一个”address”属性，Spring会在当前容器中找到”address”bean，并自动装配。如果没有匹配找到，那么什么也不做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- customer has a property name &quot;address&quot; --&gt;</div><div class="line">	&lt;bean id=&quot;customer&quot; class=&quot;com.lidolid.common.Customer&quot; autowire=&quot;byName&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;address&quot; class=&quot;com.lidolid.common.Address&quot; &gt;</div><div class="line">		&lt;property name=&quot;fulladdress&quot; value=&quot;YiLong Road, CA 188&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-byType"><a href="#2-byType" class="headerlink" title="2. byType"></a>2. byType</h4><p>&emsp;&emsp;在Spring中，”类型自动装配”的意思是如果一个bean的数据类型与其它bean属性的数据类型相同，将自动兼容装配它。<br>&emsp;&emsp;例如，一个”persion” bean 公开以”ability”类数据类型作为属性，Spring会找到ability类相同的数据类型，并自动装配它的Bean。如果没有匹配找到，它什么也不做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- person has a property type of class &quot;ability&quot; --&gt;</div><div class="line">	&lt;bean id=&quot;person&quot; class=&quot;com.lidolid.common.Person&quot; autowire=&quot;byType&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;bean id=&quot;invisible&quot; class=&quot;com.lidolid.common.Ability&quot; &gt;</div><div class="line">		&lt;property name=&quot;skill&quot; value=&quot;Invisible&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：在上述byType自动装配时，如果容器中存在两个Ability类型对的bean，容器将无法确认从哪个bean装配，将会报错UnsatisfiedDependencyException。</p>
</blockquote>
<h4 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h4><p>&emsp;&emsp;在Spring中，可以使用”通过构造方法自动装配”，实际上是按构造函数的参数类型自动装配。 这意味着，如果一个bean的数据类型与其他bean的构造器参数的数据类型是相同的，那么将自动装配。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;person&quot; class=&quot;com.lidolid.common.Person&quot; autowire=&quot;constructor&quot; /&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;ability&quot; class=&quot;com.lidolid.common.Ability&quot; &gt;</div><div class="line">	&lt;property name=&quot;skill&quot; value=&quot;Invisible&quot; /&gt;</div><div class="line">	&lt;property name=&quot;test&quot; value=&quot;test&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>解释：ability bean的数据类型与person bean的构造器数据类型一致，那么person bean将自动装配</p>
</blockquote>
<h4 id="4-autodetect"><a href="#4-autodetect" class="headerlink" title="4. autodetect"></a>4. autodetect</h4><p>&emsp;&emsp;通过bean类的自省机制（introspection）来决定是使用constructor还是byType方式进行自动装配。如果发现默认的构造器，那么将使用byType方式。<br>KungFu类定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class KungFu &#123;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Language [name=&quot; + name + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Panda类定义，存在默认参数类型为Kungfu的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public Panda(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Panda(String kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>applicationContext.xml定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">   &lt;!-- // by www.yiibai.com --&gt;</div><div class="line">	&lt;bean id=&quot;panda&quot; class=&quot;com.lidolid.common.Panda&quot; autowire=&quot;autodetect&quot; /&gt;</div><div class="line">		</div><div class="line">	&lt;bean id=&quot;kungfu&quot; class=&quot;com.lidolid.common.KungFu&quot; &gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Tai Ji&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>调用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</div><div class="line"></div><div class="line">		Panda panda = (Panda) context.getBean(&quot;panda&quot;);</div><div class="line">		System.out.println(panda);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://i.imgur.com/Md15Ztq.png" alt=""></p>
<blockquote>
<p>Panda类存在参数类型为Kungfu的构造函数，所以此时会通过constructor自动装配。</p>
</blockquote>
<p>修改Panda类，删除参数类型为Kungfu的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public Panda(String kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by constructor&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/Z1dYOjK.png" alt=""></p>
<blockquote>
<p>由于Panda类中存在构造函数，参数类型为String，容器中不存在类型为String的bean，所以报错</p>
</blockquote>
<p>修改Panda类，删除所有构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">public class Panda &#123;</div><div class="line">	private KungFu kungfu;</div><div class="line"></div><div class="line">	public KungFu getKungfu() &#123;</div><div class="line">		return kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setKungfu(KungFu kungfu) &#123;</div><div class="line">		System.out.println(&quot;autowiring by type&quot;);</div><div class="line">		this.kungfu = kungfu;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [kungfu=&quot; + kungfu + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://i.imgur.com/MgbPndD.png" alt=""></p>
<blockquote>
<p>不存在构造函数，byType自动装配</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Bean自动装配&quot;&gt;&lt;a href=&quot;#Spring-Bean自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean自动装配&quot;&gt;&lt;/a&gt;Spring Bean自动装配&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring框架，可以用 auto-wiring 功能会自动装配Bean。要启用它，只需要在 &lt;bean&gt;定义“autowire”属性。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;bean id=&amp;quot;customer&amp;quot; class=&amp;quot;com.lidolid.common.Customer&amp;quot; autowire=&amp;quot;byName&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/bean&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在Spring中，支持 5 自动装配模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no – 缺省情况下，自动配置是通过”ref”属性手动设定&lt;/li&gt;
&lt;li&gt;byName – 根据属性名称自动装配。如果一个bean的名称和其他bean属性的名称是一样的，将会自装配它。&lt;/li&gt;
&lt;li&gt;byType – 按数据类型自动装配。如果一个bean的数据类型是用其它bean属性的数据类型，兼容并自动装配它。&lt;/li&gt;
&lt;li&gt;constructor – 在构造函数参数的byType方式。&lt;/li&gt;
&lt;li&gt;autodetect – 如果找到默认的构造函数，使用”自动装配用构造”; 否则，使用”按类型自动装配”。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="自动装配" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring使用JdbcTemplate实现查询和修改</title>
    <link href="http://yoursite.com/2017/08/07/Spring_0201_JdbcTemplate/"/>
    <id>http://yoursite.com/2017/08/07/Spring_0201_JdbcTemplate/</id>
    <published>2017-08-07T05:20:51.000Z</published>
    <updated>2017-09-18T04:26:23.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring使用JdbcTemplate实现查询和修改"><a href="#Spring使用JdbcTemplate实现查询和修改" class="headerlink" title="Spring使用JdbcTemplate实现查询和修改"></a>Spring使用JdbcTemplate实现查询和修改</h3><p>&emsp;&emsp;在Spring JDBC开发中，可以使用 JdbcTemplate 和 JdbcDaoSupport 类来简化整个数据库的操作过程。本文介绍一下使用JdbcTemplate的用法。<br><a id="more"></a></p>
<h4 id="1-实验环境"><a href="#1-实验环境" class="headerlink" title="1. 实验环境"></a>1. 实验环境</h4><ul>
<li>Spring 4.3.10</li>
<li>Spring-jdbc    4.3.10</li>
<li>Mysql-connector 5.0.2</li>
</ul>
<h4 id="2-工程结构"><a href="#2-工程结构" class="headerlink" title="2. 工程结构"></a>2. 工程结构</h4><p><img src="https://i.imgur.com/E6SlzyM.png" alt=""></p>
<h4 id="3-代码说明"><a href="#3-代码说明" class="headerlink" title="3. 代码说明"></a>3. 代码说明</h4><h5 id="3-1-Customer模型"><a href="#3-1-Customer模型" class="headerlink" title="3.1 Customer模型"></a>3.1 Customer模型</h5><p>&emsp;&emsp;添加一个客户模型用来存储用户的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.model;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line">	int custId;</div><div class="line">	String name;</div><div class="line">	int age;</div><div class="line"></div><div class="line">	public int getCustId() &#123;</div><div class="line">		return custId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setCustId(int custId) &#123;</div><div class="line">		this.custId = custId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Customer(int custId, String name, int age) &#123;</div><div class="line">		super();</div><div class="line">		this.custId = custId;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Customer() &#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-2-数据访问对象-DAO-模式"><a href="#3-2-数据访问对象-DAO-模式" class="headerlink" title="3.2 数据访问对象 (DAO) 模式"></a>3.2 数据访问对象 (DAO) 模式</h5><p>&emsp;&emsp;Customer Dao 接口.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public interface CustomerDAO &#123;</div><div class="line">	public Customer findByCustomerId(int custId);</div><div class="line"></div><div class="line">	public List&lt;Customer&gt; findAll();</div><div class="line"></div><div class="line">	public String findCustomerNameById(int custId);</div><div class="line"></div><div class="line">	public int findTotalCustomer();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer Dao接口具体实现.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao.impl;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</div><div class="line">import org.springframework.jdbc.core.support.JdbcDaoSupport;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class JdbcCustomerDAO extends JdbcDaoSupport implements CustomerDAO &#123;</div><div class="line">	public Customer findByCustomerId(int custId) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT * FROM CUSTOMER WHERE CUST_ID = ?&quot;;</div><div class="line"></div><div class="line">		Customer customer = getJdbcTemplate().queryForObject(sql, new Object[] &#123; custId &#125;,</div><div class="line">				new BeanPropertyRowMapper(Customer.class));</div><div class="line">		return customer;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Customer&gt; findAll() &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT * FROM CUSTOMER&quot;;</div><div class="line">		List&lt;Customer&gt; customers = getJdbcTemplate().query(sql, new BeanPropertyRowMapper(Customer.class));</div><div class="line">		return customers;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String findCustomerNameById(int custId) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT NAME FROM CUSTOMER WHERE CUST_ID = ?&quot;;</div><div class="line">		String name = (String) getJdbcTemplate().queryForObject(sql, new Object[] &#123; custId &#125;, String.class);</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int findTotalCustomer() &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT COUNT(*) FROM CUSTOMER&quot;;</div><div class="line">		int total = getJdbcTemplate().queryForObject(sql, Integer.class);</div><div class="line"></div><div class="line">		return total;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-3-Spring-bean配置"><a href="#3-3-Spring-bean配置" class="headerlink" title="3.3 Spring bean配置"></a>3.3 Spring bean配置</h5><p>&emsp;&emsp;File : Spring-Datasource.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;File : Spring-Customer.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;File : Spring-Module.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;database/Spring-Datasource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;customer/Spring-Customer.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;测试程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main( String[] args )</div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">    		new ClassPathXmlApplicationContext(&quot;Spring-Module.xml&quot;);</div><div class="line">    	 </div><div class="line">        CustomerDAO customerDAO = (CustomerDAO) context.getBean(&quot;customerDAO&quot;);</div><div class="line">        Customer customer = new Customer(1, &quot;lidolid&quot;,18);</div><div class="line">        customerDAO.insert(customer);</div><div class="line">    	</div><div class="line">        Customer customer1 = customerDAO.findByCustomerId(1);</div><div class="line">        System.out.println(customer1);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>对比直接使用JDBC实现的代码可以发现，使用JdbcTemplate可节省大量的冗余代码，因为JdbcTemplate类会自动处理它。在使用JDBC开发时，建议使用JdbcTemplate和JdbcDaoSupport，而不使用自己的JDBC编程代码。</p>
</blockquote>
<h4 id="4-Spring-SimpleJdbcTemplate-batchUpdate使用说明"><a href="#4-Spring-SimpleJdbcTemplate-batchUpdate使用说明" class="headerlink" title="4. Spring SimpleJdbcTemplate batchUpdate使用说明"></a>4. Spring SimpleJdbcTemplate batchUpdate使用说明</h4><p>&emsp;&emsp;当需要一次修改很多条数据时，可以使用batchUpdate，它可以实现对SQL脚本的一次编译，多次使用，从而提高直销效率。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao.impl;</div><div class="line"></div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.jdbc.core.BatchPreparedStatementSetter;</div><div class="line">import org.springframework.jdbc.core.support.JdbcDaoSupport;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class JdbcCustomerDAO extends JdbcDaoSupport implements CustomerDAO &#123;</div><div class="line">	public void insertBatch(final List&lt;Customer&gt; customers) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;INSERT INTO CUSTOMER &quot; + &quot;(CUST_ID, NAME, AGE) VALUES (?, ?, ?)&quot;;</div><div class="line"></div><div class="line">		getJdbcTemplate().batchUpdate(sql, new BatchPreparedStatementSetter() &#123;</div><div class="line"></div><div class="line">			public void setValues(PreparedStatement ps, int i) throws SQLException &#123;</div><div class="line">				Customer customer = customers.get(i);</div><div class="line">				ps.setLong(1, customer.getCustId());</div><div class="line">				ps.setString(2, customer.getName());</div><div class="line">				ps.setInt(3, customer.getAge());</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			public int getBatchSize() &#123;</div><div class="line">				return customers.size();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void insertBatchSQL(final String sql) &#123;</div><div class="line">		getJdbcTemplate().batchUpdate(new String[] &#123; sql &#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring使用JdbcTemplate实现查询和修改&quot;&gt;&lt;a href=&quot;#Spring使用JdbcTemplate实现查询和修改&quot; class=&quot;headerlink&quot; title=&quot;Spring使用JdbcTemplate实现查询和修改&quot;&gt;&lt;/a&gt;Spring使用JdbcTemplate实现查询和修改&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Spring JDBC开发中，可以使用 JdbcTemplate 和 JdbcDaoSupport 类来简化整个数据库的操作过程。本文介绍一下使用JdbcTemplate的用法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="JdbcTemplate" scheme="http://yoursite.com/tags/JdbcTemplate/"/>
    
  </entry>
  
  <entry>
    <title>Spring JDBC</title>
    <link href="http://yoursite.com/2017/08/06/Spring_0200_JDBC_Exp/"/>
    <id>http://yoursite.com/2017/08/06/Spring_0200_JDBC_Exp/</id>
    <published>2017-08-06T15:44:09.000Z</published>
    <updated>2017-09-18T05:11:00.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><p>&emsp;&emsp;Spring对JDBC做了相关支持，本实现演示通过Spring连接并操纵Mysql数据库。<br><a id="more"></a></p>
<h4 id="1-实验环境"><a href="#1-实验环境" class="headerlink" title="1. 实验环境"></a>1. 实验环境</h4><ul>
<li>Spring 4.3.10</li>
<li>Spring-jdbc    4.3.10</li>
<li>Mysql-connector 5.0.2</li>
</ul>
<h4 id="2-工程结构"><a href="#2-工程结构" class="headerlink" title="2. 工程结构"></a>2. 工程结构</h4><p><img src="https://i.imgur.com/2HLT2V3.png" alt=""></p>
<h4 id="3-代码说明"><a href="#3-代码说明" class="headerlink" title="3. 代码说明"></a>3. 代码说明</h4><h5 id="3-1-Customer模型"><a href="#3-1-Customer模型" class="headerlink" title="3.1 Customer模型"></a>3.1 Customer模型</h5><p>&emsp;&emsp;添加一个客户模型用来存储用户的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.model;</div><div class="line"></div><div class="line">import java.sql.Timestamp;</div><div class="line"></div><div class="line">public class Customer </div><div class="line">&#123;</div><div class="line">	int custId;</div><div class="line">	String name;</div><div class="line">	int age;</div><div class="line">	//getter and setter methods</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-2-数据访问对象-DAO-模式"><a href="#3-2-数据访问对象-DAO-模式" class="headerlink" title="3.2 数据访问对象 (DAO) 模式"></a>3.2 数据访问对象 (DAO) 模式</h5><p>&emsp;&emsp;Customer Dao 接口.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao;</div><div class="line"></div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public interface CustomerDAO &#123;</div><div class="line">	public void insert(Customer customer);</div><div class="line">	public Customer findByCustomerId(int custId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;客户的DAO实现，使用 JDBC 发出简单的 insert 和 select SQL语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao.impl;</div><div class="line"></div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.SQLException;</div><div class="line"></div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class JdbcCustomerDAO implements CustomerDAO &#123;</div><div class="line">	private DataSource dataSource;</div><div class="line"></div><div class="line">	public void setDataSource(DataSource dataSource) &#123;</div><div class="line">		this.dataSource = dataSource;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void insert(Customer customer) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;INSERT INTO CUSTOMER &quot; + &quot;(CUST_ID, NAME, AGE) VALUES (?, ?, ?)&quot;;</div><div class="line">		Connection conn = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			conn = dataSource.getConnection();</div><div class="line">			PreparedStatement ps = conn.prepareStatement(sql);</div><div class="line">			ps.setInt(1, customer.getCustId());</div><div class="line">			ps.setString(2, customer.getName());</div><div class="line">			ps.setInt(3, customer.getAge());</div><div class="line">			ps.executeUpdate();</div><div class="line">			ps.close();</div><div class="line"></div><div class="line">		&#125; catch (SQLException e) &#123;</div><div class="line">			throw new RuntimeException(e);</div><div class="line"></div><div class="line">		&#125; finally &#123;</div><div class="line">			if (conn != null) &#123;</div><div class="line">				try &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125; catch (SQLException e) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Customer findByCustomerId(int custId) &#123;</div><div class="line"></div><div class="line">		String sql = &quot;SELECT * FROM CUSTOMER WHERE CUST_ID = ?&quot;;</div><div class="line"></div><div class="line">		Connection conn = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			conn = dataSource.getConnection();</div><div class="line">			PreparedStatement ps = conn.prepareStatement(sql);</div><div class="line">			ps.setInt(1, custId);</div><div class="line">			Customer customer = null;</div><div class="line">			ResultSet rs = ps.executeQuery();</div><div class="line">			if (rs.next()) &#123;</div><div class="line">				customer = new Customer(rs.getInt(&quot;CUST_ID&quot;), rs.getString(&quot;NAME&quot;), rs.getInt(&quot;Age&quot;));</div><div class="line">			&#125;</div><div class="line">			rs.close();</div><div class="line">			ps.close();</div><div class="line">			return customer;</div><div class="line">		&#125; catch (SQLException e) &#123;</div><div class="line">			throw new RuntimeException(e);</div><div class="line">		&#125; finally &#123;</div><div class="line">			if (conn != null) &#123;</div><div class="line">				try &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125; catch (SQLException e) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-3-Spring-bean配置"><a href="#3-3-Spring-bean配置" class="headerlink" title="3.3 Spring bean配置"></a>3.3 Spring bean配置</h5><p>&emsp;&emsp;File : Spring-Datasource.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;File : Spring-Customer.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.impl.JdbcCustomerDAO&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;File : Spring-Module.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;database/Spring-Datasource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;customer/Spring-Customer.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;测试程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line">import com.lidolid.customer.model.Customer;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main( String[] args )</div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">    		new ClassPathXmlApplicationContext(&quot;Spring-Module.xml&quot;);</div><div class="line">    	 </div><div class="line">        CustomerDAO customerDAO = (CustomerDAO) context.getBean(&quot;customerDAO&quot;);</div><div class="line">        Customer customer = new Customer(1, &quot;lidolid&quot;,18);</div><div class="line">        customerDAO.insert(customer);</div><div class="line">    	</div><div class="line">        Customer customer1 = customerDAO.findByCustomerId(1);</div><div class="line">        System.out.println(customer1);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4. 运行结果"></a>4. 运行结果</h4><p><img src="https://i.imgur.com/5ouHIXT.png" alt=""></p>
<blockquote>
<p>注意：在Spring项目中使用JDBC时，要引用Spring-jdbc的jar包，否则会报错。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-JDBC&quot;&gt;&lt;a href=&quot;#Spring-JDBC&quot; class=&quot;headerlink&quot; title=&quot;Spring JDBC&quot;&gt;&lt;/a&gt;Spring JDBC&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring对JDBC做了相关支持，本实现演示通过Spring连接并操纵Mysql数据库。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring松耦合</title>
    <link href="http://yoursite.com/2017/08/05/Spring_0101_loosecouple/"/>
    <id>http://yoursite.com/2017/08/05/Spring_0101_loosecouple/</id>
    <published>2017-08-05T15:51:06.000Z</published>
    <updated>2017-09-18T04:21:45.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring松耦合"><a href="#Spring松耦合" class="headerlink" title="Spring松耦合"></a>Spring松耦合</h3><p>&emsp;&emsp;面向对象的概念，是一个很好的设计来打破系统进入一个组可重用的对象。然而，当系统变大，尤其是在Java项目，庞大的对象依赖关系将一直紧密耦合引起对象难以管理或修改。在这种情况下，可以使用Spring框架作为一个核心模块轻松高效地管理所有的对象依赖。<br><a id="more"></a></p>
<h4 id="输出生成器例子"><a href="#输出生成器例子" class="headerlink" title="输出生成器例子"></a>输出生成器例子</h4><p>&emsp;&emsp;假设你的项目有一个函数输出的内容，以CSV或JSON格式。代码可能看起来像下面的例子：<br>&emsp;&emsp;File:IOutputGenerator.java – 输出生成器接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.output;                                                                                                                                                                                                                              </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">public interface IOutputGenerator                                                                                                                                                                                                                       </div><div class="line">&#123;                                                                                                                                                                                                                                                       </div><div class="line">	public void generateOutput();                                                                                                                                                                                                                       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;File:CsvOutputGenerator.java – 一个CSV输出生成器用来实现IOutputGenerator接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.output.impl;</div><div class="line"></div><div class="line">import com.lidolid.output.IOutputGenerator;</div><div class="line"></div><div class="line">public class CsvOutputGenerator implements IOutputGenerator</div><div class="line">&#123;</div><div class="line">	public void generateOutput()&#123;</div><div class="line">		System.out.println(&quot;Csv Output Generator&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;File:JsonOutputGenerator.java – 一个JSON输出生成器用来实现IOutputGenerator接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.output.impl;</div><div class="line"></div><div class="line">import com.lidolid.output.IOutputGenerator;</div><div class="line"></div><div class="line">public class JsonOutputGenerator implements IOutputGenerator</div><div class="line">&#123;</div><div class="line">	public void generateOutput()&#123;</div><div class="line">		System.out.println(&quot;Json Output Generator&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;有如下几个方法来调用IOutputGenerator: </p>
<h5 id="1-直接调用"><a href="#1-直接调用" class="headerlink" title="1. 直接调用"></a>1. 直接调用</h5><p>&emsp;&emsp;正常的方式，直接调用它。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;                                                                                                                                                                                                                              </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">import com.lidolid.output.IOutputGenerator;                                                                                                                                                                                                              </div><div class="line">import com.lidolid.output.impl.CsvOutputGenerator;                                                                                                                                                                                                       </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">public class App                                                                                                                                                                                                                                        </div><div class="line">&#123;                                                                                                                                                                                                                                                       </div><div class="line">    public static void main( String[] args )                                                                                                                                                                                                            </div><div class="line">    &#123;                                                                                                                                                                                                                                                   </div><div class="line">    	IOutputGenerator output = new CsvOutputGenerator();                                                                                                                                                                                             </div><div class="line">    	output.generateOutput();                                                                                                                                                                                                                        </div><div class="line">    &#125;                                                                                                                                                                                                                                                   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>存在问题:以这种方式，这个问题是“output”紧密到CsvOutputGenerator耦合，输出生成的每一个变化可能涉及代码变化。如果此代码分散在你的项目中，输出生成的每一次变化都会让你受苦。</p>
</blockquote>
<h5 id="2-用辅助类调用它"><a href="#2-用辅助类调用它" class="headerlink" title="2. 用辅助类调用它"></a>2. 用辅助类调用它</h5><p>&emsp;&emsp;创建一个辅助类将所有输出实现在类的内部。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.output;                                                                                                                                                                                                                              </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">import com.lidolid.output.IOutputGenerator;                                                                                                                                                                                                              </div><div class="line">import com.lidolid.output.impl.CsvOutputGenerator;                                                                                                                                                                                                       </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">public class OutputHelper                                                                                                                                                                                                                               </div><div class="line">&#123;                                                                                                                                                                                                                                                       </div><div class="line">	IOutputGenerator outputGenerator;                                                                                                                                                                                                                   </div><div class="line">	                                                                                                                                                                                                                                                    </div><div class="line">	public OutputHelper()&#123;                                                                                                                                                                                                                              </div><div class="line">		outputGenerator = new CsvOutputGenerator();                                                                                                                                                                                                     </div><div class="line">	&#125;                                                                                                                                                                                                                                                   </div><div class="line">	                                                                                                                                                                                                                                                    </div><div class="line">	public void generateOutput()&#123;                                                                                                                                                                                                                       </div><div class="line">		outputGenerator.generateOutput();                                                                                                                                                                                                               </div><div class="line">	&#125;                                                                                                                                                                                                                                                   </div><div class="line">	                                                                                                                                                                                                                                                    </div><div class="line">&#125;                                                                                                                                                                                                                                                       </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">//通过辅助类调用                                                                                                                                                                                                                                        </div><div class="line">package com.lidolid.common;                                                                                                                                                                                                                              </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">import com.lidolid.output.OutputHelper;                                                                                                                                                                                                                  </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">public class App                                                                                                                                                                                                                                        </div><div class="line">&#123;                                                                                                                                                                                                                                                       </div><div class="line">    public static void main( String[] args )                                                                                                                                                                                                            </div><div class="line">    &#123;                                                                                                                                                                                                                                                   </div><div class="line">    	OutputHelper output = new OutputHelper();                                                                                                                                                                                                       </div><div class="line">    	output.generateOutput();                                                                                                                                                                                                                        </div><div class="line">    &#125;                                                                                                                                                                                                                                                   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>存在问题:这看起来比之前的更优雅，只需要管理一个辅助类，但是辅助类仍是紧耦合 CsvOutputGenerator，输出生成的每一个变化仍然涉及小的代码更改。</p>
</blockquote>
<h5 id="3-Spring"><a href="#3-Spring" class="headerlink" title="3.  Spring"></a>3.  Spring</h5><p>&emsp;&emsp;Spring 可以让输出生成松散的耦合到输出发生器。OutputHelper类更小的修改。<br>&emsp;&emsp;创建一个 Spring bean 的配置文件，并在这里声明所有的Java对象的依赖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Spring-Common.xml --&gt;                                                                                                                                                                                                                              </div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;                                                                                                                                                                                              </div><div class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;                                                                                                                                                                                                   </div><div class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                                                                                                                                                                                         </div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;                                                                                                                                                                                      </div><div class="line">                                                                                                                                                                                                                                                        </div><div class="line">	&lt;bean id=&quot;OutputHelper&quot; class=&quot;com.lidolid.output.OutputHelper&quot;&gt;                                                                                                                                                                                     </div><div class="line">		&lt;property name=&quot;outputGenerator&quot; ref=&quot;CsvOutputGenerator&quot; /&gt;                                                                                                                                                                                    </div><div class="line">	&lt;/bean&gt;                                                                                                                                                                                                                                             </div><div class="line">	                                                                                                                                                                                                                                                    </div><div class="line">	&lt;bean id=&quot;CsvOutputGenerator&quot; class=&quot;com.lidolid.output.impl.CsvOutputGenerator&quot; /&gt;                                                                                                                                                                  </div><div class="line">	&lt;bean id=&quot;JsonOutputGenerator&quot; class=&quot;com.lidolid.output.impl.JsonOutputGenerator&quot; /&gt;                                                                                                                                                           </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;通过Spring来调用它 </p>
<pre><code>package com.lidolid.common;                                                                                                                                                                                                                              

import org.springframework.context.ApplicationContext;                                                                                                                                                                                                  
import org.springframework.context.support.ClassPathXmlApplicationContext;                                                                                                                                                                              

import com.lidolid.output.OutputHelper;                                                                                                                                                                                                                  

public class App                                                                                                                                                                                                                                        
{                                                                                                                                                                                                                                                       
    public static void main( String[] args )                                                                                                                                                                                                            
    {                                                                                                                                                                                                                                                   
        ApplicationContext context =                                                                                                                                                                                                                    
           new ClassPathXmlApplicationContext(new String[] {&quot;Spring-Common.xml&quot;});                                                                                                                                                                      

        OutputHelper output = (OutputHelper)context.getBean(&quot;OutputHelper&quot;);                                                                                                                                                                            
        output.generateOutput();                                                                                                                                                                                                                        

    }                                                                                                                                                                                                                                                   
}
</code></pre><blockquote>
<p>现在，只需要改变 Spring XML 文件使用不同的输出生成器。只修改 Spring XML 文件而不需要无码修改，这意味着更少的错误。</p>
</blockquote>
<h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>&emsp;&emsp;有了Spring框架 - 这种依赖注入(DI)为对象的依赖关系管理有用的特性，使大型Java项目开发管理中更优雅的，高度灵活和便于维护。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring松耦合&quot;&gt;&lt;a href=&quot;#Spring松耦合&quot; class=&quot;headerlink&quot; title=&quot;Spring松耦合&quot;&gt;&lt;/a&gt;Spring松耦合&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;面向对象的概念，是一个很好的设计来打破系统进入一个组可重用的对象。然而，当系统变大，尤其是在Java项目，庞大的对象依赖关系将一直紧密耦合引起对象难以管理或修改。在这种情况下，可以使用Spring框架作为一个核心模块轻松高效地管理所有的对象依赖。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="松耦合" scheme="http://yoursite.com/tags/%E6%9D%BE%E8%80%A6%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate查询之HQL</title>
    <link href="http://yoursite.com/2017/08/05/Hibernate_hql/"/>
    <id>http://yoursite.com/2017/08/05/Hibernate_hql/</id>
    <published>2017-08-05T14:04:39.000Z</published>
    <updated>2017-09-15T08:43:45.479Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;展示HQL的简单用法<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testHQL_01() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Category&quot;);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_02() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Category c where c.name &gt; &apos;c5&apos;&quot;);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_03() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Category c order by c.name desc&quot;);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_04() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	//distinct查询不同的对象，即主键不同的对象，可以省略</div><div class="line">	Query q = session.createQuery(&quot;select distinct c from Category c order by c.name desc&quot;);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_05() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	/*Query q = session.createQuery(&quot;from Category c where c.id &gt; :min and c.id &lt; :max&quot;);</div><div class="line">	q.setParameter(&quot;min&quot;, 2);</div><div class="line">	q.setParameter(&quot;max&quot;, 6);*/</div><div class="line">	Query q = session.createQuery(&quot;from Category c where c.id &gt; :min and c.id &lt; :max&quot;).setParameter(&quot;min&quot;, 2)</div><div class="line">			.setParameter(&quot;max&quot;, 6);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_06() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Category c order by c.name desc&quot;).setFirstResult(2).setMaxResults(5);</div><div class="line">	List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line">	for (Category c : categories) &#123;</div><div class="line">		System.out.println(c.getName());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_07() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	//distinct查询不同的对象，即主键不同的对象，可以省略</div><div class="line">	Query q = session.createQuery(&quot;select c.id, c.name from Category c order by c.name desc&quot;);</div><div class="line">	List&lt;Object[]&gt; categories = (List&lt;Object[]&gt;) q.list();</div><div class="line">	for (Object[] object : categories) &#123;</div><div class="line">		System.out.println(object[0] + &quot;:&quot; + object[1]);</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//将fetch_type设置为lazy时，将不会有第二条sql语句</div><div class="line">@Test</div><div class="line">public void testHQL_08() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Topic t where t.category.id = 1&quot;);</div><div class="line">	List&lt;Topic&gt; topics = (List&lt;Topic&gt;) q.list();</div><div class="line">	for (Topic t : topics) &#123;</div><div class="line">		System.out.println(t.getTitle());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_09() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Msg m where m.topic.category.id = 1&quot;);</div><div class="line"></div><div class="line">	for (Object object : q.list()) &#123;</div><div class="line">		Msg m = (Msg) object;</div><div class="line">		System.out.println(m.getCont());</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testHQL_10() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(</div><div class="line">			&quot;select new com.lidolid.hibernate.model.MsgInfe(m.id, m.cont, m.topic.title, m.topic.category.name) from Msg m&quot;);</div><div class="line"></div><div class="line">	for (Object object : q.list()) &#123;</div><div class="line">		MsgInfe m = (MsgInfe) object;</div><div class="line">		System.out.println(m);</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//left right join</div><div class="line">//为什么不能直接写Category名，而必须写t.category</div><div class="line">//因为可能存在多个成员变量(同一个类)，需要指明使用哪个成员变量做连接</div><div class="line">@Test</div><div class="line">public void testHQL_11() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;select t.title, c.name from Topic t join t.category c&quot;);</div><div class="line"></div><div class="line">	for (Object object : q.list()) &#123;</div><div class="line">		Object[] m = (Object[]) object;</div><div class="line">		System.out.println(m[0] + &quot;-&quot; + m[1]);</div><div class="line">	&#125;</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用uniqueResult</div><div class="line">@Test</div><div class="line">public void testHQL_12() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;from Msg m where m = :MsgToSearch&quot;);</div><div class="line">	Msg m = new Msg();</div><div class="line">	m.setId(1);</div><div class="line">	q.setParameter(&quot;MsgToSearch&quot;, m);</div><div class="line">	Msg result = (Msg) q.uniqueResult();</div><div class="line">	System.out.println(result.getCont());</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用uniqueResult</div><div class="line">@Test</div><div class="line">public void testHQL_13() &#123;</div><div class="line">	Session session = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Query q = session.createQuery(&quot;select count(*) from Msg m&quot;);</div><div class="line">	Long count = (Long) q.uniqueResult();</div><div class="line">	System.out.println(count);</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;展示HQL的简单用法&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="HQL" scheme="http://yoursite.com/tags/HQL/"/>
    
  </entry>
  
  <entry>
    <title>Spring示例Hello World</title>
    <link href="http://yoursite.com/2017/08/05/Spring_0100_HelloWorld/"/>
    <id>http://yoursite.com/2017/08/05/Spring_0100_HelloWorld/</id>
    <published>2017-08-05T14:04:39.000Z</published>
    <updated>2017-09-15T11:57:47.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring示例Hello-World"><a href="#Spring示例Hello-World" class="headerlink" title="Spring示例Hello World"></a>Spring示例Hello World</h3><p>&emsp;&emsp;Spring框架，是一个非常强大的反转控制(IOC)框架，以帮助分离项目组件之间的依赖关系。反转控制(IOC)就是传统通过程序控制的对象装配改由spring容器来控制。下面通过Hello World示例，来简单展示一下Spring的基础配置及反转控制的含义。<br>&emsp;&emsp;前一段时间学习使用了Maven这个项目管理工具，感觉可以更好的帮助理解Spring各版本的差异、更方便的管理工程，所以之后Spring相关的工程，都会使用Maven创建。<br><a id="more"></a></p>
<h4 id="1-Spring架构"><a href="#1-Spring架构" class="headerlink" title="1. Spring架构"></a>1. Spring架构</h4><p>&emsp;&emsp;Spring架构如下：<br><img src="https://i.imgur.com/3v2DwXd.png" alt=""></p>
<ul>
<li>IoC Container: 这是最重要的，也是最基础的， Spring的基础。它的作用是配置和Java对象的生命周期管理。这篇教程中我们将学习这一部分。</li>
<li>DAO, ORM, AOP, WEB: 该模块可用于将工具或框架集成到了Spring。</li>
</ul>
<h4 id="2-示例程序Hello-World"><a href="#2-示例程序Hello-World" class="headerlink" title="2. 示例程序Hello World"></a>2. 示例程序Hello World</h4><p>&emsp;&emsp;2.1 程序架构：<br><img src="https://i.imgur.com/3RQtkqw.png" alt=""></p>
<p>&emsp;&emsp;2.2 pom.xml配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">  &lt;groupId&gt;com.lidolid&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;Spring_0100_HelloWorld&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">  </div><div class="line">  &lt;dependencies&gt;</div><div class="line"> </div><div class="line">        &lt;!-- Spring Core --&gt;</div><div class="line">        &lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">         </div><div class="line">        &lt;!-- Spring Context --&gt;</div><div class="line">        &lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        </div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;5.0.2&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">         </div><div class="line">    &lt;/dependencies&gt;</div><div class="line">    </div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;2.3 代码说明</p>
<ul>
<li>HelloWorld.java接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface HelloWorld &#123;</div><div class="line">	public void sayHello();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>SpringHelloWorld.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class SpringHelloWorld implements HelloWorld&#123;</div><div class="line">	@Override</div><div class="line">    public void sayHello() &#123;</div><div class="line">        System.out.println(&quot;Spring Say Hello!!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>StrutsHelloWorld.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class StrutsHelloWorld implements HelloWorld &#123;</div><div class="line">	@Override</div><div class="line">	public void sayHello() &#123;</div><div class="line">		System.out.println(&quot;Struts Say Hello!!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>HelloWorldService.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class HelloWorldService &#123;</div><div class="line">	private HelloWorld helloWorld;</div><div class="line"></div><div class="line">	public HelloWorldService() &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHelloWorld(HelloWorld helloWorld) &#123;</div><div class="line">		this.helloWorld = helloWorld;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public HelloWorld getHelloWorld() &#123;</div><div class="line">		return this.helloWorld;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>HelloProgram.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class HelloProgram &#123;</div><div class="line">	private static ApplicationContext context;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</div><div class="line"></div><div class="line">		HelloWorldService service = (HelloWorldService) context.getBean(&quot;helloWorldService&quot;);</div><div class="line"></div><div class="line">		HelloWorld hw = service.getHelloWorld();</div><div class="line"></div><div class="line">		hw.sayHello();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>beans.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line">  </div><div class="line">    &lt;bean id=&quot;springHelloWorld&quot;</div><div class="line">        class=&quot;com.lidolid.tutorial.spring.helloworld.impl.SpringHelloWorld&quot;&gt;&lt;/bean&gt;</div><div class="line">    &lt;bean id=&quot;strutsHelloWorld&quot;</div><div class="line">        class=&quot;com.lidolid.tutorial.spring.helloworld.impl.StrutsHelloWorld&quot;&gt;&lt;/bean&gt;</div><div class="line">  </div><div class="line">  </div><div class="line">    &lt;bean id=&quot;helloWorldService&quot;</div><div class="line">        class=&quot;com.lidolid.tutorial.spring.helloworld.HelloWorldService&quot;&gt;</div><div class="line">        &lt;property name=&quot;helloWorld&quot; ref=&quot;springHelloWorld&quot;/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">  </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;2.4 执行结果<br><img src="https://i.imgur.com/Su15BsU.png" alt=""></p>
<p>&emsp;&emsp;2.5 结果分析<br><img src="https://i.imgur.com/aQA3PsK.png" alt=""><br>&emsp;&emsp;如果不使用Spring，上图红框中的代码可由如下代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SpringHelloWorld springHelloWorld = new SpringHelloWorld();</div><div class="line">HelloWorldService service = new HelloWorldService();</div><div class="line">service.setHelloWorld(springHelloWorld);</div><div class="line">HelloWorld hw = service.getHelloWorld();</div><div class="line">hw.sayHello();</div></pre></td></tr></table></figure></p>
<p>也就是说HelloWorldService对象的HelloWorld属性具体是什么，是在程序中指定的。但在使用了Spring之后，通过(HelloWorldService) context.getBean(“helloWorldService”)便获取了service，且已经指定了service对象中的HelloWorld属性的实现。实现不是有程序控制的，而是Spring容器控制的。这就是反转控制(IOC)<br><img src="https://i.imgur.com/jEUx9PM.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring示例Hello-World&quot;&gt;&lt;a href=&quot;#Spring示例Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Spring示例Hello World&quot;&gt;&lt;/a&gt;Spring示例Hello World&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring框架，是一个非常强大的反转控制(IOC)框架，以帮助分离项目组件之间的依赖关系。反转控制(IOC)就是传统通过程序控制的对象装配改由spring容器来控制。下面通过Hello World示例，来简单展示一下Spring的基础配置及反转控制的含义。&lt;br&gt;&amp;emsp;&amp;emsp;前一段时间学习使用了Maven这个项目管理工具，感觉可以更好的帮助理解Spring各版本的差异、更方便的管理工程，所以之后Spring相关的工程，都会使用Maven创建。&lt;br&gt;
    
    </summary>
    
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate树状映射</title>
    <link href="http://yoursite.com/2017/08/05/Hibernate_tree_mapping/"/>
    <id>http://yoursite.com/2017/08/05/Hibernate_tree_mapping/</id>
    <published>2017-08-04T16:11:47.000Z</published>
    <updated>2017-09-15T08:28:19.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate树状映射"><a href="#Hibernate树状映射" class="headerlink" title="Hibernate树状映射"></a>Hibernate树状映射</h3><p>&emsp;&emsp;在系统中，经常会用到无限级递归的树形结构，比如菜单、组织机构管理、多级分类等等，一般是在同一个表中定义父子关系实现这种树形结构，本文主要讲述如何运用hibernate全注解的方式实现这个功能。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class Org &#123;</div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;Org&gt; chidren = new HashSet&lt;Org&gt;();</div><div class="line">	private Org parent;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@OneToMany(mappedBy = &quot;parent&quot;, cascade = CascadeType.ALL, fetch = FetchType.EAGER)</div><div class="line">	public Set&lt;Org&gt; getChidren() &#123;</div><div class="line">		return chidren;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setChidren(Set&lt;Org&gt; chidren) &#123;</div><div class="line">		this.chidren = chidren;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToOne</div><div class="line">	@JoinColumn(name = &quot;parent_id&quot;)</div><div class="line">	public Org getParent() &#123;</div><div class="line">		return parent;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setParent(Org parent) &#123;</div><div class="line">		this.parent = parent;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testSave() &#123;</div><div class="line">	Org o = new Org();</div><div class="line">	o.setName(&quot;总公司&quot;);</div><div class="line">	Org o1 = new Org();</div><div class="line">	o1.setName(&quot;分公司1&quot;);</div><div class="line">	Org o2 = new Org();</div><div class="line">	o2.setName(&quot;分公司2&quot;);</div><div class="line">	Org o11 = new Org();</div><div class="line">	o11.setName(&quot;分公司1下部门1&quot;);</div><div class="line">	Org o12 = new Org();</div><div class="line">	o12.setName(&quot;分公司1下部门2&quot;);</div><div class="line">	o.getChidren().add(o1);</div><div class="line">	o.getChidren().add(o2);</div><div class="line">	o1.getChidren().add(o11);</div><div class="line">	o1.getChidren().add(o12);</div><div class="line"></div><div class="line">	o11.setParent(o1);</div><div class="line">	o12.setParent(o1);</div><div class="line">	o1.setParent(o);</div><div class="line">	o2.setParent(o);</div><div class="line"></div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	s.save(o);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testLoad() &#123;</div><div class="line">	testSave();</div><div class="line"></div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	Org o = (Org) s.load(Org.class, 1);</div><div class="line">	print(o, 0);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void print(Org o, int level) &#123;</div><div class="line">	String preStr = &quot;&quot;;</div><div class="line">	for (int i = 0; i &lt; level; i++) &#123;</div><div class="line">		preStr += &quot;----&quot;;</div><div class="line">	&#125;</div><div class="line">	System.out.println(preStr + o.getName());</div><div class="line">	for (Org child : o.getChidren()) &#123;</div><div class="line">		print(child, level + 1);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生成的建表语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Org (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	parent_id integer, </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">ALTER TABLE Org</div><div class="line">	ADD CONSTRAINT FKcrmmi14x7qre4lqh8qkjhmud3 FOREIGN KEY (parent_id) REFERENCES Org (id)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate树状映射&quot;&gt;&lt;a href=&quot;#Hibernate树状映射&quot; class=&quot;headerlink&quot; title=&quot;Hibernate树状映射&quot;&gt;&lt;/a&gt;Hibernate树状映射&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在系统中，经常会用到无限级递归的树形结构，比如菜单、组织机构管理、多级分类等等，一般是在同一个表中定义父子关系实现这种树形结构，本文主要讲述如何运用hibernate全注解的方式实现这个功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="树状映射" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate继承映射</title>
    <link href="http://yoursite.com/2017/08/04/Hibernate_extends_mapping/"/>
    <id>http://yoursite.com/2017/08/04/Hibernate_extends_mapping/</id>
    <published>2017-08-04T14:23:56.000Z</published>
    <updated>2017-09-15T08:16:36.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate继承映射"><a href="#Hibernate继承映射" class="headerlink" title="Hibernate继承映射"></a>Hibernate继承映射</h3><p>&emsp;&emsp;在面向对象开发中，类与类之间是可以相互继承的（单向继承），而Hibernate中也对这种继承关系提供了自己风格的封装，这就是我们接下来要介绍的Hibernate继承映射的三种策略：</p>
<ul>
<li>SingleTable：每棵类继承树一张表，表内有所有字段</li>
<li>TablePerClass：每个子类一张表，每张表都有自己所有的属性字段</li>
<li>Joined：父类、子类、子类各一张表，父表中有公共字段，子表中有个性字段+外键约束<a id="more"></a>
</li>
</ul>
<h4 id="SingleTable"><a href="#SingleTable" class="headerlink" title="SingleTable"></a>SingleTable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">//父类Person</div><div class="line">@Entity</div><div class="line">@Inheritance(strategy = InheritanceType.SINGLE_TABLE)</div><div class="line">@DiscriminatorColumn(name = &quot;discriminator&quot;, discriminatorType = DiscriminatorType.STRING)</div><div class="line">@DiscriminatorValue(&quot;person&quot;)</div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//子类Student</div><div class="line">@Entity</div><div class="line">@DiscriminatorValue(&quot;student&quot;)</div><div class="line">public class Student extends Person&#123;</div><div class="line"></div><div class="line">	private int score;</div><div class="line"></div><div class="line">	public int getScore() &#123;</div><div class="line">		return score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setScore(int score) &#123;</div><div class="line">		this.score = score;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//子类Teacher</div><div class="line">@Entity</div><div class="line">@DiscriminatorValue(&quot;teacher&quot;)</div><div class="line">public class Teacher extends Person&#123;</div><div class="line">	private String title;</div><div class="line"></div><div class="line">	public String getTitle() &#123;</div><div class="line">		return title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTitle(String title) &#123;</div><div class="line">		this.title = title;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：由于Teacher和Student存放在一个表中，所以需要新增一个字段来表明是Teacher记录还是Student记录，具体实现为父类设置字段名即类型@DiscriminatorColumn(name = “discriminator”, discriminatorType = DiscriminatorType.STRING)，子类设置填充的值@DiscriminatorValue(“student”)，@DiscriminatorValue(“teacher”)</p>
</blockquote>
<p>生成的建表语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Person (</div><div class="line">	discriminator varchar(31) NOT NULL, </div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	score integer, </div><div class="line">	title varchar(255), </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM</div></pre></td></tr></table></figure></p>
<p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testSave()&#123;</div><div class="line">	Student s = new Student();</div><div class="line">	s.setName(&quot;s1&quot;);</div><div class="line">	s.setScore(99);</div><div class="line">	Teacher t = new Teacher();</div><div class="line">	t.setName(&quot;t1&quot;);</div><div class="line">	t.setTitle(&quot;高级&quot;);</div><div class="line">	</div><div class="line">	Session session  = sf.getCurrentSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	session.save(s);</div><div class="line">	session.save(t);</div><div class="line">	session.getTransaction().commit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testLoad()&#123;</div><div class="line">	testSave();</div><div class="line">	</div><div class="line">	Session session  = sf.openSession();</div><div class="line">	session.beginTransaction();</div><div class="line">	Student t = (Student)session.load(Student.class, 1);</div><div class="line">	System.out.println(t.getName());</div><div class="line">	</div><div class="line">	Person p = (Person)session.load(Person.class, 2);</div><div class="line">	System.out.println(p.getName());</div><div class="line">	</div><div class="line">	session.getTransaction().commit();</div><div class="line">	session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="TablePerClass"><a href="#TablePerClass" class="headerlink" title="TablePerClass"></a>TablePerClass</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)</div><div class="line">@javax.persistence.TableGenerator(name = &quot;t_gen&quot;, table = &quot;t_gen_table&quot;, valueColumnName = &quot;t_value&quot;, pkColumnName = &quot;person_pk&quot;, initialValue = 1, allocationSize = 1)</div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue(generator = &quot;t_gen&quot;, strategy = GenerationType.TABLE)</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Entity</div><div class="line">public class Student extends Person &#123;</div><div class="line">	private int score;</div><div class="line"></div><div class="line">	public int getScore() &#123;</div><div class="line">		return score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setScore(int score) &#123;</div><div class="line">		this.score = score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@Entity</div><div class="line">public class Teacher extends Person&#123;</div><div class="line">	private String title;</div><div class="line"></div><div class="line">	public String getTitle() &#123;</div><div class="line">		return title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTitle(String title) &#123;</div><div class="line">		this.title = title;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：要保证每次插入的Student和Teacher的ID要不能相同。加入数据库中Teacher和Student中各有一条ID为1的记录，加入通过Person p = (Person)session.load(Person.class, 1)获取id为1的person的信息，将无法定位<br>所以主键不在使用自增，而是用TABLE</p>
</blockquote>
<p>生成的建表语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Person (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">CREATE TABLE Student (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	score integer NOT NULL, </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">CREATE TABLE Teacher (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	title varchar(255), </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM</div></pre></td></tr></table></figure></p>
<h4 id="Joined"><a href="#Joined" class="headerlink" title="Joined"></a>Joined</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Inheritance(strategy = InheritanceType.JOINED)</div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Entity</div><div class="line">public class Student extends Person &#123;</div><div class="line">	private int id;</div><div class="line">	private int score;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getScore() &#123;</div><div class="line">		return score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setScore(int score) &#123;</div><div class="line">		this.score = score;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@Entity</div><div class="line">public class Teacher extends Person&#123;</div><div class="line">	private int id;</div><div class="line">	private String title;</div><div class="line">	</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getTitle() &#123;</div><div class="line">		return title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTitle(String title) &#123;</div><div class="line">		this.title = title;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成的建表语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Person (</div><div class="line">	id integer NOT NULL, </div><div class="line">	name varchar(255), </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">CREATE TABLE Student (</div><div class="line">	score integer NOT NULL, </div><div class="line">	id integer NOT NULL, </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">CREATE TABLE Teacher (</div><div class="line">	title varchar(255), </div><div class="line">	id integer NOT NULL, </div><div class="line">	PRIMARY KEY (id)</div><div class="line">) ENGINE = MyISAM;</div><div class="line"></div><div class="line">ALTER TABLE Student</div><div class="line">	ADD CONSTRAINT FK3bkmp4kohbl54m14tb2fcqya3 FOREIGN KEY (id) REFERENCES Person (id);</div><div class="line"></div><div class="line">ALTER TABLE Teacher</div><div class="line">	ADD CONSTRAINT FKdohms8kj41vdcnbope5glh9c6 FOREIGN KEY (id) REFERENCES Person (id)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate继承映射&quot;&gt;&lt;a href=&quot;#Hibernate继承映射&quot; class=&quot;headerlink&quot; title=&quot;Hibernate继承映射&quot;&gt;&lt;/a&gt;Hibernate继承映射&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在面向对象开发中，类与类之间是可以相互继承的（单向继承），而Hibernate中也对这种继承关系提供了自己风格的封装，这就是我们接下来要介绍的Hibernate继承映射的三种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SingleTable：每棵类继承树一张表，表内有所有字段&lt;/li&gt;
&lt;li&gt;TablePerClass：每个子类一张表，每张表都有自己所有的属性字段&lt;/li&gt;
&lt;li&gt;Joined：父类、子类、子类各一张表，父表中有公共字段，子表中有个性字段+外键约束
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="CRUD" scheme="http://yoursite.com/tags/CRUD/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate一对多多对一双向外键关联的CRUD操作</title>
    <link href="http://yoursite.com/2017/08/04/Hibernate_one2many_many2one_crud/"/>
    <id>http://yoursite.com/2017/08/04/Hibernate_one2many_many2one_crud/</id>
    <published>2017-08-04T02:11:01.000Z</published>
    <updated>2017-09-15T06:15:08.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate一对多双向外键关联的CRUD操作"><a href="#Hibernate一对多双向外键关联的CRUD操作" class="headerlink" title="Hibernate一对多双向外键关联的CRUD操作"></a>Hibernate一对多双向外键关联的CRUD操作</h3><p>&emsp;&emsp;在使用Hibernate内置接口或JPA接口进行CRUD操作时，实体类的映射设置，会影响CRUD的操作结果。本文的内容就是探讨cascade和fetch属性设置对CRUD操作的影响，具体内容如下：<br><a id="more"></a></p>
<ul>
<li>cascade属性设置<ul>
<li>cascade可以设定持久化时对于关联对象的级联操作，CUD操作受cascade属性影响，R操作不熟不受cascade属性的影响</li>
<li>cascade属性仅仅是帮开发者减少了编程的麻烦，开发过程中也可以不使用</li>
<li>取值范围：CascadeType.ALL，CascadeType.PERSIST，CascadeType.MERGE，CascadeType.REFRESH，CascadeType.REMOVE，CascadeType.DETACH</li>
</ul>
</li>
</ul>
<h4 id="cascade使用示例"><a href="#cascade使用示例" class="headerlink" title="cascade使用示例"></a>cascade使用示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">//Group实体类</div><div class="line">@Entity</div><div class="line">@Table(name = &quot;t_group&quot;)</div><div class="line">public class Group &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;User&gt; users = new HashSet&lt;User&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//cascade属性设置为CascadeType.ALL，表明CUD操作都会做级联操作</div><div class="line">	@OneToMany(mappedBy = &quot;group&quot;, cascade = &#123; CascadeType.ALL &#125;)</div><div class="line">	public Set&lt;User&gt; getUsers() &#123;</div><div class="line">		return users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsers(Set&lt;User&gt; users) &#123;</div><div class="line">		this.users = users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//User实体类</div><div class="line">@Entity</div><div class="line">@Table(name = &quot;t_user&quot;)</div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Group group;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//cascade属性设置为CascadeType.ALL，表明CUD操作都会做级联操作</div><div class="line">	@ManyToOne(cascade = &#123; CascadeType.ALL&#125;)</div><div class="line">	public Group getGroup() &#123;</div><div class="line">		return group;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroup(Group group) &#123;</div><div class="line">		this.group = group;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Save测试方法："><a href="#Save测试方法：" class="headerlink" title="Save测试方法："></a>Save测试方法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testSaveUser()&#123;</div><div class="line">	Group g = new Group();</div><div class="line">	g.setName(&quot;gr&quot;);</div><div class="line">	User u = new User();</div><div class="line">	u.setName(&quot;chenhao&quot;);</div><div class="line">	//设置双向关系</div><div class="line">	g.getUsers().add(u);</div><div class="line">	u.setGroup(g);</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	//存储User对象，观察会不会级联存储Group对象</div><div class="line">	s.save(u);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://i.imgur.com/CPiTYFU.png" alt=""><br>由于User实体类cascade设置了CascadeType.ALL，CUD操作都会做级联操作，所以在存储User时也会级联存储Group</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testSaveGroup()&#123;</div><div class="line">	//双向关系要设定双向关联</div><div class="line">	User u1 = new User();</div><div class="line">	u1.setName(&quot;u1&quot;);</div><div class="line">	User u2 = new User();</div><div class="line">	u2.setName(&quot;u2&quot;);</div><div class="line">	Group g = new Group();</div><div class="line">	g.setName(&quot;gr&quot;);</div><div class="line">	g.getUsers().add(u1);</div><div class="line">	g.getUsers().add(u2);</div><div class="line">	u1.setGroup(g);</div><div class="line">	u2.setGroup(g);</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	s.save(g);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://i.imgur.com/DIba2s7.png" alt=""></p>
</blockquote>
<h5 id="Update测试方法"><a href="#Update测试方法" class="headerlink" title="Update测试方法:"></a>Update测试方法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testUpdateUser()&#123;	</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	User u = (User)s.get(User.class, 2);	</div><div class="line">	s.getTransaction().commit();		</div><div class="line">	u.setName(&quot;user&quot;);</div><div class="line">	u.getGroup().setName(&quot;agggg&quot;);	</div><div class="line">	Session s2 = sf.getCurrentSession();</div><div class="line">	s2.beginTransaction();</div><div class="line">	//update方法会级联修改Group</div><div class="line">	s2.update(u);	</div><div class="line">	s2.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://i.imgur.com/B0M0ggw.png" alt=""></p>
</blockquote>
<h5 id="Delete测试方法："><a href="#Delete测试方法：" class="headerlink" title="Delete测试方法："></a>Delete测试方法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testDeleteUser()&#123;	</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction(); </div><div class="line">	User u = (User)s.load(User.class, 2);</div><div class="line">	s.delete(u);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://i.imgur.com/csGrEYW.png" alt=""><br>可以看到将所有的user都删除了，grouop也删除除了，因为UserUser实体类cascade设置了CascadeType.ALL，所以在删除User时也会级联删除Group，同时Group实体类cascade也设置了CascadeType.ALL，所以会级联删除User。所以结果会是删除所有的同组user及所在组的group记录</p>
</blockquote>
<p>实际应用中这种操作往往是不合理的，下面介绍打破这种级联删除的方法,<br>方法1： 手动将User对象的Group属性设置为null，打破级联关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testDeleteUser()&#123;			</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction(); </div><div class="line">	User u = (User)s.load(User.class, 2);</div><div class="line">	//打破关联关系，避免级联删除</div><div class="line">	u.setGroup(null);</div><div class="line">	s.delete(u);</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><img src="https://i.imgur.com/2j4fbie.png" alt=""></p>
</blockquote>
<p>方法2： 使用HQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testDeleteUser()&#123;		</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction(); </div><div class="line">	User u = (User)s.load(User.class, 2);</div><div class="line">	s.delete(u);	</div><div class="line">	//使用HQL</div><div class="line">	/*s.createQuery(&quot;delete from User u  where u.id =2&quot;).executeUpdate();*/</div><div class="line">	s.getTransaction().commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>注意：cascade的属性指明做什么操作的时候跟关联的对象是绑在一起的，如果属性设置的persist，那么persist操作时对象是绑定在一起的，如果属性设置的是merge，那么merge操作时对象是绑定在一起的，如果属性设置的是refresh，那么refresh操作时对象是绑定在一起的，如果属性设置的是remove，对于hibernate来说delete操作时对象是绑定在一起的，会与EntityManager(JPA/EJB3)来说remove操作时对象是绑定在一起的</em></p>
<ul>
<li>fetch属性设置<ul>
<li>getch可以设定持久化查询操作时对于关联对象的级联操作</li>
<li>对于一对多关系，多的那一方默认值为fetch=FetchType.LAZY(不级联查询)，一的那一方默认值为fetch=FetchType.EAGER</li>
<li>取值范围：FetchType.LAZY，FetchType.EAGER</li>
</ul>
</li>
</ul>
<h4 id="fetch使用示例"><a href="#fetch使用示例" class="headerlink" title="fetch使用示例"></a>fetch使用示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testGetUser()&#123;	</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	User u = (User)s.get(User.class, 2);</div><div class="line">	System.out.println(u.getGroup().getName());</div><div class="line">	s.getTransaction().commit();		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://i.imgur.com/YvFzjRn.png" alt=""><br>User默认的FetchType为EAGER(级联查询)，所以可以取到Group的信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testGetGroup()&#123;	</div><div class="line">	testSaveGroup();	</div><div class="line">	Session s = sf.getCurrentSession();</div><div class="line">	s.beginTransaction();</div><div class="line">	Group g = (Group)s.get(Group.class, 1);</div><div class="line">	s.getTransaction().commit();	</div><div class="line">	System.out.println(g.getName());</div><div class="line">	System.out.println(g.getUsers().size());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在测试GetGroup方法，当打印g.getUsers().size()时，会报错，因为Group的FetchType默认为LAZY，所以不会去取group下的User的信息，session中不存在user的信息，使用时会报错</p>
</blockquote>
<p>将Group的FetchType改为EAGER重新测试</p>
<blockquote>
<p><img src="https://i.imgur.com/jkUTS9y.png" alt=""><br>会进行级联查询，取出group下的user信息</p>
</blockquote>
<p><em>注意：使用fetch时尽量不要双方都设置为EAGER，有可能会发出多余的查询语句；另外双方都设置fetch的时候需要谨慎，结合具体应用，一般用LAZY不使用EAGER，在多方数量不多的时候可以考虑使用，因为需要级联取出的数量不多，对效率影响较小</em></p>
<h4 id="实验总结："><a href="#实验总结：" class="headerlink" title="实验总结："></a>实验总结：</h4><ul>
<li><p>映射模型</p>
<ul>
<li>jpa annotation</li>
<li>hibernate annotation extension</li>
<li>hibernate xml</li>
<li>jpaxml</li>
</ul>
</li>
<li><p>编程接口</p>
<ul>
<li>jpa</li>
<li>hibernate</li>
</ul>
</li>
<li>数据查询语言<ul>
<li>HQL</li>
<li>EJBQL(JPQL)</li>
</ul>
</li>
<li>如果想要做删除或更新，应先做load(get)，然后对对象进行更新。除非精确知道ID</li>
<li>如果想要消除关联关系，先设定关系为null，再删除对应记录，否则有可能会产生垃圾数据</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate一对多双向外键关联的CRUD操作&quot;&gt;&lt;a href=&quot;#Hibernate一对多双向外键关联的CRUD操作&quot; class=&quot;headerlink&quot; title=&quot;Hibernate一对多双向外键关联的CRUD操作&quot;&gt;&lt;/a&gt;Hibernate一对多双向外键关联的CRUD操作&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在使用Hibernate内置接口或JPA接口进行CRUD操作时，实体类的映射设置，会影响CRUD的操作结果。本文的内容就是探讨cascade和fetch属性设置对CRUD操作的影响，具体内容如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="CRUD" scheme="http://yoursite.com/tags/CRUD/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象关联之多对多关联</title>
    <link href="http://yoursite.com/2017/08/03/Hibernate_Many2Many/"/>
    <id>http://yoursite.com/2017/08/03/Hibernate_Many2Many/</id>
    <published>2017-08-03T03:33:13.000Z</published>
    <updated>2017-09-15T01:25:27.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate多对多外键关联配置"><a href="#Hibernate多对多外键关联配置" class="headerlink" title="Hibernate多对多外键关联配置"></a>Hibernate多对多外键关联配置</h3><ul>
<li>Annotation多对多单向外键关联配置<ul>
<li>选择实体类一方添加对方对象的Set集合属性</li>
<li>在Set集合属性的get方法上添加@ManyToMany注解</li>
</ul>
</li>
</ul>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">//Student实体类</div><div class="line">@Entity</div><div class="line">public class Student &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Teacher实体类</div><div class="line">@Entity</div><div class="line">public class Teacher &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;Student&gt; students = new HashSet&lt;Student&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToMany</div><div class="line">	@JoinTable(name = &quot;t_s&quot;, joinColumns = &#123; @JoinColumn(name = &quot;teacher_id&quot;) &#125;, inverseJoinColumns = &#123;</div><div class="line">			@JoinColumn(name = &quot;student_id&quot;) &#125;)</div><div class="line">	public Set&lt;Student&gt; getStudents() &#123;</div><div class="line">		return students;</div><div class="line">	&#125; </div><div class="line"></div><div class="line">	public void setStudents(Set&lt;Student&gt; students) &#123;</div><div class="line">		this.students = students;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注解@JoinTable说明：指明生成的中间表的名称及生成的中间表的字段名称，若不指明，默认生成的中间表名称为teacher_student,字段名为teacher_id和student_id<br>如果表的主键为组合主键，则生成的中间表会包含组合主键</p>
</blockquote>
<ul>
<li>Annotation多对多双向外键关联配置（很少使用）<ul>
<li>实体类双方添加对方对象的Set集合属性</li>
<li>在Set集合属性的get方法上添加@ManyToMany注解</li>
<li>在其中一方@ManyToMany注解设置mappedBy属性</li>
</ul>
</li>
</ul>
<!-- more --> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">//Student实体类</div><div class="line">@Entity</div><div class="line">public class Student &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;Teacher&gt; teachers = new HashSet&lt;Teacher&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Many2Many(mappedBy=&quot;students&quot;)</div><div class="line">	public Set&lt;Student&gt; getTeachers() &#123;</div><div class="line">		return teachers;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTeachers(Set&lt;Teacher&gt; teachers) &#123;</div><div class="line">		this.teachers = teachers;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Teacher实体类</div><div class="line">@Entity</div><div class="line">public class Teacher &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;Student&gt; students = new HashSet&lt;Student&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToMany</div><div class="line">	@JoinTable(name = &quot;t_s&quot;, joinColumns = &#123; @JoinColumn(name = &quot;teacher_id&quot;) &#125;, inverseJoinColumns = &#123;</div><div class="line">			@JoinColumn(name = &quot;student_id&quot;) &#125;)</div><div class="line">	public Set&lt;Student&gt; getStudents() &#123;</div><div class="line">		return students;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStudents(Set&lt;Student&gt; students) &#123;</div><div class="line">		this.students = students;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate多对多外键关联配置&quot;&gt;&lt;a href=&quot;#Hibernate多对多外键关联配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate多对多外键关联配置&quot;&gt;&lt;/a&gt;Hibernate多对多外键关联配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Annotation多对多单向外键关联配置&lt;ul&gt;
&lt;li&gt;选择实体类一方添加对方对象的Set集合属性&lt;/li&gt;
&lt;li&gt;在Set集合属性的get方法上添加@ManyToMany注解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="多对多关联" scheme="http://yoursite.com/tags/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象关联之组件关联</title>
    <link href="http://yoursite.com/2017/08/03/Hibernate_component/"/>
    <id>http://yoursite.com/2017/08/03/Hibernate_component/</id>
    <published>2017-08-02T16:12:03.000Z</published>
    <updated>2017-08-31T02:41:59.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate对象关联之组件关联"><a href="#Hibernate对象关联之组件关联" class="headerlink" title="Hibernate对象关联之组件关联"></a>Hibernate对象关联之组件关联</h3><ul>
<li>Annotation组件关联配置<ul>
<li>添加组件类</li>
<li>实体类中添加组件类对象属性，并在get方法上添加注解@Embedded</li>
</ul>
</li>
</ul>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">//Wife组件类</div><div class="line">public class Wife &#123;</div><div class="line">	</div><div class="line">	private String wifeName;</div><div class="line">	private int age;</div><div class="line">	</div><div class="line">	public String getwifeName() &#123;</div><div class="line">		return wifeName;</div><div class="line">	&#125;</div><div class="line">	public void setwifeName(String wifeName) &#123;</div><div class="line">		this.wifeName = wifeName;</div><div class="line">	&#125;</div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Husband实体类</div><div class="line">@Entity</div><div class="line">public class Husband &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Wife wife;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Embedded</div><div class="line">	public Wife getWife() &#123;</div><div class="line">		return wife;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setWife(Wife wife) &#123;</div><div class="line">		this.wife = wife;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：组件映射用于将一对一的两个对象映射在一张表中，此例中会生成一张名为Husband的数据表，表中包含wifename和age列</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate对象关联之组件关联&quot;&gt;&lt;a href=&quot;#Hibernate对象关联之组件关联&quot; class=&quot;headerlink&quot; title=&quot;Hibernate对象关联之组件关联&quot;&gt;&lt;/a&gt;Hibernate对象关联之组件关联&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Annotation组件关联配置&lt;ul&gt;
&lt;li&gt;添加组件类&lt;/li&gt;
&lt;li&gt;实体类中添加组件类对象属性，并在get方法上添加注解@Embedded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="组件关联" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象关联之一对多&amp;多对一关联</title>
    <link href="http://yoursite.com/2017/08/02/Hibernate_one2many_many2one_uni_fk/"/>
    <id>http://yoursite.com/2017/08/02/Hibernate_one2many_many2one_uni_fk/</id>
    <published>2017-08-02T03:33:13.000Z</published>
    <updated>2017-08-31T02:33:25.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate一对多单向外键关联配置"><a href="#Hibernate一对多单向外键关联配置" class="headerlink" title="Hibernate一对多单向外键关联配置"></a>Hibernate一对多单向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>关联对象处于一方的实体类添加对方对象的Set属性(一对多)</li>
<li>关联对象属性的get方法上添加注解@OneToMany，@JoinColumn注解用于指明生成表中外键字段的名称</li>
</ul>
</li>
</ul>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">//Group实体类</div><div class="line">@Entity</div><div class="line">public class Group &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;User&gt; users = new HashSet&lt;User&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@OneToMany</div><div class="line">	@JoinColumn(name=&quot;groupId&quot;)</div><div class="line">	public Set&lt;User&gt; getUsers() &#123;</div><div class="line">		return users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsers(Set&lt;User&gt; users) &#123;</div><div class="line">		this.users = users;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//User实体类</div><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：实体类中添加@JoinColumn(name=”groupId”)注解，如果不添加此注解，hibernate会将一对多关系解释为多对多的一种特殊方式，会通过建中间表的形式实现关联关系。<br>添加注解后生成的User表存在一列groupId，用于存储用户所在的组</p>
</blockquote>
<h3 id="Hibernate多对一单向外键关联配置"><a href="#Hibernate多对一单向外键关联配置" class="headerlink" title="Hibernate多对一单向外键关联配置"></a>Hibernate多对一单向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>关联对象处于多方的实体类添加对方对象属性</li>
<li>关联对象属性的get方法上添加注解@ManyToOne</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">//Group实体类</div><div class="line">@Entity</div><div class="line">public class Group &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//User实体类</div><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Group group;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToOne</div><div class="line">	public Group getGroup() &#123;</div><div class="line">		return group;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroup(Group group) &#123;</div><div class="line">		this.group = group;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在未添加@JoinColumn生成的User表会自动生成一列group_id，用于记录所属的组</p>
</blockquote>
<h3 id="Hibernate一对多多对一双向外键关联配置"><a href="#Hibernate一对多多对一双向外键关联配置" class="headerlink" title="Hibernate一对多多对一双向外键关联配置"></a>Hibernate一对多多对一双向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>关联对象双方添加对方对象属性，其中一方添加的是对方的Set集合</li>
<li>关联对象属性的get方法上添加注解，一方添加@OneToMany注解，多方添加@ManyToOne注解</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">//Group实体类</div><div class="line">@Entity</div><div class="line">public class Group &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Set&lt;User&gt; users = new HashSet&lt;User&gt;();</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@OneToMany(mappedBy=&quot;group&quot;)</div><div class="line">	public Set&lt;User&gt; getUsers() &#123;</div><div class="line">		return users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsers(Set&lt;User&gt; users) &#123;</div><div class="line">		this.users = users;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//User实体类</div><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Group group;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ManyToOne</div><div class="line">	public Group getGroup() &#123;</div><div class="line">		return group;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroup(Group group) &#123;</div><div class="line">		this.group = group;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Group实体类添加的注解@OneToMany(mappedBy=”group”)说明：指明双向关联关系是由对应User类的group属性主导（在User表中建立指向Group的外键），生成的User表中自动生成一列group_id，记录用户所属的组<br>凡是双向关联关系必设mappedBy</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate一对多单向外键关联配置&quot;&gt;&lt;a href=&quot;#Hibernate一对多单向外键关联配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate一对多单向外键关联配置&quot;&gt;&lt;/a&gt;Hibernate一对多单向外键关联配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Annotation单向外键关联配置&lt;ul&gt;
&lt;li&gt;关联对象处于一方的实体类添加对方对象的Set属性(一对多)&lt;/li&gt;
&lt;li&gt;关联对象属性的get方法上添加注解@OneToMany，@JoinColumn注解用于指明生成表中外键字段的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="一对多关联" scheme="http://yoursite.com/tags/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象关联之一对一关联</title>
    <link href="http://yoursite.com/2017/08/01/Hibernate_one2one_uni_fk/"/>
    <id>http://yoursite.com/2017/08/01/Hibernate_one2one_uni_fk/</id>
    <published>2017-08-01T03:47:29.000Z</published>
    <updated>2017-08-31T01:54:19.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate单向外键关联配置"><a href="#Hibernate单向外键关联配置" class="headerlink" title="Hibernate单向外键关联配置"></a>Hibernate单向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>实体类中添加关联对象</li>
<li>关联对象属性的get方法上添加注解@OneToOne，@JoinColumn注解用于指明生成表中外键字段的名称</li>
</ul>
</li>
</ul>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class Husband &#123;</div><div class="line">	</div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Wife wife;</div><div class="line">	</div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">	@OneToOne</div><div class="line">	@JoinColumn(name=&quot;wifeId&quot;)</div><div class="line">	public Wife getWife() &#123;</div><div class="line">		return wife;</div><div class="line">	&#125;</div><div class="line">	public void setWife(Wife wife) &#123;</div><div class="line">		this.wife = wife;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>XML单向外键关联配置<ul>
<li>创建实体类</li>
<li>xml中配置单向外键关联关系，配置如下：</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</div><div class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-mapping package=&quot;com.lidolid.hibernate.model&quot;&gt;</div><div class="line">	&lt;class name=&quot;StuIdCard&quot; table=&quot;StuIdCard&quot; dynamic-update=&quot;true&quot;&gt;</div><div class="line">		&lt;id name=&quot;id&quot;&gt;</div><div class="line">			&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line">		&lt;property name=&quot;num&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;many-to-one name=&quot;student&quot; column=&quot;studentId&quot; unique=&quot;true&quot;&gt;&lt;/many-to-one&gt;</div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：many-to-one属性中，name是指实体类中用来关联的对象，column是指生成表中外键字段的名称，unique=”true”说明是一对一关系</p>
</blockquote>
<h3 id="Hibernate双向外键关联配置"><a href="#Hibernate双向外键关联配置" class="headerlink" title="Hibernate双向外键关联配置"></a>Hibernate双向外键关联配置</h3><ul>
<li>Annotation单向外键关联配置<ul>
<li>另一方实体类中添加关联对象</li>
<li>关联对象属性的get方法上添加注解@OneToOne，@JoinColumn注解用于指明生成表中外键字段的名称</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">//Husband实体类</div><div class="line">@Entity</div><div class="line">public class Husband &#123;</div><div class="line">	</div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Wife wife;</div><div class="line">	</div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">	@OneToOne</div><div class="line">	@JoinColumn(name=&quot;wifeId&quot;)</div><div class="line">	public Wife getWife() &#123;</div><div class="line">		return wife;</div><div class="line">	&#125;</div><div class="line">	public void setWife(Wife wife) &#123;</div><div class="line">		this.wife = wife;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Wife实体类</div><div class="line">@Entity</div><div class="line">public class Wife &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private Husband husband;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@OneToOne(mappedBy=&quot;wife&quot;)</div><div class="line">	public Husband getHusband() &#123;</div><div class="line">		return husband;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setHusband(Husband husband) &#123;</div><div class="line">		this.husband = husband;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>OneToOne属性mappedBy=”wife”说明，表明双向关联关系以Husband类的wife做主导，<strong>凡是双向关联关系，都要设置mappedBy</strong></p>
</blockquote>
<ul>
<li>XML双向外键关联配置<ul>
<li>关联双方添加对方对象属性</li>
<li>关联双方的model.hbm.xml文件中添加many-to-one、one-to-one、property-ref属性</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">//Student实体类</div><div class="line">public class Student &#123;</div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	private StuIdCard stuIdCard;</div><div class="line">	</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public StuIdCard getStuIdCard() &#123;</div><div class="line">		return stuIdCard;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStuIdCard(StuIdCard stuIdCard) &#123;</div><div class="line">		this.stuIdCard = stuIdCard;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//StuIdCard实体类</div><div class="line">public class StuIdCard &#123;</div><div class="line">	private int id;</div><div class="line">	private String num;</div><div class="line">	private Student student;</div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">	public String getNum() &#123;</div><div class="line">		return num;</div><div class="line">	&#125;</div><div class="line">	public void setNum(String num) &#123;</div><div class="line">		this.num = num;</div><div class="line">	&#125;</div><div class="line">	public Student getStudent() &#123;</div><div class="line">		return student;</div><div class="line">	&#125;</div><div class="line">	public void setStudent(Student student) &#123;</div><div class="line">		this.student = student;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Student实体类配置文件</div><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</div><div class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-mapping package=&quot;com.lidolid.hibernate.model&quot;&gt;</div><div class="line">	&lt;class name=&quot;Student&quot; table=&quot;student&quot; dynamic-update=&quot;true&quot;&gt;</div><div class="line">		&lt;!-- 映射主键 --&gt;</div><div class="line">		&lt;!-- &lt;id name=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt; --&gt;</div><div class="line">		&lt;id name=&quot;id&quot;&gt;</div><div class="line">			&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line">		&lt;property name=&quot;name&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;one-to-one name =&quot;stuIdCard&quot; property-ref=&quot;student&quot;&gt;&lt;/one-toone&gt;</div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div><div class="line"></div><div class="line">//StuIdCard类配置文件</div><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</div><div class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-mapping package=&quot;com.lidolid.hibernate.model&quot;&gt;</div><div class="line">	&lt;class name=&quot;StuIdCard&quot; table=&quot;StuIdCard&quot; dynamic-update=&quot;true&quot;&gt;</div><div class="line">		&lt;id name=&quot;id&quot;&gt;</div><div class="line">			&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line">		&lt;property name=&quot;num&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;many-to-one name=&quot;student&quot; column=&quot;studentId&quot; unique=&quot;true&quot;&gt;&lt;/many-to-one&gt;</div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：property-ref=”student”表明双向关联关系是与本类(Student)关联的类StuIdCard中的student属性主导的</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate单向外键关联配置&quot;&gt;&lt;a href=&quot;#Hibernate单向外键关联配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate单向外键关联配置&quot;&gt;&lt;/a&gt;Hibernate单向外键关联配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Annotation单向外键关联配置&lt;ul&gt;
&lt;li&gt;实体类中添加关联对象&lt;/li&gt;
&lt;li&gt;关联对象属性的get方法上添加注解@OneToOne，@JoinColumn注解用于指明生成表中外键字段的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="单向外键关联" scheme="http://yoursite.com/tags/%E5%8D%95%E5%90%91%E5%A4%96%E9%94%AE%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>SchemaExport的使用</title>
    <link href="http://yoursite.com/2017/07/31/Hibernate_schemaexport/"/>
    <id>http://yoursite.com/2017/07/31/Hibernate_schemaexport/</id>
    <published>2017-07-31T03:58:17.000Z</published>
    <updated>2017-08-22T14:47:15.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SchemaExport的使用"><a href="#SchemaExport的使用" class="headerlink" title="SchemaExport的使用"></a>SchemaExport的使用</h3><p>&emsp;&emsp;Hibernate中SchemaExport可以用来在程序中控制生成的建表语句，跟hibernate.cfg.xml配置文件中如下配置</p>
<blockquote>
<p>&lt;property name=”hbm2ddl.auto”&gt;create &lt;/property&gt;</p>
</blockquote>
<p>有着相同的作用。hibernate 5.x的版本中，SchemaExport的用法不同于以前的版本，而网上的诸多资料都还停留在以前的3.x， 4.x的API中，这里我简单说一下5.x版本中SchemaExport的用法。<br><a id="more"></a><br>hibernate 5.x的版本中使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().configure().build();</div><div class="line">Metadata metadata = new MetadataSources(serviceRegistry).buildMetadata();</div><div class="line">SchemaExport schemaExport = new SchemaExport();</div><div class="line">schemaExport.create(EnumSet.of(TargetType.DATABASE), metadata);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SchemaExport的使用&quot;&gt;&lt;a href=&quot;#SchemaExport的使用&quot; class=&quot;headerlink&quot; title=&quot;SchemaExport的使用&quot;&gt;&lt;/a&gt;SchemaExport的使用&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Hibernate中SchemaExport可以用来在程序中控制生成的建表语句，跟hibernate.cfg.xml配置文件中如下配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;property name=”hbm2ddl.auto”&amp;gt;create &amp;lt;/property&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有着相同的作用。hibernate 5.x的版本中，SchemaExport的用法不同于以前的版本，而网上的诸多资料都还停留在以前的3.x， 4.x的API中，这里我简单说一下5.x版本中SchemaExport的用法。&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="chemaExport" scheme="http://yoursite.com/tags/chemaExport/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对象的三种状态</title>
    <link href="http://yoursite.com/2017/07/29/Hibernate_states3/"/>
    <id>http://yoursite.com/2017/07/29/Hibernate_states3/</id>
    <published>2017-07-29T15:47:15.000Z</published>
    <updated>2017-08-16T02:22:10.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate对象的三种状态"><a href="#Hibernate对象的三种状态" class="headerlink" title="Hibernate对象的三种状态"></a>Hibernate对象的三种状态</h3><p>&emsp;&emsp;在Hibernate中，对象有三种状态：临 时状态(Transient)、持久状态(Persistent)和游离状态(Detached)。处于持久态的对象也称为 PO(PersistenceObject),临时对象和游离对象也称为VO(ValueObject)。</p>
<p><img src="http://i.imgur.com/ejggriH.png" alt=""><br><a id="more"></a></p>
<h5 id="三种状态："><a href="#三种状态：" class="headerlink" title="三种状态："></a>三种状态：</h5><ul>
<li>Transient：内存中的一个对象，没有id，缓存中也没有</li>
<li>persistent：内存中有，缓存中有，数据库有，有id</li>
<li>detached： 内存有，缓存没有，数据库有，有id</li>
</ul>
<h5 id="三种状态如何区分："><a href="#三种状态如何区分：" class="headerlink" title="三种状态如何区分："></a>三种状态如何区分：</h5><ul>
<li>有没有id</li>
<li>id在数据库中有没有</li>
<li>在内存中有没有(session缓存)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate对象的三种状态&quot;&gt;&lt;a href=&quot;#Hibernate对象的三种状态&quot; class=&quot;headerlink&quot; title=&quot;Hibernate对象的三种状态&quot;&gt;&lt;/a&gt;Hibernate对象的三种状态&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在Hibernate中，对象有三种状态：临 时状态(Transient)、持久状态(Persistent)和游离状态(Detached)。处于持久态的对象也称为 PO(PersistenceObject),临时对象和游离对象也称为VO(ValueObject)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ejggriH.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="对象状态" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>openSession()跟getCurrentSession()方法之间的区别</title>
    <link href="http://yoursite.com/2017/07/29/Hibernate_session/"/>
    <id>http://yoursite.com/2017/07/29/Hibernate_session/</id>
    <published>2017-07-29T04:43:20.000Z</published>
    <updated>2017-08-16T05:34:47.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hibernate中openSession-跟getCurrentSession-方法之间的区别"><a href="#hibernate中openSession-跟getCurrentSession-方法之间的区别" class="headerlink" title="hibernate中openSession()跟getCurrentSession()方法之间的区别"></a>hibernate中openSession()跟getCurrentSession()方法之间的区别</h3><p>&emsp;&emsp;openSession()和getCurrentSession()都用来产生session对象，区别如下：</p>
<ul>
<li>采用getCurrentSession()创建的Session会绑定到当前的线程中去，而采用OpenSession()则不会。</li>
<li>采用getCurrentSession()创建的Session在commit或rollback后会自动关闭，采用OpenSession()必须手动关闭。</li>
</ul>
<a id="more"></a>
<ul>
<li>采用getCurrentSession()需要在Hibernate.cfg.xml配置文件中加入如下配置：<blockquote>
<p>如果是本地事物，及JDBC一个数据库：<br>&lt;propety name=”Hibernate.current_session_context_class”&gt;thread&lt;/propety&gt;<br>如果是全局事物，及jta事物、多个数据库资源或事物资源：<br>&lt;propety name=”Hibernate.current_session_context_class”&gt;jta&lt;/propety&gt;<br><img src="http://i.imgur.com/b3GbF5Z.png" alt=""><br>JTA(Java transaction api)用于管理分布式数据库之间事务，tomcat无法提供</p>
</blockquote>
</li>
</ul>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul>
<li>Session的理解：<br>&emsp;&emsp;Session是管理一个数据库的任务单元，可以通过调用Session的方法来实现对数据库的具体操作（增、删、改、查）</li>
<li>Session的主要方法及说明：<ul>
<li>save()</li>
<li>delete()</li>
<li>update()</li>
<li>saveOrUpdate()</li>
<li>load()</li>
<li>get()</li>
<li>clear()：无论是load()还是get()，都会先查找缓存(一级缓存),如果没有才会查找数据库，调用clear()方法可以强制清除session缓存  </li>
<li>flush()：强制进行从内存到数据库的同步</li>
</ul>
</li>
<li>get()和load()的区别：<ul>
<li>不存在对应对象时表现不一样，load()不会报错，get()会报错</li>
<li>load()返回的是代理对象，等到真正使用对象内容时才发出sql语句</li>
<li>get()直接从数据库加载，不会延迟</li>
</ul>
</li>
<li>update()方法：<ul>
<li>用来更新detached对象，更新完之后，对象转换为persistent状态(get后提交，对象转换为detached状态，然后通过set方法设置对象属性的值，再调用session的update方法)</li>
<li>更新Transient对象会报错</li>
<li>可以更新自己设定id的Transient对象，如果数据中存在数据，可以更新。不存在不会报错</li>
<li>如果一个对象是persistent状态，只要设定不同状态，session提交后就会更新（如先get，然后通过实体set方法设定某个属性值，在提交时会同时update数据库中对应的列）</li>
</ul>
</li>
<li><p>使用update()方法进行部分更改</p>
<ul>
<li>xml设定property标签的update属性，Annotation设定@column的updatable属性，设定属性值为true则表明该字段不参与update更新。不过这种方式很少使用，因为不灵活。</li>
<li>使用xml中class的dynamic-update属性，JPA中没有对应的属性。xml中使用时，同一个session可以做到只更改设定属性对应字段，跨session不可以，不过可以使用merge来实现。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Student t = (Student) session.get(Student.class, 1);</div><div class="line">System.out.println(t.getName());</div><div class="line">t.setName(&quot;testUpdate5&quot;);</div><div class="line">session.getTransaction().commit();</div><div class="line"></div><div class="line">//跨session更新</div><div class="line">t.setName(&quot;testUpdate6&quot;);</div><div class="line">Session session1 = sf.getCurrentSession();</div><div class="line">session1.beginTransaction();</div><div class="line">session1.update(t);</div><div class="line">//System.out.println(t.getName());</div><div class="line">session1.getTransaction().commit();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Student t = (Student)session.get(Student.class, 1);</div><div class="line">System.out.println(t.getName());</div><div class="line">t.setName(&quot;testUpdate6&quot;);</div><div class="line">session.getTransaction().commit();</div><div class="line">	</div><div class="line">//跨session更新,并只更新改变字段</div><div class="line">t.setName(&quot;testUpdate7&quot;);</div><div class="line">Session session1 = sf.getCurrentSession();</div><div class="line">session1.beginTransaction();</div><div class="line">session1.merge(t);</div><div class="line">System.out.println(t.getName());</div><div class="line">session1.getTransaction().commit();</div></pre></td></tr></table></figure>
<ul>
<li>使用HQL(建议使用)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Query q = session.createQuery(&quot;update Student s set s.name = &apos;z5&apos; where s.id = 1&quot;);</div><div class="line">q.executeUpdate();</div><div class="line">session.getTransaction().commit();</div></pre></td></tr></table></figure>
</li>
<li><p>clear()方法说明<br>&emsp;&emsp;clear方法会强制清除session缓存，如下如不加session2.clear();则第二次取t2时并不会再进行一次查询操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Session session2 = sf.getCurrentSession();</div><div class="line">session2.beginTransaction();</div><div class="line">Teacher t = (Teacher) session2.load(Teacher.class, 1);</div><div class="line">System.out.println(t.getName());</div><div class="line"></div><div class="line">//	</div><div class="line">session2.clear();</div><div class="line">	</div><div class="line">Teacher t2 = (Teacher) session2.load(Teacher.class, 1);</div><div class="line">System.out.println(t2.getName());</div><div class="line">	</div><div class="line">session2.getTransaction().commit();</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hibernate中openSession-跟getCurrentSession-方法之间的区别&quot;&gt;&lt;a href=&quot;#hibernate中openSession-跟getCurrentSession-方法之间的区别&quot; class=&quot;headerlink&quot; title=&quot;hibernate中openSession()跟getCurrentSession()方法之间的区别&quot;&gt;&lt;/a&gt;hibernate中openSession()跟getCurrentSession()方法之间的区别&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;openSession()和getCurrentSession()都用来产生session对象，区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用getCurrentSession()创建的Session会绑定到当前的线程中去，而采用OpenSession()则不会。&lt;/li&gt;
&lt;li&gt;采用getCurrentSession()创建的Session在commit或rollback后会自动关闭，采用OpenSession()必须手动关闭。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>ID生成策略</title>
    <link href="http://yoursite.com/2017/07/28/Hibernate_ID/"/>
    <id>http://yoursite.com/2017/07/28/Hibernate_ID/</id>
    <published>2017-07-27T17:19:26.000Z</published>
    <updated>2017-08-15T02:21:20.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate中ID生成策略"><a href="#Hibernate中ID生成策略" class="headerlink" title="Hibernate中ID生成策略"></a>Hibernate中ID生成策略</h3><p>&emsp;&emsp;在开发中，数据表经常使用到ID，并以此作为主键。在插入时，ID一般不需要手动指定，可以由数据库自动生成。实际开发中，我们一般都是先建数据表，再由数据表生成实体类，研究Hibernate如何生成ID的意义就是搞清楚应该建立什么样的表与实体类映射。<br><a id="more"></a></p>
<ul>
<li><p><strong>xml生成ID</strong></p>
<ul>
<li>在id标签内添加字标签，如下  <blockquote>
<p>&lt;generator class=”uuid”&gt;&lt;/generator&gt;</p>
</blockquote>
</li>
<li>class取值，如下：<ul>
<li>native：mysql中生成的id属性auto_increment，oracle中id属性为sequence，sqlserver中id属性为identity</li>
<li>identity</li>
<li>sequence</li>
<li>uuid</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Annotation生成ID</strong></p>
<ul>
<li>在ID属性的get方法上添加注解@GeneratedValue</li>
<li>GeneratedValue取值：<ul>
<li>AUTO：默认值，同xml的native  </li>
<li>IDENTITY：@GeneratedValue(strategy=GenerationType.IDENTITY)</li>
<li>SEQUENCE:假如不指明，所有的表会共用一个sequence，使用自定义sequence名字来指明不同的表使用不同的sequence。在实体类上加上自定义sequence说明,在getId方法指明自定义generator名称<blockquote>
<p>@SequenceGenerator(name=”teacherSEQ”, sequenceName=”teacherSEQ_DB”)<br>@GeneratedValue(strategy=GenerationType.SEQUENCE, generator=”teacherSEQ”)</p>
</blockquote>
</li>
<li>TABLE:数据库生成一张独立地表来记录各个表需要的主键的值，每次取完后会进行自增,用法和sequence相似，需在实体类上方添加主键字段说明，在getId方法指明generator名称<blockquote>
<p>@@javax.persistence.TableGenerator(name = “Teacher_GEN”, table = “GENERATOR_TABLE”, pkColumnName = “pk_key”, valueColumnName = “pk_value”, pkColumnValue = “Teacher”, allocationSize = 1)<br>@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = “Teacher_GEN”)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>联合主键</p>
<ul>
<li><p>xml联合主键配置</p>
<ul>
<li>添加主键类</li>
<li>配置mdel.hbm.xml，内容如下：<blockquote>
<p>&lt;composite-id name=”pk” class=”com.lidolid.hibernate.model.StudentPK”&gt;<br>&lt;key-property name=”id” /&gt;<br>&lt;key-property name=”name” /&gt;<br>&lt;/composite-id/&gt;</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Annotation联合主键配置</p>
<ol>
<li><p>@Embeddable + @Id</p>
<ul>
<li>添加主键类</li>
<li>主键类添加@Embeddable注解</li>
<li>实体类中主键对象的get方法上添加注解@Id</li>
</ul>
</li>
<li><p>@EmbeddedId</p>
<ul>
<li>添加主键类</li>
<li>实体类中主键对象的get方法上添加注解@EmbeddedId</li>
</ul>
</li>
<li><p>@Id + @IdClass</p>
<ul>
<li>添加主键类</li>
<li>实体类中主键属性的get方法上添加注解@Id</li>
<li>实体类添加注解@IdClass</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h5 id="实验过程中遇到的问题"><a href="#实验过程中遇到的问题" class="headerlink" title="实验过程中遇到的问题"></a>实验过程中遇到的问题</h5><p>&emsp;&emsp;在通过xml配置联合主键是遇到问题如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR DriverManagerConnectionProviderImpl:92 - Collection leak detected: there are 1 unclosed connections upon shutting down pool jdbc:mysql://localhost/hibernate</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;一直没找到解决办法，最后发现是hibernate.cfg.xml配置文件中实体类的映射忘记修改了，修改正确后，hibernate正常建表，主键。遇到此类问题，可以作为一个排查的方向。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate中ID生成策略&quot;&gt;&lt;a href=&quot;#Hibernate中ID生成策略&quot; class=&quot;headerlink&quot; title=&quot;Hibernate中ID生成策略&quot;&gt;&lt;/a&gt;Hibernate中ID生成策略&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在开发中，数据表经常使用到ID，并以此作为主键。在插入时，ID一般不需要手动指定，可以由数据库自动生成。实际开发中，我们一般都是先建数据表，再由数据表生成实体类，研究Hibernate如何生成ID的意义就是搞清楚应该建立什么样的表与实体类映射。&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="ID" scheme="http://yoursite.com/tags/ID/"/>
    
      <category term="联合主键" scheme="http://yoursite.com/tags/%E8%81%94%E5%90%88%E4%B8%BB%E9%94%AE/"/>
    
  </entry>
  
</feed>
