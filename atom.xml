<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hal的博客</title>
  <subtitle>愿你走出半生，仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-15T14:31:21.917Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hibernate对象的三种状态</title>
    <link href="http://yoursite.com/2017/07/29/Hibernate_states3/"/>
    <id>http://yoursite.com/2017/07/29/Hibernate_states3/</id>
    <published>2017-07-29T15:47:15.000Z</published>
    <updated>2017-08-15T14:31:21.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate对象的三种状态"><a href="#Hibernate对象的三种状态" class="headerlink" title="Hibernate对象的三种状态"></a>Hibernate对象的三种状态</h3><p>&emsp;&emsp;在Hibernate中，对象有三种状态：临 时状态(Transient)、持久状态(Persistent)和游离状态(Detached)。处于持久态的对象也称为 PO(PersistenceObject),临时对象和游离对象也称为VO(ValueObject)。</p>
<p><img src="http://i.imgur.com/ejggriH.png" alt=""></p>
<h5 id="三种状态："><a href="#三种状态：" class="headerlink" title="三种状态："></a>三种状态：</h5><ul>
<li>Transient：内存中的一个对象，没有id，缓存中也没有</li>
<li>persistent：内存中有，缓存中有，数据库有，有id</li>
<li>detached： 内存有，缓存没有，数据库有，有id</li>
</ul>
<h5 id="三种状态如何区分："><a href="#三种状态如何区分：" class="headerlink" title="三种状态如何区分："></a>三种状态如何区分：</h5><ul>
<li>有没有id</li>
<li>id在数据库中有没有</li>
<li>在内存中有没有(session缓存)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate对象的三种状态&quot;&gt;&lt;a href=&quot;#Hibernate对象的三种状态&quot; class=&quot;headerlink&quot; title=&quot;Hibernate对象的三种状态&quot;&gt;&lt;/a&gt;Hibernate对象的三种状态&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在H
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="对象状态" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>openSession()跟getCurrentSession()方法之间的区别</title>
    <link href="http://yoursite.com/2017/07/29/Hibernate_session/"/>
    <id>http://yoursite.com/2017/07/29/Hibernate_session/</id>
    <published>2017-07-29T04:43:20.000Z</published>
    <updated>2017-08-16T02:17:25.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hibernate中openSession-跟getCurrentSession-方法之间的区别"><a href="#hibernate中openSession-跟getCurrentSession-方法之间的区别" class="headerlink" title="hibernate中openSession()跟getCurrentSession()方法之间的区别"></a>hibernate中openSession()跟getCurrentSession()方法之间的区别</h3><p>&emsp;&emsp;openSession()和getCurrentSession()都用来产生session对象，区别如下：</p>
<ul>
<li>采用getCurrentSession()创建的Session会绑定到当前的线程中去，而采用OpenSession()则不会。</li>
<li>采用getCurrentSession()创建的Session在commit或rollback后会自动关闭，采用OpenSession()必须手动关闭。</li>
<li>采用getCurrentSession()需要在Hibernate.cfg.xml配置文件中加入如下配置：<blockquote>
<p>如果是本地事物，及JDBC一个数据库：<br>&lt;propety name=”Hibernate.current_session_context_class”&gt;thread&lt;/propety&gt;<br>如果是全局事物，及jta事物、多个数据库资源或事物资源：<br>&lt;propety name=”Hibernate.current_session_context_class”&gt;jta&lt;/propety&gt;<br><img src="http://i.imgur.com/b3GbF5Z.png" alt=""><br>JTA(Java transaction api)用于管理分布式数据库之间事务，tomcat无法提供</p>
</blockquote>
</li>
</ul>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul>
<li>Session的理解：<br>&emsp;&emsp;Session是管理一个数据库的任务单元，可以通过调用Session的方法来实现对数据库的具体操作（增、删、改、查）</li>
<li>Session的主要方法及说明：<ul>
<li>save()</li>
<li>delete()</li>
<li>update()</li>
<li>saveOrUpdate()</li>
<li>load()</li>
<li>get()</li>
<li>clear()：无论是load()还是get()，都会先查找缓存(一级缓存),如果没有才会查找数据库，调用clear()方法可以强制清除session缓存  </li>
<li>flush()：强制进行从内存到数据库的同步</li>
</ul>
</li>
<li>get()和load()的区别：<ul>
<li>不存在对应对象时表现不一样，load()不会报错，get()会报错</li>
<li>load()返回的是代理对象，等到真正使用对象内容时才发出sql语句</li>
<li>get()直接从数据库加载，不会延迟</li>
</ul>
</li>
<li>update()方法：<ul>
<li>用来更新detached对象，更新完之后，对象转换为persistent状态(get后提交，对象转换为detached状态，然后通过set方法设置对象属性的值，再调用session的update方法)</li>
<li>更新Transient对象会报错</li>
<li>可以更新自己设定id的Transient对象，如果数据中存在数据，可以更新。不存在不会报错</li>
<li>如果一个对象是persistent状态，只要设定不同状态，session提交后就会更新（如先get，然后通过实体set方法设定某个属性值，在提交时会同时update数据库中对应的列）</li>
</ul>
</li>
<li><p>使用update()方法进行部分更改</p>
<ul>
<li>xml设定property标签的update属性，Annotation设定@column的updatable属性，设定属性值为true则表明该字段不参与update更新。不过这种方式很少使用，因为不灵活。</li>
<li>使用xml中class的dynamic-update属性，JPA中没有对应的属性。xml中使用时，同一个session可以做到只更改设定属性对应字段，跨session不可以，不过可以使用merge来实现。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Student t = (Student) session.get(Student.class, 1);</div><div class="line">System.out.println(t.getName());</div><div class="line">t.setName(&quot;testUpdate5&quot;);</div><div class="line">session.getTransaction().commit();</div><div class="line"></div><div class="line">//跨session更新</div><div class="line">t.setName(&quot;testUpdate6&quot;);</div><div class="line">Session session1 = sf.getCurrentSession();</div><div class="line">session1.beginTransaction();</div><div class="line">session1.update(t);</div><div class="line">//System.out.println(t.getName());</div><div class="line">session1.getTransaction().commit();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">      Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Student t = (Student)session.get(Student.class, 1);</div><div class="line">System.out.println(t.getName());</div><div class="line">t.setName(&quot;testUpdate6&quot;);</div><div class="line">session.getTransaction().commit();</div><div class="line"></div><div class="line">//跨session更新,并只更新改变字段</div><div class="line">t.setName(&quot;testUpdate7&quot;);</div><div class="line">Session session1 = sf.getCurrentSession();</div><div class="line">session1.beginTransaction();</div><div class="line">session1.merge(t);</div><div class="line">System.out.println(t.getName());</div><div class="line">session1.getTransaction().commit();</div></pre></td></tr></table></figure>
<ul>
<li>使用HQL(建议使用)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Query q = session.createQuery(&quot;update Student s set s.name = &apos;z5&apos; where s.id = 1&quot;);</div><div class="line">q.executeUpdate();</div><div class="line">session.getTransaction().commit();</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hibernate中openSession-跟getCurrentSession-方法之间的区别&quot;&gt;&lt;a href=&quot;#hibernate中openSession-跟getCurrentSession-方法之间的区别&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>ID生成策略</title>
    <link href="http://yoursite.com/2017/07/28/Hibernate_ID/"/>
    <id>http://yoursite.com/2017/07/28/Hibernate_ID/</id>
    <published>2017-07-27T17:19:26.000Z</published>
    <updated>2017-08-15T02:21:20.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate中ID生成策略"><a href="#Hibernate中ID生成策略" class="headerlink" title="Hibernate中ID生成策略"></a>Hibernate中ID生成策略</h3><p>&emsp;&emsp;在开发中，数据表经常使用到ID，并以此作为主键。在插入时，ID一般不需要手动指定，可以由数据库自动生成。实际开发中，我们一般都是先建数据表，再由数据表生成实体类，研究Hibernate如何生成ID的意义就是搞清楚应该建立什么样的表与实体类映射。<br><a id="more"></a></p>
<ul>
<li><p><strong>xml生成ID</strong></p>
<ul>
<li>在id标签内添加字标签，如下  <blockquote>
<p>&lt;generator class=”uuid”&gt;&lt;/generator&gt;</p>
</blockquote>
</li>
<li>class取值，如下：<ul>
<li>native：mysql中生成的id属性auto_increment，oracle中id属性为sequence，sqlserver中id属性为identity</li>
<li>identity</li>
<li>sequence</li>
<li>uuid</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Annotation生成ID</strong></p>
<ul>
<li>在ID属性的get方法上添加注解@GeneratedValue</li>
<li>GeneratedValue取值：<ul>
<li>AUTO：默认值，同xml的native  </li>
<li>IDENTITY：@GeneratedValue(strategy=GenerationType.IDENTITY)</li>
<li>SEQUENCE:假如不指明，所有的表会共用一个sequence，使用自定义sequence名字来指明不同的表使用不同的sequence。在实体类上加上自定义sequence说明,在getId方法指明自定义generator名称<blockquote>
<p>@SequenceGenerator(name=”teacherSEQ”, sequenceName=”teacherSEQ_DB”)<br>@GeneratedValue(strategy=GenerationType.SEQUENCE, generator=”teacherSEQ”)</p>
</blockquote>
</li>
<li>TABLE:数据库生成一张独立地表来记录各个表需要的主键的值，每次取完后会进行自增,用法和sequence相似，需在实体类上方添加主键字段说明，在getId方法指明generator名称<blockquote>
<p>@@javax.persistence.TableGenerator(name = “Teacher_GEN”, table = “GENERATOR_TABLE”, pkColumnName = “pk_key”, valueColumnName = “pk_value”, pkColumnValue = “Teacher”, allocationSize = 1)<br>@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = “Teacher_GEN”)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>联合主键</p>
<ul>
<li><p>xml联合主键配置</p>
<ul>
<li>添加主键类</li>
<li>配置mdel.hbm.xml，内容如下：<blockquote>
<p>&lt;composite-id name=”pk” class=”com.lidolid.hibernate.model.StudentPK”&gt;<br>&lt;key-property name=”id” /&gt;<br>&lt;key-property name=”name” /&gt;<br>&lt;/composite-id/&gt;</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Annotation联合主键配置</p>
<ol>
<li><p>@Embeddable + @Id</p>
<ul>
<li>添加主键类</li>
<li>主键类添加@Embeddable注解</li>
<li>实体类中主键对象的get方法上添加注解@Id</li>
</ul>
</li>
<li><p>@EmbeddedId</p>
<ul>
<li>添加主键类</li>
<li>实体类中主键对象的get方法上添加注解@EmbeddedId</li>
</ul>
</li>
<li><p>@Id + @IdClass</p>
<ul>
<li>添加主键类</li>
<li>实体类中主键属性的get方法上添加注解@Id</li>
<li>实体类添加注解@IdClass</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h5 id="实验过程中遇到的问题"><a href="#实验过程中遇到的问题" class="headerlink" title="实验过程中遇到的问题"></a>实验过程中遇到的问题</h5><p>&emsp;&emsp;在通过xml配置联合主键是遇到问题如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR DriverManagerConnectionProviderImpl:92 - Collection leak detected: there are 1 unclosed connections upon shutting down pool jdbc:mysql://localhost/hibernate</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;一直没找到解决办法，最后发现是hibernate.cfg.xml配置文件中实体类的映射忘记修改了，修改正确后，hibernate正常建表，主键。遇到此类问题，可以作为一个排查的方向。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate中ID生成策略&quot;&gt;&lt;a href=&quot;#Hibernate中ID生成策略&quot; class=&quot;headerlink&quot; title=&quot;Hibernate中ID生成策略&quot;&gt;&lt;/a&gt;Hibernate中ID生成策略&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在开发中，数据表经常使用到ID，并以此作为主键。在插入时，ID一般不需要手动指定，可以由数据库自动生成。实际开发中，我们一般都是先建数据表，再由数据表生成实体类，研究Hibernate如何生成ID的意义就是搞清楚应该建立什么样的表与实体类映射。&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="ID" scheme="http://yoursite.com/tags/ID/"/>
    
      <category term="联合主键" scheme="http://yoursite.com/tags/%E8%81%94%E5%90%88%E4%B8%BB%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate基本配置</title>
    <link href="http://yoursite.com/2017/07/27/Hibernate_cfg1/"/>
    <id>http://yoursite.com/2017/07/27/Hibernate_cfg1/</id>
    <published>2017-07-27T14:42:01.000Z</published>
    <updated>2017-08-10T15:10:35.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate基础配置"><a href="#Hibernate基础配置" class="headerlink" title="Hibernate基础配置"></a>Hibernate基础配置</h3><p>&emsp;&emsp;通过近期的实验，总结一下hibernate的一些基础配置，如下：<br><a id="more"></a></p>
<ul>
<li>hibernate.cfg.xml文件中show_sql和format_sql区别：<ul>
<li>两个属性均有true和false两个取值，当为true时，show_sql将产生的sql语句显示在一行，format_sql将产生的sql进行了格式化</li>
</ul>
</li>
<li>表明和类名不同时，如何进行配置：<ul>
<li>Annotation：在实体@Entity下加一行配置@Table(name=”tableName”)</li>
<li>xml：在映射配置文件(model.hbm.xml)class属性后新增table=”tableName”</li>
</ul>
</li>
<li>实体类中字段名和属性相同，如何进行配置：<ul>
<li>Annotation：相当于默认加了@Basic注解</li>
<li>xml：xml中不需要加column</li>
</ul>
</li>
<li>实体类中字段名和属性不同，如何进行配置：<ul>
<li>Annotation：@column</li>
<li>xml：xml中需要加column</li>
</ul>
</li>
<li>实体类中存在不需要持久化(映射到数据表中)的属性：<ul>
<li>Annotation：在属性的get方法上加注解@Transient，<strong>注意Transient为javax.persistence.Transient，而不是java.beans.Transient</strong></li>
<li>xml：xml文件中不写</li>
</ul>
</li>
<li>映射到日期和时间类型，指定时间精度：<ul>
<li>Annotation：加注解@Temporal(value=”TemporalType.DATE”/TemporalType.TIME/TemporalType.TIMESTAMP)</li>
<li>xml：比较麻烦，不建议使用</li>
</ul>
</li>
<li>映射枚举类型<ul>
<li>Annotation：加注解@Enumerated(EnumType.STRING/EnumType.ORDINAL)，其中STRING表示生成的字段为String类型，ORDINAL表示生成的字段为Integer类型并存储枚举类型的下标值</li>
<li>xml：写转换器，麻烦，不建议使用</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate基础配置&quot;&gt;&lt;a href=&quot;#Hibernate基础配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate基础配置&quot;&gt;&lt;/a&gt;Hibernate基础配置&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;通过近期的实验，总结一下hibernate的一些基础配置，如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate错误：Invalid syntax error “type= MyISAM”</title>
    <link href="http://yoursite.com/2017/07/27/Hibernate_er3/"/>
    <id>http://yoursite.com/2017/07/27/Hibernate_er3/</id>
    <published>2017-07-26T16:43:20.000Z</published>
    <updated>2017-08-10T02:54:55.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate错误：Invalid-syntax-error-“type-MyISAM”-in-DDL-generated-by-Hibernate，错误信息如下："><a href="#Hibernate错误：Invalid-syntax-error-“type-MyISAM”-in-DDL-generated-by-Hibernate，错误信息如下：" class="headerlink" title="Hibernate错误：Invalid syntax error “type= MyISAM” in DDL generated by Hibernate，错误信息如下："></a>Hibernate错误：Invalid syntax error “type= MyISAM” in DDL generated by Hibernate，错误信息如下：</h3><a id="more"></a>
<blockquote>
<p>Caused by:com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException<code>: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB</code> server version for the right syntax to use near ‘type = <code>MyISAM</code>‘ at line 1</p>
</blockquote>
<h4 id="错误原因-："><a href="#错误原因-：" class="headerlink" title="错误原因 ："></a>错误原因 ：</h4><h5 id="hibernate配置文件hibernate-cfg-xml中方言设置问题"><a href="#hibernate配置文件hibernate-cfg-xml中方言设置问题" class="headerlink" title="hibernate配置文件hibernate.cfg.xml中方言设置问题"></a>hibernate配置文件hibernate.cfg.xml中方言设置问题</h5><p>当方言设置为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;</div></pre></td></tr></table></figure></p>
<p>时会报此类错误，因为方言org.hibernate.dialect.MySQLDialect实在MySQL 4.0之前使用的，生成建表语句时会生成type=MyISAM，在MySQL现有版本不建议使用，已被移除。  </p>
<h5 id="MySQL-5-x-使用的方言Hibernate配置如下："><a href="#MySQL-5-x-使用的方言Hibernate配置如下：" class="headerlink" title="MySQL 5.x 使用的方言Hibernate配置如下："></a>MySQL 5.x 使用的方言Hibernate配置如下：</h5><ul>
<li>org.hibernate.dialect.MySQL5Dialect</li>
<li>org.hibernate.dialect.MySQL55ialect</li>
<li>org.hibernate.dialect.MySQL57ialect</li>
</ul>
<p><a href="https://stackoverflow.com/questions/43716068/invalid-syntax-error-type-myisam-in-ddl-generated-by-hibernate" target="_blank" rel="external">参考链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate错误：Invalid-syntax-error-“type-MyISAM”-in-DDL-generated-by-Hibernate，错误信息如下：&quot;&gt;&lt;a href=&quot;#Hibernate错误：Invalid-syntax-error-“type-MyISAM”-in-DDL-generated-by-Hibernate，错误信息如下：&quot; class=&quot;headerlink&quot; title=&quot;Hibernate错误：Invalid syntax error “type= MyISAM” in DDL generated by Hibernate，错误信息如下：&quot;&gt;&lt;/a&gt;Hibernate错误：Invalid syntax error “type= MyISAM” in DDL generated by Hibernate，错误信息如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate错误：Unable to instantiate default tuplizer</title>
    <link href="http://yoursite.com/2017/07/26/Hibernate_er2/"/>
    <id>http://yoursite.com/2017/07/26/Hibernate_er2/</id>
    <published>2017-07-26T15:53:40.000Z</published>
    <updated>2017-08-10T02:54:56.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate错误：Unable-to-instantiate-default-tuplizer，控制台错误信息如下："><a href="#Hibernate错误：Unable-to-instantiate-default-tuplizer，控制台错误信息如下：" class="headerlink" title="Hibernate错误：Unable to instantiate default tuplizer，控制台错误信息如下："></a>Hibernate错误：Unable to instantiate default tuplizer，控制台错误信息如下：</h3><a id="more"></a>
<blockquote>
<p>Caused by: org.hibernate.HibernateException: Unable to instantiate default tuplizer [org.hibernate.tuple.entity.PojoEntityTuplizer]<br>    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructTuplizer(EntityTuplizerFactory.java:108)<br>    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructDefaultTuplizer(EntityTuplizerFactory.java:133)<br>    at org.hibernate.tuple.entity.EntityEntityModeToTuplizerMapping.<init>(EntityEntityModeToTuplizerMapping.java:80)<br>    at org.hibernate.tuple.entity.EntityMetamodel.<init>(EntityMetamodel.java:322)<br>    at org.hibernate.persister.entity.AbstractEntityPersister.<init>(AbstractEntityPersister.java:473)<br>    at org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:133)<br>    at org.hibernate.persister.PersisterFactory.createClassPersister(PersisterFactory.java:84)<br>    at org.hibernate.impl.SessionFactoryImpl.<init>(SessionFactoryImpl.java:284)<br>    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1840)<br>    at util.HibernateSessionFactory.<clinit>(HibernateSessionFactory.java:15)<br>    … 1 more<br>Caused by: java.lang.reflect.InvocationTargetException<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)<br>    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br>    at java.lang.reflect.Constructor.newInstance(Constructor.java:408)<br>    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructTuplizer(EntityTuplizerFactory.java:105)<br>    … 10 more<br>Caused by: org.hibernate.PropertyNotFoundException: Could not find a getter for wineClass in class model.WineClass<br>    at org.hibernate.property.BasicPropertyAccessor.createGetter(BasicPropertyAccessor.java:326)<br>    at org.hibernate.property.BasicPropertyAccessor.getGetter(BasicPropertyAccessor.java:320)<br>    at org.hibernate.mapping.Property.getGetter(Property.java:304)<br>    at org.hibernate.tuple.entity.PojoEntityTuplizer.buildPropertyGetter(PojoEntityTuplizer.java:297)<br>    at org.hibernate.tuple.entity.AbstractEntityTuplizer.<init>(AbstractEntityTuplizer.java:155)<br>    at org.hibernate.tuple.entity.PojoEntityTuplizer.<init>(PojoEntityTuplizer.java:77)<br>    … 15 more</init></init></clinit></init></init></init></init></init></p>
</blockquote>
<h4 id="可能错误原因-："><a href="#可能错误原因-：" class="headerlink" title="可能错误原因 ："></a>可能错误原因 ：</h4><ul>
<li>缺少javassist.jar</li>
<li>映射文件(model.hbm.xml)或者Annotation model类中存在属性与映射文件不一致，或者model类中存在属性无对应的get set方法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate错误：Unable-to-instantiate-default-tuplizer，控制台错误信息如下：&quot;&gt;&lt;a href=&quot;#Hibernate错误：Unable-to-instantiate-default-tuplizer，控制台错误信息如下：&quot; class=&quot;headerlink&quot; title=&quot;Hibernate错误：Unable to instantiate default tuplizer，控制台错误信息如下：&quot;&gt;&lt;/a&gt;Hibernate错误：Unable to instantiate default tuplizer，控制台错误信息如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate错误：Unable to create requested service</title>
    <link href="http://yoursite.com/2017/07/26/Hibernate_er1/"/>
    <id>http://yoursite.com/2017/07/26/Hibernate_er1/</id>
    <published>2017-07-26T15:45:31.000Z</published>
    <updated>2017-08-10T02:54:57.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate错误：Unable-to-create-requested-service-org-hibernate-engine-jdbc-env-spi-JdbcEnvironment-，错误信息如下："><a href="#Hibernate错误：Unable-to-create-requested-service-org-hibernate-engine-jdbc-env-spi-JdbcEnvironment-，错误信息如下：" class="headerlink" title="Hibernate错误：Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]，错误信息如下："></a>Hibernate错误：Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]，错误信息如下：</h3><a id="more"></a>
<blockquote>
<p>org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator initiateService<br>WARN: HHH000342: Could not obtain connection to query metadata : The application must supply JDBC connections<br>Exception in thread “main” org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:244)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:208)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:189)<br>at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:51)<br>at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:94)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:217)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:189)<br>at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.handleTypes(MetadataBuildingProcess.java:352)<br>at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:111)<br>at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:83)<br>at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:418)<br>at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:87)<br>at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:692)<br>at org.fun.test.HibernateTest.main(HibernateTest.java:25)<br>Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when ‘hibernate.dialect’ not set<br>at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:100)<br>at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:54)<br>at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:137)<br>at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)<br>at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:88)<br>at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:234)<br>… 13 more</p>
</blockquote>
<p>经排查是hibernate配置文件数据库连接时，数据库驱动有问题，我写的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.driver&lt;/property&gt;</div></pre></td></tr></table></figure></p>
<p>实际应该为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</div></pre></td></tr></table></figure></p>
<p>当出现类似问题时，可能是数据源配置错误可从dialect，driverclass，url，username，password出发进行排查</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate错误：Unable-to-create-requested-service-org-hibernate-engine-jdbc-env-spi-JdbcEnvironment-，错误信息如下：&quot;&gt;&lt;a href=&quot;#Hibernate错误：Unable-to-create-requested-service-org-hibernate-engine-jdbc-env-spi-JdbcEnvironment-，错误信息如下：&quot; class=&quot;headerlink&quot; title=&quot;Hibernate错误：Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]，错误信息如下：&quot;&gt;&lt;/a&gt;Hibernate错误：Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]，错误信息如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate配置文件</title>
    <link href="http://yoursite.com/2017/07/25/Hibernate_cfg/"/>
    <id>http://yoursite.com/2017/07/25/Hibernate_cfg/</id>
    <published>2017-07-25T15:56:46.000Z</published>
    <updated>2017-08-10T02:54:58.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hibernate配置文件hibernate-cfg-xml基本信息如下："><a href="#hibernate配置文件hibernate-cfg-xml基本信息如下：" class="headerlink" title="hibernate配置文件hibernate.cfg.xml基本信息如下："></a>hibernate配置文件hibernate.cfg.xml基本信息如下：</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</div><div class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-configuration&gt;</div><div class="line">    &lt;session-factory&gt;</div><div class="line">        &lt;!-- Database Connection Settings --&gt;</div><div class="line">        &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost/hibernate&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;hibernate.connection.password&quot;&gt;cupdata&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;!-- JDBC connection pool (use the built-in) 基本不用 --&gt;</div><div class="line">        &lt;!-- &lt;property name=&quot;connection.pool_size&quot;&gt;1&lt;/property&gt; --&gt;</div><div class="line">        </div><div class="line">        &lt;!-- SQL dialect --&gt;</div><div class="line">        &lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;!-- Enable Hibernate&apos;s automatic session context management --&gt;</div><div class="line">        &lt;!-- &lt;property name=&quot;current_session_context_class&quot;&gt;thread&lt;/property&gt; --&gt;</div><div class="line">        </div><div class="line">        &lt;!-- Disable the second-level cache --&gt;</div><div class="line">        &lt;property name=&quot;cache.provider_class&quot;&gt;org.hibernate.cache.NoCacheProvider&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;!-- Echo all excuted SQL to stdout --&gt;</div><div class="line">        &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;!-- Drop and re-create the database schema on startup --&gt;</div><div class="line">        &lt;!-- &lt;property name=&quot;hbm2ddl.auto&quot;&gt;create&lt;/property&gt;  --&gt;</div><div class="line">        &lt;property name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/property&gt;</div><div class="line">        </div><div class="line">        &lt;mapping resource=&quot;com/lidolid/hibernate/model/Student.hbm.xml&quot;/&gt;</div><div class="line">        &lt;!-- 指明Teacher被加了annotation映射 --&gt;</div><div class="line">        &lt;mapping class=&quot;com.lidolid.hibernate.model.Teacher&quot;/&gt;</div><div class="line">    &lt;/session-factory&gt;</div><div class="line">&lt;/hibernate-configuration&gt;</div></pre></td></tr></table></figure>
<h5 id="使用时，按要求修改内容"><a href="#使用时，按要求修改内容" class="headerlink" title="使用时，按要求修改内容"></a>使用时，按要求修改内容</h5><ul>
<li>Database Connection Settings，数据库连接配置，分别为数据库驱动、数据库地址、username和password</li>
<li>JDBC connection pool，连接池，一般不使用</li>
<li>SQL dialect，数据库方言，使用时注意数据库版本</li>
<li>second-level cache，二级缓存，hibernate优化是使用</li>
<li>show_sql，执行时显示生成的SQL脚本</li>
<li>hbm2ddl.auto，存在四个取值:  <ul>
<li>create：启动时删数据库中的表，然后创建，退出时不删除数据表</li>
<li>create-drop：启动时删数据库中的表，然后创建，退出时自动删除所有表</li>
<li>update：自动修改，如果表结构与实体类不一致，那么就修改表使它们一致，数据会保留</li>
<li>validate：自动校验，如果表结构与实体类不一致，那么不做任何操作，报错</li>
</ul>
</li>
<li>mapping，model与数据库映射，在使用model.hbm.xml时要用/，使用Annotation时使用.来指明了被映射</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hibernate配置文件hibernate-cfg-xml基本信息如下：&quot;&gt;&lt;a href=&quot;#hibernate配置文件hibernate-cfg-xml基本信息如下：&quot; class=&quot;headerlink&quot; title=&quot;hibernate配置文件hibernate.cfg.xml基本信息如下：&quot;&gt;&lt;/a&gt;hibernate配置文件hibernate.cfg.xml基本信息如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
