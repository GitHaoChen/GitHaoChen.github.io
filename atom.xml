<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hal的博客</title>
  <subtitle>愿你走出半生，仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-21T14:50:15.415Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java读取Properties文件六种方法</title>
    <link href="http://yoursite.com/2017/09/01/JavaSE_0100_propertity/"/>
    <id>http://yoursite.com/2017/09/01/JavaSE_0100_propertity/</id>
    <published>2017-09-01T05:02:51.000Z</published>
    <updated>2017-10-21T14:50:15.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java读取Properties文件六种方法"><a href="#Java读取Properties文件六种方法" class="headerlink" title="Java读取Properties文件六种方法"></a>Java读取Properties文件六种方法</h3><h4 id="1-使用java-util-Properties类的load（）方法"><a href="#1-使用java-util-Properties类的load（）方法" class="headerlink" title="1. 使用java.util.Properties类的load（）方法"></a>1. 使用java.util.Properties类的load（）方法</h4><p>&emsp;&emsp;示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InputStream in = new BufferedInputStream（new FileInputStream（name））;</div><div class="line">Properties p = new Properties（）;</div><div class="line">p.load（in）;</div></pre></td></tr></table></figure></p>
<h4 id="2-使用java-util-ResourceBundle类的getBundle（）方法"><a href="#2-使用java-util-ResourceBundle类的getBundle（）方法" class="headerlink" title="2. 使用java.util.ResourceBundle类的getBundle（）方法"></a>2. 使用java.util.ResourceBundle类的getBundle（）方法</h4><p>&emsp;&emsp;示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ResourceBundle rb = ResourceBundle.getBundle（name， Locale.getDefault（））;</div></pre></td></tr></table></figure></p>
<h4 id="3-使用java-util-PropertyResourceBundle类的构造函数"><a href="#3-使用java-util-PropertyResourceBundle类的构造函数" class="headerlink" title="3. 使用java.util.PropertyResourceBundle类的构造函数"></a>3. 使用java.util.PropertyResourceBundle类的构造函数</h4><p>&emsp;&emsp;示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InputStream in = new BufferedInputStream（new FileInputStream（name））;</div><div class="line">ResourceBundle rb = new PropertyResourceBundle（in）;</div></pre></td></tr></table></figure></p>
<h4 id="4-使用class变量的getResourceAsStream（）方法"><a href="#4-使用class变量的getResourceAsStream（）方法" class="headerlink" title="4. 使用class变量的getResourceAsStream（）方法"></a>4. 使用class变量的getResourceAsStream（）方法</h4><p>&emsp;&emsp;示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InputStream in = JProperties.class.getResourceAsStream（name）;</div><div class="line">Properties p = new Properties（）;</div><div class="line">p.load（in）;</div></pre></td></tr></table></figure></p>
<h4 id="5-使用class-getClassLoader（）所得到的java-lang-ClassLoader的getResourceAsStream（）方法"><a href="#5-使用class-getClassLoader（）所得到的java-lang-ClassLoader的getResourceAsStream（）方法" class="headerlink" title="5. 使用class.getClassLoader（）所得到的java.lang.ClassLoader的getResourceAsStream（）方法"></a>5. 使用class.getClassLoader（）所得到的java.lang.ClassLoader的getResourceAsStream（）方法</h4><p>&emsp;&emsp;示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InputStream in = JProperties.class.getClassLoader（）.getResourceAsStream（name）;</div><div class="line">Properties p = new Properties（）;</div><div class="line">p.load（in）;</div></pre></td></tr></table></figure></p>
<h4 id="6-使用java-lang-ClassLoader类的getSystemResourceAsStream（）静态方法"><a href="#6-使用java-lang-ClassLoader类的getSystemResourceAsStream（）静态方法" class="headerlink" title="6. 使用java.lang.ClassLoader类的getSystemResourceAsStream（）静态方法"></a>6. 使用java.lang.ClassLoader类的getSystemResourceAsStream（）静态方法</h4><p>&emsp;&emsp;示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InputStream in = ClassLoader.getSystemResourceAsStream（name）;</div><div class="line">Properties p = new Properties（）;</div><div class="line">p.load（in）;</div></pre></td></tr></table></figure></p>
<h4 id="servlet中使用javax-servlet-ServletContext的getResourceAsStream（）方法"><a href="#servlet中使用javax-servlet-ServletContext的getResourceAsStream（）方法" class="headerlink" title="servlet中使用javax.servlet.ServletContext的getResourceAsStream（）方法"></a>servlet中使用javax.servlet.ServletContext的getResourceAsStream（）方法</h4><p>&emsp;&emsp;示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InputStream in = context.getResourceAsStream（path）;</div><div class="line">Properties p = new Properties（）;</div><div class="line">p.load（in）;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java读取Properties文件六种方法&quot;&gt;&lt;a href=&quot;#Java读取Properties文件六种方法&quot; class=&quot;headerlink&quot; title=&quot;Java读取Properties文件六种方法&quot;&gt;&lt;/a&gt;Java读取Properties文件六种
    
    </summary>
    
    
      <category term="JavaSE" scheme="http://yoursite.com/tags/JavaSE/"/>
    
      <category term="Properties" scheme="http://yoursite.com/tags/Properties/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis动态SQL语句</title>
    <link href="http://yoursite.com/2017/08/29/Mybatis_0400_dynamicSql/"/>
    <id>http://yoursite.com/2017/08/29/Mybatis_0400_dynamicSql/</id>
    <published>2017-08-29T12:21:36.000Z</published>
    <updated>2017-09-22T04:58:30.256Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MyBatis动态SQL语句"><a href="#MyBatis动态SQL语句" class="headerlink" title="MyBatis动态SQL语句"></a>MyBatis动态SQL语句</h3><p>&emsp;&emsp;MyBatis的强大特性之一便是它的动态 SQL。如果你有使用JDBC或其他类似框架的经验，你就能体会到根据不同条件拼接SQL语句有多么痛苦。拼接的时候要确保不能忘了必要的空格，还要注意省掉列名列表最后的逗号。利用动态SQL这一特性可以彻底摆脱这种痛苦。</p>
<p>&emsp;&emsp;通常使用动态SQL不可能是独立的一部分,MyBatis当然使用一种强大的动态SQL语言来改进这种情形,这种语言可以被用在任意的SQL映射语句中。</p>
<p>&emsp;&emsp;动态SQL元素和使用JSTL或其他类似基于XML的文本处理器相似。在 MyBatis之前的版本中,有很多的元素需要来了解。MyBatis 3大大提升了它们,现在用不到原先一半的元素就可以了。MyBatis 采用功能强大的基于OGNL的表达式来消除其他元素。</p>
<p>&emsp;&emsp;mybatis的动态sql语句是基于OGNL表达式的。可以方便的在sql语句中实现某些逻辑。总体说来mybatis 动态SQL语句主要有以下几类:<br>&lt;– more –&gt;</p>
<ul>
<li>if语句(简单的条件判断)</li>
<li>choose(when,otherwize),相当于java语言中的switch ,与jstl中的choose 很类似</li>
<li>trim(对包含的内容加上prefix,或者 suffix等，前缀，后缀)</li>
<li>where(主要是用来简化sql语句中where条件判断的，能智能的处理and or,不必担心多余导致语法错误)</li>
<li>set(主要用于更新时)</li>
<li>foreach(在实现mybatis in语句查询时特别有用)</li>
</ul>
<h4 id="1-if"><a href="#1-if" class="headerlink" title="1. if"></a>1. if</h4><p>&emsp;&emsp;动态SQL通常要做的事情是有条件地包含where子句的一部分。比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogWithTitleLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG </div><div class="line">  WHERE state = ‘ACTIVE’ </div><div class="line">  &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">    AND title like #&#123;title&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这条语句提供了一个可选的文本查找类型的功能。如果没有传入“title”，那么所有处于“ACTIVE”状态的BLOG都会返回；反之若传入了“title”，那么就会把模糊查找“title”内容的BLOG结果返回(就这个例子而言，细心的读者会发现其中的参数值是可以包含一些掩码或通配符的)。<br>&emsp;&emsp;如果想可选地通过“title”和“author”两个条件搜索该怎么办呢？首先，改变语句的名称让它更具实际意义；然后只要加入另一个条件即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’ </div><div class="line">  &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">    AND title like #&#123;title&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">    AND author_name like #&#123;author.name&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-choose-when-otherwise"><a href="#2-choose-when-otherwise" class="headerlink" title="2. choose, when, otherwise"></a>2. choose, when, otherwise</h4><p>&emsp;&emsp;有些时候，我们不想用到所有的条件语句，而只想从中择其一二。针对这种情况，MyBatis提供了choose元素，它有点像Java中的switch语句。</p>
<p>&emsp;&emsp;还是上面的例子，但是这次变为提供了“title”就按“title”查找，提供了“author”就按“author”查找，若两者都没有提供，就返回所有符合条件的BLOG(实际情况可能是由管理员按一定策略选出BLOG列表，而不是返回大量无意义的随机结果)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</div><div class="line">  &lt;choose&gt;</div><div class="line">    &lt;when test=&quot;title != null&quot;&gt;</div><div class="line">      AND title like #&#123;title&#125;</div><div class="line">    &lt;/when&gt;</div><div class="line">    &lt;when test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">      AND author_name like #&#123;author.name&#125;</div><div class="line">    &lt;/when&gt;</div><div class="line">    &lt;otherwise&gt;</div><div class="line">      AND featured = 1</div><div class="line">    &lt;/otherwise&gt;</div><div class="line">  &lt;/choose&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<h4 id="3-trim-where-set"><a href="#3-trim-where-set" class="headerlink" title="3. trim, where, set"></a>3. trim, where, set</h4><p>&emsp;&emsp;现在考虑回到“if”示例，这次我们将“ACTIVE = 1”也设置成动态的条件，看看会发生什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG </div><div class="line">  WHERE </div><div class="line">  &lt;if test=&quot;state != null&quot;&gt;</div><div class="line">    state = #&#123;state&#125;</div><div class="line">  &lt;/if&gt; </div><div class="line">  &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">    AND title like #&#123;title&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">    AND author_name like #&#123;author.name&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;如果这些条件没有一个能匹配上将会怎样？最终这条SQL会变成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM BLOG</div><div class="line">WHERE</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这会导致查询失败。如果仅仅第二个条件匹配又会怎样？这条SQL最终会是这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM BLOG</div><div class="line">WHERE </div><div class="line">AND title like ‘yiibai.com’</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这个查询也会失败。这个问题不能简单的用条件句式来解决，如果你也曾经被迫这样写过，那么你很可能从此以后都不想再这样去写了。</p>
<p>&emsp;&emsp;MyBatis有一个简单的处理，这在90%的情况下都会有用。而在不能使用的地方，你可以自定义处理方式来令其正常工作。一处简单的修改就能得到想要的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG </div><div class="line">  &lt;where&gt; </div><div class="line">    &lt;if test=&quot;state != null&quot;&gt;</div><div class="line">         state = #&#123;state&#125;</div><div class="line">    &lt;/if&gt; </div><div class="line">    &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">        AND title like #&#123;title&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">    &lt;if test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">        AND author_name like #&#123;author.name&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">  &lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;where元素知道只有在一个以上的if条件有值的情况下才去插入“WHERE”子句。而且，若最后的内容是“AND”或“OR”开头的，where 元素也知道如何将他们去除。</p>
<p>&emsp;&emsp;如果where元素没有按正常套路出牌，我们还是可以通过自定义trim元素来定制我们想要的功能。比如，和where元素等价的自定义trim元素为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt; ... &lt;/trim&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;prefixOverrides 属性会忽略通过管道分隔的文本序列(注意此例中的空格也是必要的)。它带来的结果就是所有在 prefixOverrides 属性中指定的内容将被移除，并且插入 prefix 属性中指定的内容。</p>
<p>&emsp;&emsp;类似的用于动态更新语句的解决方案叫做 set。set元素可以被用于动态包含需要更新的列，而舍去其他的。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;update id=&quot;updateAuthorIfNecessary&quot;&gt;</div><div class="line">  update Author</div><div class="line">    &lt;set&gt;</div><div class="line">      &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;</div><div class="line">      &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</div><div class="line">      &lt;if test=&quot;email != null&quot;&gt;email=#&#123;email&#125;,&lt;/if&gt;</div><div class="line">      &lt;if test=&quot;bio != null&quot;&gt;bio=#&#123;bio&#125;&lt;/if&gt;</div><div class="line">    &lt;/set&gt;</div><div class="line">  where id=#&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里，set元素会动态前置SET关键字，同时也会消除无关的逗号，因为用了条件语句之后很可能就会在生成的赋值语句的后面留下这些逗号。</p>
<p>&emsp;&emsp;若你对等价的自定义 trim 元素的样子感兴趣，那这就应该是它的真面目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt; ... &lt;/trim&gt;</div></pre></td></tr></table></figure></p>
<p>注意这里我们忽略的是后缀中的值，而又一次附加了前缀中的值。</p>
<h4 id="4-foreach"><a href="#4-foreach" class="headerlink" title="4. foreach"></a>4. foreach</h4><p>&emsp;&emsp;动态SQL的另外一个常用的必要操作是需要对一个集合进行遍历，通常是在构建IN条件语句的时候。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;</div><div class="line">  SELECT *</div><div class="line">  FROM POST P</div><div class="line">  WHERE ID in</div><div class="line">  &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot;</div><div class="line">      open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</div><div class="line">        #&#123;item&#125;</div><div class="line">  &lt;/foreach&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;foreach 元素的功能是非常强大的，它允许你指定一个集合，声明可以用在元素体内的集合项和索引变量。它也允许你指定开闭匹配的字符串以及在迭代中间放置分隔符。这个元素是很智能的，因此它不会偶然地附加多余的分隔符。</p>
<p>&emsp;&emsp;注意 你可以将一个List实例或者数组作为参数对象传给MyBatis，当你这么做的时候，MyBatis会自动将它包装在一个Map中并以名称为键。List实例将会以“list”作为键，而数组实例的键将是“array”。</p>
<h4 id="5-bind"><a href="#5-bind" class="headerlink" title="5. bind"></a>5. bind</h4><p>&emsp;&emsp;bind元素可以从OGNL表达式中创建一个变量并将其绑定到上下文。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;selectBlogsLike&quot; resultType=&quot;Blog&quot;&gt;</div><div class="line">  &lt;bind name=&quot;pattern&quot; value=&quot;&apos;%&apos; + _parameter.getTitle() + &apos;%&apos;&quot; /&gt;</div><div class="line">  SELECT * FROM BLOG</div><div class="line">  WHERE title LIKE #&#123;pattern&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<h4 id="6-Multi-db-vendor-support"><a href="#6-Multi-db-vendor-support" class="headerlink" title="6. Multi-db vendor support"></a>6. Multi-db vendor support</h4><p>&emsp;&emsp;一个配置了“_databaseId”变量的databaseIdProvider 对于动态代码来说是可用的，这样就可以根据不同的数据库厂商构建特定的语句。比如下面的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;insert id=&quot;insert&quot;&gt;</div><div class="line">  &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt;</div><div class="line">    &lt;if test=&quot;_databaseId == &apos;oracle&apos;&quot;&gt;</div><div class="line">      select seq_users.nextval from dual</div><div class="line">    &lt;/if&gt;</div><div class="line">    &lt;if test=&quot;_databaseId == &apos;db2&apos;&quot;&gt;</div><div class="line">      select nextval for seq_users from sysibm.sysdummy1&quot;</div><div class="line">    &lt;/if&gt;</div><div class="line">  &lt;/selectKey&gt;</div><div class="line">  insert into users values (#&#123;id&#125;, #&#123;name&#125;)</div><div class="line">&lt;/insert&gt;</div></pre></td></tr></table></figure></p>
<h4 id="7-动态SQL中可插拔的脚本语言"><a href="#7-动态SQL中可插拔的脚本语言" class="headerlink" title="7. 动态SQL中可插拔的脚本语言"></a>7. 动态SQL中可插拔的脚本语言</h4><p>&emsp;&emsp;MyBatis从3.2开始支持可插拔的脚本语言，因此你可以在插入一种语言的驱动(language driver)之后来写基于这种语言的动态SQL查询。</p>
<p>&emsp;&emsp;可以通过实现下面接口的方式来插入一种语言：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface LanguageDriver &#123;</div><div class="line">  ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql);</div><div class="line">  SqlSource createSqlSource(Configuration configuration, XNode script, Class&lt;?&gt; parameterType);</div><div class="line">  SqlSource createSqlSource(Configuration configuration, String script, Class&lt;?&gt; parameterType);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;一旦有了自定义的语言驱动，你就可以在mybatis-config.xml 文件中将它设置为默认语言：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;typeAliases&gt;</div><div class="line">  &lt;typeAlias type=&quot;org.sample.MyLanguageDriver&quot; alias=&quot;myLanguage&quot;/&gt;</div><div class="line">&lt;/typeAliases&gt;</div><div class="line">&lt;settings&gt;</div><div class="line">  &lt;setting name=&quot;defaultScriptingLanguage&quot; value=&quot;myLanguage&quot;/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;除了设置默认语言，你也可以针对特殊的语句指定特定语言，这可以通过如下的lang属性来完成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;selectBlog&quot; lang=&quot;myLanguage&quot;&gt; SELECT * FROM BLOG &lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;或者在映射中加上注解@Lang来完成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface Mapper &#123;</div><div class="line">  @Lang(MyLanguageDriver.class)</div><div class="line">  @Select(&quot;SELECT * FROM BLOG&quot;)</div><div class="line">  List&lt;Blog&gt; selectBlog();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MyBatis动态SQL语句&quot;&gt;&lt;a href=&quot;#MyBatis动态SQL语句&quot; class=&quot;headerlink&quot; title=&quot;MyBatis动态SQL语句&quot;&gt;&lt;/a&gt;MyBatis动态SQL语句&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;MyBatis的强大
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="动态sql" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81sql/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC整合Mybatis问题汇总</title>
    <link href="http://yoursite.com/2017/08/29/Mybatis_0302_SpringMVC_problems/"/>
    <id>http://yoursite.com/2017/08/29/Mybatis_0302_SpringMVC_problems/</id>
    <published>2017-08-29T05:06:37.000Z</published>
    <updated>2017-09-21T17:49:26.107Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-MVC整合Mybatis问题汇总"><a href="#Spring-MVC整合Mybatis问题汇总" class="headerlink" title="Spring MVC整合Mybatis问题汇总"></a>Spring MVC整合Mybatis问题汇总</h3><p>&emsp;&emsp;在使用Spring MVC整合Mybatis时，我遇到了一些问题，经过查阅相关资料最终得以解决。下面就这些问题，给出相应的解决方案，以供参考。</p>
<ul>
<li>fail On Missing web.xml</li>
<li>java.lang.ClassNotFoundException: org.mybatis.spring.SqlSessionFactoryBean</li>
<li>Cannot find class [org.apache.commons.dbcp.BasicDataSource]</li>
<li>Can not find the tag library descriptor for “<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="external">http://java.sun.com/jsp/jstl/core</a>“</li>
<li>Missing artifact javax.servlet.jsp.jstl:jstl:jar:1.2</li>
<li>Could not load the Tomcat server configuration at \Servers\Tomcat v8.0 Server at localhost-config</li>
<li>java.lang.ClassNotFoundException:org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory</li>
<li>org.springframework.beans.factory.BeanDefinitionStoreException</li>
</ul>
<a id="more"></a>
<h4 id="1-问题1"><a href="#1-问题1" class="headerlink" title="1. 问题1"></a>1. 问题1</h4><p>&emsp;&emsp;使用maven创建项目时有时在pom.xml的war处出现fail On Missing Web.Xml的错误</p>
<blockquote>
<p>解决方案：<br>在WEB-INF文件夹下面添加web.xml文件。如果依然报错，添加配置，放过该错误提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">	&lt;plugins&gt;</div><div class="line">		&lt;plugin&gt;</div><div class="line">			&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;2.3&lt;/version&gt;</div><div class="line">			&lt;configuration&gt;</div><div class="line">				&lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</div><div class="line">			&lt;/configuration&gt;</div><div class="line">		&lt;/plugin&gt;</div><div class="line">	&lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-问题2"><a href="#2-问题2" class="headerlink" title="2. 问题2"></a>2. 问题2</h4><p>&emsp;&emsp;java.lang.ClassNotFoundException: org.mybatis.spring.SqlSessionFactoryBean</p>
<blockquote>
<p>解决方案：缺少jar包 mybatis-spring.jar。如果是maven项目，在pom.xml中添加如下节点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- mybatis/spring包 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.2.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>如果非maven项目，手动添加jar包</p>
</blockquote>
<h4 id="3-问题3"><a href="#3-问题3" class="headerlink" title="3. 问题3"></a>3. 问题3</h4><p>&emsp;&emsp;Cannot find class [org.apache.commons.dbcp.BasicDataSource]</p>
<blockquote>
<p>解决方案：缺少commons-dbcp.jar、commons-pool.jar这两个包。如果是maven项目，在pom.xml中添加如下节点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;commons-dbcp&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;commons-pool&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;commons-pool&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.6&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>如果非maven项目，手动添加jar包</p>
</blockquote>
<h4 id="4-问题4"><a href="#4-问题4" class="headerlink" title="4. 问题4"></a>4. 问题4</h4><p>&emsp;&emsp;在定义jsp文件时，jsp文件报错提示：Can not find the tag library descriptor for “<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="external">http://java.sun.com/jsp/jstl/core</a>“</p>
<blockquote>
<p>解决方案：jsp文件使用了taglib标准标签库，但未引入jstl.jar。添加jstl.jar即可。</p>
</blockquote>
<h4 id="5-问题5"><a href="#5-问题5" class="headerlink" title="5. 问题5"></a>5. 问题5</h4><p>&emsp;&emsp;为添加jstl.jar,在Maven pom.xml中添加如下节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&amp;lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;jstl-impl&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>但是此时pom.xml提示错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Missing artifact javax.servlet.jsp.jstl:jstl:jar:1.2</div></pre></td></tr></table></figure></p>
<blockquote>
<p>原因分析：jar包冲突，tomcat中已有jsp-api和servlet-api，但maven下载jstl时也会把它所依赖的这两个包下载下来，所以就有了包冲突。<br>解决方案：在maven的pom.xml中需要排除这两个包的下载。pom.xml配置如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.2&lt;/version&gt;</div><div class="line">	&lt;exclusions&gt;</div><div class="line">		&lt;exclusion&gt;</div><div class="line">			&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</div><div class="line">		&lt;/exclusion&gt;</div><div class="line">		&lt;exclusion&gt;</div><div class="line">			&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</div><div class="line">		&lt;/exclusion&gt;</div><div class="line">	&lt;/exclusions&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;jstl-impl&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.2&lt;/version&gt;</div><div class="line">	&lt;exclusions&gt;</div><div class="line">		&lt;exclusion&gt;</div><div class="line">			&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</div><div class="line">		&lt;/exclusion&gt;</div><div class="line">		&lt;exclusion&gt;</div><div class="line">			&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</div><div class="line">		&lt;/exclusion&gt;</div><div class="line">		&lt;exclusion&gt;</div><div class="line">			&lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</div><div class="line">		&lt;/exclusion&gt;</div><div class="line">	&lt;/exclusions&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="6-问题6"><a href="#6-问题6" class="headerlink" title="6. 问题6"></a>6. 问题6</h4><p>&emsp;&emsp;在启动Tomcat服务器测试程序时，报错，信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not load the Tomcat server configuration at \Servers\Tomcat v8.0 Server at localhost-config</div></pre></td></tr></table></figure></p>
<blockquote>
<p>解决方案：</p>
<ol>
<li>选择Eclipse工具栏中的Windows→Perferences<br><img src="https://i.imgur.com/DniE7fg.png" alt=""></li>
<li>remove已经创建的server<br><img src="https://i.imgur.com/ibKhWHS.png" alt=""></li>
<li>选择Add重新添加，选择create anew local server<br><img src="https://i.imgur.com/fFm2TS1.png" alt=""></li>
<li>Finish以后，重新执行</li>
</ol>
</blockquote>
<h4 id="7-问题7"><a href="#7-问题7" class="headerlink" title="7. 问题7"></a>7. 问题7</h4><p>&emsp;&emsp;java.lang.ClassNotFoundException:org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory</p>
<blockquote>
<p>解决方案：<br>缺少commons-dbcp.jar和commons-pool.jar这两个包</p>
</blockquote>
<h4 id="8-问题8"><a href="#8-问题8" class="headerlink" title="8. 问题8"></a>8. 问题8</h4><p>&emsp;&emsp;org.springframework.beans.factory.BeanDefinitionStoreException</p>
<blockquote>
<p>解决方案：JDK版本问题<br>右键项目——&gt;属性,修改如下图，就可以了<br><img src="https://i.imgur.com/N0eQ1v3.png" alt=""><br>在实验的时候发现，如果JDK版本使用的是JDK1.8经常会出现此类问题，查阅结果说是JDK8和Spring3存在一些不兼容，建议使用JDK7或以下版本。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-MVC整合Mybatis问题汇总&quot;&gt;&lt;a href=&quot;#Spring-MVC整合Mybatis问题汇总&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC整合Mybatis问题汇总&quot;&gt;&lt;/a&gt;Spring MVC整合Mybatis问题汇总&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在使用Spring MVC整合Mybatis时，我遇到了一些问题，经过查阅相关资料最终得以解决。下面就这些问题，给出相应的解决方案，以供参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fail On Missing web.xml&lt;/li&gt;
&lt;li&gt;java.lang.ClassNotFoundException: org.mybatis.spring.SqlSessionFactoryBean&lt;/li&gt;
&lt;li&gt;Cannot find class [org.apache.commons.dbcp.BasicDataSource]&lt;/li&gt;
&lt;li&gt;Can not find the tag library descriptor for “&lt;a href=&quot;http://java.sun.com/jsp/jstl/core&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://java.sun.com/jsp/jstl/core&lt;/a&gt;“&lt;/li&gt;
&lt;li&gt;Missing artifact javax.servlet.jsp.jstl:jstl:jar:1.2&lt;/li&gt;
&lt;li&gt;Could not load the Tomcat server configuration at \Servers\Tomcat v8.0 Server at localhost-config&lt;/li&gt;
&lt;li&gt;java.lang.ClassNotFoundException:org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory&lt;/li&gt;
&lt;li&gt;org.springframework.beans.factory.BeanDefinitionStoreException&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC整合Mybatis</title>
    <link href="http://yoursite.com/2017/08/28/Mybatis_0301_SpringMVC/"/>
    <id>http://yoursite.com/2017/08/28/Mybatis_0301_SpringMVC/</id>
    <published>2017-08-28T15:44:11.000Z</published>
    <updated>2017-09-22T01:27:23.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring整合Mybatis问题汇总"><a href="#Spring整合Mybatis问题汇总" class="headerlink" title="Spring整合Mybatis问题汇总"></a>Spring整合Mybatis问题汇总</h3><p>&emsp;&emsp;目前主流的Web MVC框架，除了Struts这个主力外，还有Spring MVC，主要是由于 Spring MVC配置比较简单，使用起来也十分明了，非常灵活，与Spring 集成较好，对RESTful API 的支持也比struts要好。所以Spring MVC在一定程度上有一定的优势。<br>&emsp;&emsp;MyBatis是ibatis的升级版，作为hibernate的老对手，它是一个可以自定义SQL、存储过程和高级映射的持久层框架。与Hibernate 的主要区别就是 Mybatis 是半自动化的，而 Hibernate 是全自动的，所以当应用需求越来越复杂的时候，自动化的 SQL 显得比较笨拙。<br>&emsp;&emsp;本文介绍如何使用Spring MVC整合Mybatis。<br><a id="more"></a></p>
<h4 id="1-创建数据库表并插入数据"><a href="#1-创建数据库表并插入数据" class="headerlink" title="1. 创建数据库表并插入数据"></a>1. 创建数据库表并插入数据</h4><h5 id="1-1-用户user表"><a href="#1-1-用户user表" class="headerlink" title="1.1 用户user表"></a>1.1 用户user表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `mobile` varchar(16) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `user` VALUES (&apos;1&apos;, &apos;yiibai&apos;, &apos;13838009988&apos;);</div><div class="line">INSERT INTO `user` VALUES (&apos;2&apos;, &apos;saya&apos;, &apos;13838009988&apos;);</div></pre></td></tr></table></figure>
<h5 id="1-2-订单order表"><a href="#1-2-订单order表" class="headerlink" title="1.2 订单order表"></a>1.2 订单order表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `order` (</div><div class="line">  `order_id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `user_id` int(10) unsigned NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `order_no` varchar(16) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `money` float(10,2) unsigned DEFAULT &apos;0.00&apos;,</div><div class="line">  PRIMARY KEY (`order_id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `order` VALUES (&apos;1&apos;, &apos;1&apos;, &apos;1509289090&apos;, &apos;99.90&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;2&apos;, &apos;1&apos;, &apos;1519289091&apos;, &apos;290.80&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;3&apos;, &apos;1&apos;, &apos;1509294321&apos;, &apos;919.90&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;4&apos;, &apos;1&apos;, &apos;1601232190&apos;, &apos;329.90&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;5&apos;, &apos;1&apos;, &apos;1503457384&apos;, &apos;321.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;6&apos;, &apos;1&apos;, &apos;1598572382&apos;, &apos;342.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;7&apos;, &apos;1&apos;, &apos;1500845727&apos;, &apos;458.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;8&apos;, &apos;1&apos;, &apos;1508458923&apos;, &apos;1200.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;9&apos;, &apos;1&apos;, &apos;1504538293&apos;, &apos;2109.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;10&apos;, &apos;1&apos;, &apos;1932428723&apos;, &apos;5888.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;11&apos;, &apos;1&apos;, &apos;2390423712&apos;, &apos;3219.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;12&apos;, &apos;1&apos;, &apos;4587923992&apos;, &apos;123.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;13&apos;, &apos;1&apos;, &apos;4095378812&apos;, &apos;421.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;14&apos;, &apos;1&apos;, &apos;9423890127&apos;, &apos;678.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;15&apos;, &apos;1&apos;, &apos;7859213249&apos;, &apos;7689.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;16&apos;, &apos;1&apos;, &apos;4598450230&apos;, &apos;909.20&apos;);</div></pre></td></tr></table></figure>
<h4 id="2-工程结构"><a href="#2-工程结构" class="headerlink" title="2. 工程结构"></a>2. 工程结构</h4><p><img src="https://i.imgur.com/v5dJwaB.png" alt=""></p>
<blockquote>
<p>工程结构说明：</p>
<ul>
<li>controller：controller定义</li>
<li>maper：定义查询和数据对象映射</li>
<li>pojo：实体类</li>
<li>Configuration.xml：Mybatis核心配置文件</li>
<li>applicationContext.xml：Spring bean定义文件</li>
<li>WEB-INF/pages：jsp文件</li>
<li>spring-mvc-servlet.xml</li>
<li>web.xml</li>
</ul>
</blockquote>
<h4 id="3-实例对象"><a href="#3-实例对象" class="headerlink" title="3. 实例对象"></a>3. 实例对象</h4><h5 id="3-1-User-java"><a href="#3-1-User-java" class="headerlink" title="3.1 User.java"></a>3.1 User.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">public class User implements Serializable &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String username;</div><div class="line">	private String mobile;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getUsername() &#123;</div><div class="line">		return username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsername(String username) &#123;</div><div class="line">		this.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getMobile() &#123;</div><div class="line">		return mobile;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMobile(String mobile) &#123;</div><div class="line">		this.mobile = mobile;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-2-Order-java"><a href="#3-2-Order-java" class="headerlink" title="3.2 Order.java"></a>3.2 Order.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">public class Order &#123;</div><div class="line">	private int orderId;</div><div class="line">	private String orderNo;</div><div class="line">	private float money;</div><div class="line">	private int userId;</div><div class="line">	private User user;</div><div class="line"></div><div class="line">	public int getUserId() &#123;</div><div class="line">		return userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUserId(int userId) &#123;</div><div class="line">		this.userId = userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getOrderId() &#123;</div><div class="line">		return orderId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setOrderId(int orderId) &#123;</div><div class="line">		this.orderId = orderId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public User getUser() &#123;</div><div class="line">		return user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUser(User user) &#123;</div><div class="line">		this.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getOrderNo() &#123;</div><div class="line">		return orderNo;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setOrderNo(String orderNo) &#123;</div><div class="line">		this.orderNo = orderNo;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public float getMoney() &#123;</div><div class="line">		return money;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMoney(float money) &#123;</div><div class="line">		this.money = money;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h4><h5 id="4-1-applicationContext-xml"><a href="#4-1-applicationContext-xml" class="headerlink" title="4.1 applicationContext.xml"></a>4.1 applicationContext.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;  </div><div class="line">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  </div><div class="line">            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  </div><div class="line">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  </div><div class="line">            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd  </div><div class="line">            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;</div><div class="line">	default-autowire=&quot;byName&quot; default-lazy-init=&quot;false&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!--本示例采用DBCP连接池，应预先把DBCP的jar包复制到工程的lib目录下。 --&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;</div><div class="line">		destroy-method=&quot;close&quot; p:driverClassName=&quot;com.mysql.jdbc.Driver&quot;</div><div class="line">		p:url=&quot;jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&quot;</div><div class="line">		p:username=&quot;root&quot; p:password=&quot;cupdata&quot; p:maxActive=&quot;10&quot; p:maxIdle=&quot;10&quot;&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class="line">		&lt;!--dataSource属性指定要用到的连接池--&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">		&lt;!--configLocation属性指定mybatis的核心配置文件--&gt;</div><div class="line">		&lt;property name=&quot;configLocation&quot; value=&quot;classpath:config/Configuration.xml&quot; /&gt;</div><div class="line">		&lt;!-- 所有配置的mapper文件 --&gt;</div><div class="line">		&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/lidolid/mapepr/*.xml&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</div><div class="line">		&lt;property name=&quot;basePackage&quot; value=&quot;com.lidolid.maper&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h5 id="4-2-Configuration-xml"><a href="#4-2-Configuration-xml" class="headerlink" title="4.2 Configuration.xml"></a>4.2 Configuration.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;typeAliases&gt; </div><div class="line">        &lt;typeAlias alias=&quot;User&quot; type=&quot;com.lidolid.pojo.User&quot;/&gt;</div><div class="line">        &lt;typeAlias alias=&quot;Order&quot; type=&quot;com.lidolid.pojo.Order&quot;/&gt;  </div><div class="line">    &lt;/typeAliases&gt; </div><div class="line">    &lt;!-- 与spring 集成之后,这些可以完全删除,数据库连接的管理交给 spring 去管理 --&gt;</div><div class="line">    &lt;!-- </div><div class="line">	&lt;environments default=&quot;development&quot;&gt;</div><div class="line">		&lt;environment id=&quot;development&quot;&gt;</div><div class="line">		&lt;transactionManager type=&quot;JDBC&quot;/&gt;</div><div class="line">			&lt;dataSource type=&quot;POOLED&quot;&gt;</div><div class="line">			&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</div><div class="line">			&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&quot; /&gt;</div><div class="line">			&lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</div><div class="line">			&lt;property name=&quot;password&quot; value=&quot;cupdata&quot;/&gt;</div><div class="line">			&lt;/dataSource&gt;</div><div class="line">		&lt;/environment&gt;</div><div class="line">	&lt;/environments&gt;</div><div class="line">	--&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 这里交给sqlSessionFactory的 mapperLocations属性去得到所有配置信息 --&gt;</div><div class="line">	&lt;!-- </div><div class="line">	&lt;mappers&gt;</div><div class="line">	    &lt;mapper resource=&quot;com/yihaomen/mapper/User.xml&quot;/&gt;</div><div class="line">	&lt;/mappers&gt;</div><div class="line">	--&gt; </div><div class="line">	</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h5 id="4-3-UserMaper-xml用于定义查询和数据对象映射"><a href="#4-3-UserMaper-xml用于定义查询和数据对象映射" class="headerlink" title="4.3 UserMaper.xml用于定义查询和数据对象映射"></a>4.3 UserMaper.xml用于定义查询和数据对象映射</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;mapper namespace=&quot;com.lidolid.maper.UserMaper&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 为了返回list 类型而定义的returnMap --&gt;</div><div class="line">	&lt;resultMap type=&quot;User&quot; id=&quot;resultUser&quot;&gt;</div><div class="line">		&lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;</div><div class="line">		&lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt;</div><div class="line">		&lt;result column=&quot;mobile&quot; property=&quot;mobile&quot; /&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line"></div><div class="line">	&lt;!-- User 联合 Order 查询 方法的配置 (多对一的方式) --&gt;</div><div class="line">	&lt;resultMap id=&quot;resultUserOrders&quot; type=&quot;Order&quot;&gt;</div><div class="line">		&lt;id property=&quot;orderId&quot; column=&quot;order_id&quot; /&gt;</div><div class="line">		&lt;result property=&quot;orderNo&quot; column=&quot;order_no&quot; /&gt;</div><div class="line">		&lt;result property=&quot;money&quot; column=&quot;money&quot; /&gt;</div><div class="line">		&lt;result property=&quot;userId&quot; column=&quot;user_id&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;association property=&quot;user&quot; javaType=&quot;User&quot;&gt;</div><div class="line">			&lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</div><div class="line">			&lt;result property=&quot;username&quot; column=&quot;username&quot; /&gt;</div><div class="line">			&lt;result property=&quot;mobile&quot; column=&quot;mobile&quot; /&gt;</div><div class="line">		&lt;/association&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getUserOrders&quot; parameterType=&quot;int&quot; resultMap=&quot;resultUserOrders&quot;&gt;</div><div class="line">		SELECT u.*,o.* FROM `user` u, `order` o</div><div class="line">		WHERE u.id=o.user_id AND u.id=#&#123;id&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getUserById&quot; resultMap=&quot;resultUser&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">		SELECT *</div><div class="line">		FROM user</div><div class="line">		WHERE id=#&#123;id&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<h5 id="4-4-自定义接口UserMaper-java"><a href="#4-4-自定义接口UserMaper-java" class="headerlink" title="4.4 自定义接口UserMaper.java"></a>4.4 自定义接口UserMaper.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.maper;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.lidolid.pojo.Order;</div><div class="line">import com.lidolid.pojo.User;</div><div class="line"></div><div class="line">public interface UserMaper &#123;</div><div class="line">	public List&lt;Order&gt; getUserOrders(int userID);</div><div class="line">	public User getUserById(int userID);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-5-web-xml"><a href="#4-5-web-xml" class="headerlink" title="4.5 web.xml"></a>4.5 web.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</div><div class="line">	id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;</div><div class="line">	&lt;display-name&gt;MyBatis_Spring_MVC&lt;/display-name&gt;</div><div class="line">	&lt;welcome-file-list&gt;</div><div class="line">		&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">	&lt;/welcome-file-list&gt;</div><div class="line">	&lt;filter&gt;</div><div class="line">		&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</div><div class="line">		&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</div><div class="line">		&lt;init-param&gt;</div><div class="line">			&lt;param-name&gt;encoding&lt;/param-name&gt;</div><div class="line">			&lt;param-value&gt;UTF-8&lt;/param-value&gt;</div><div class="line">		&lt;/init-param&gt;</div><div class="line">		&lt;init-param&gt;</div><div class="line">			&lt;param-name&gt;forceEncoding&lt;/param-name&gt;</div><div class="line">			&lt;param-value&gt;true&lt;/param-value&gt;</div><div class="line">		&lt;/init-param&gt;</div><div class="line">	&lt;/filter&gt;</div><div class="line">	&lt;filter-mapping&gt;</div><div class="line">		&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</div><div class="line">		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">	&lt;/filter-mapping&gt;</div><div class="line">	&lt;context-param&gt;</div><div class="line">		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;classpath*:config/applicationContext.xml&lt;/param-value&gt;</div><div class="line">	&lt;/context-param&gt;</div><div class="line">	&lt;listener&gt;</div><div class="line">		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class="line">	&lt;/listener&gt;</div><div class="line">	&lt;listener&gt;</div><div class="line">		&lt;listener-class&gt;</div><div class="line">			org.springframework.web.context.ContextCleanupListener&lt;/listener-class&gt;</div><div class="line">	&lt;/listener&gt;</div><div class="line">	&lt;servlet&gt;</div><div class="line">		&lt;servlet-name&gt;spring-mvc&lt;/servlet-name&gt;</div><div class="line">		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">		&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">	&lt;/servlet&gt;</div><div class="line">	&lt;servlet-mapping&gt;</div><div class="line">		&lt;servlet-name&gt;spring-mvc&lt;/servlet-name&gt;</div><div class="line">		&lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class="line">	&lt;/servlet-mapping&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<h5 id="4-6-spring-mvc-servlet-xml"><a href="#4-6-spring-mvc-servlet-xml" class="headerlink" title="4.6 spring-mvc-servlet.xml"></a>4.6 spring-mvc-servlet.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans     </div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">        http://www.springframework.org/schema/context </div><div class="line">        http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">        http://www.springframework.org/schema/mvc</div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&quot;&gt;</div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.controller&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;bean</div><div class="line">		class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</div><div class="line">		&lt;property name=&quot;prefix&quot;&gt;</div><div class="line">			&lt;value&gt;/WEB-INF/pages/&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;suffix&quot;&gt;</div><div class="line">			&lt;value&gt;.jsp&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h4 id="5-controller定义"><a href="#5-controller定义" class="headerlink" title="5. controller定义"></a>5. controller定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.controller;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line">import com.lidolid.maper.UserMaper;</div><div class="line">import com.lidolid.pojo.Order;</div><div class="line"></div><div class="line">//http://localhost:8080/mybatis_0109_SpringMVC/user/orders</div><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/user&quot;)</div><div class="line">public class UserController &#123;</div><div class="line">	@Autowired</div><div class="line">	UserMaper userMaper;</div><div class="line"></div><div class="line">	@RequestMapping(&quot;/orders&quot;)</div><div class="line">	public ModelAndView listall(HttpServletRequest request,HttpServletResponse response)&#123;</div><div class="line">		List&lt;Order&gt; orders=userMaper.getUserOrders(1); </div><div class="line">		System.out.println(&quot;orders&quot;);</div><div class="line">		ModelAndView mav=new ModelAndView(&quot;user_orders&quot;);</div><div class="line">		mav.addObject(&quot;orders&quot;,orders);</div><div class="line">		return mav;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>RequestMapping用于定义controller访问路径</li>
<li>ModelAndView定义访问的页面名称，通过mav.addObject(“orders”,orders)返回值至view</li>
</ul>
</blockquote>
<h4 id="6-页面user-orders-jsp定义"><a href="#6-页面user-orders-jsp定义" class="headerlink" title="6. 页面user_orders.jsp定义"></a>6. 页面user_orders.jsp定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</div><div class="line">	pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</div><div class="line">		&lt;title&gt;用户订单列表&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;c:forEach items=&quot;$&#123;orders&#125;&quot; var=&quot;order&quot;&gt;  </div><div class="line">        订单号：$&#123;order.orderNo &#125;，订单总额：$&#123;order.money &#125;，用户名：$&#123;order.getUser().getUsername()&#125;&lt;br /&gt;</div><div class="line">		&lt;/c:forEach&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="7-访问controller"><a href="#7-访问controller" class="headerlink" title="7. 访问controller"></a>7. 访问controller</h4><p><img src="https://i.imgur.com/q7mxKxQ.png" alt=""></p>
<h4 id="8-Maven-pom-xml"><a href="#8-Maven-pom-xml" class="headerlink" title="8. Maven pom.xml"></a>8. Maven pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">	&lt;groupId&gt;com.lidolid&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;Mybatis_0109_SpringMVC&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;!-- spring版本号 --&gt;</div><div class="line">		&lt;spring.version&gt;3.2.8.RELEASE&lt;/spring.version&gt;</div><div class="line">		&lt;!-- log4j日志文件管理包版本 --&gt;</div><div class="line">		&lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt;</div><div class="line">		&lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;</div><div class="line">		&lt;!-- junit版本号 --&gt;</div><div class="line">		&lt;junit.version&gt;4.10&lt;/junit.version&gt;</div><div class="line">		&lt;!-- mybatis版本号 --&gt;</div><div class="line">		&lt;mybatis.version&gt;3.2.1&lt;/mybatis.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;!-- 添加Spring依赖 --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--单元测试依赖 --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- 日志文件管理包 --&gt;</div><div class="line">		&lt;!-- log start --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;log4j&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;log4j&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;!-- log end --&gt;</div><div class="line"></div><div class="line">		&lt;!--spring单元测试依赖 --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-test&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--mybatis依赖 --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- mybatis/spring包 --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.0&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- mysql驱动包 --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;5.1.29&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- javaee-api包 注意和项目使用的JDK版本对应 --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;javax&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;javaee-api&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;8.0&lt;/version&gt;</div><div class="line">			&lt;scope&gt;provided&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- javaee-web-api包 注意和项目使用的JDK版本对应 --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;javax&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;javaee-web-api&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;8.0&lt;/version&gt;</div><div class="line">			&lt;scope&gt;provided&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2&lt;/version&gt;</div><div class="line">			&lt;exclusions&gt;</div><div class="line">				&lt;exclusion&gt;</div><div class="line">					&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">					&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</div><div class="line">				&lt;/exclusion&gt;</div><div class="line">				&lt;exclusion&gt;</div><div class="line">					&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</div><div class="line">					&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</div><div class="line">				&lt;/exclusion&gt;</div><div class="line">			&lt;/exclusions&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;jstl-impl&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2&lt;/version&gt;</div><div class="line">			&lt;exclusions&gt;</div><div class="line">				&lt;exclusion&gt;</div><div class="line">					&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">					&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</div><div class="line">				&lt;/exclusion&gt;</div><div class="line">				&lt;exclusion&gt;</div><div class="line">					&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</div><div class="line">					&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</div><div class="line">				&lt;/exclusion&gt;</div><div class="line">				&lt;exclusion&gt;</div><div class="line">					&lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</div><div class="line">					&lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</div><div class="line">				&lt;/exclusion&gt;</div><div class="line">			&lt;/exclusions&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;commons-dbcp&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.4&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</div><div class="line">				&lt;version&gt;2.3&lt;/version&gt;</div><div class="line">				&lt;configuration&gt;</div><div class="line">					&lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</div><div class="line">				&lt;/configuration&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>Jar包：<br><img src="https://i.imgur.com/rQLXWqa.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring整合Mybatis问题汇总&quot;&gt;&lt;a href=&quot;#Spring整合Mybatis问题汇总&quot; class=&quot;headerlink&quot; title=&quot;Spring整合Mybatis问题汇总&quot;&gt;&lt;/a&gt;Spring整合Mybatis问题汇总&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;目前主流的Web MVC框架，除了Struts这个主力外，还有Spring MVC，主要是由于 Spring MVC配置比较简单，使用起来也十分明了，非常灵活，与Spring 集成较好，对RESTful API 的支持也比struts要好。所以Spring MVC在一定程度上有一定的优势。&lt;br&gt;&amp;emsp;&amp;emsp;MyBatis是ibatis的升级版，作为hibernate的老对手，它是一个可以自定义SQL、存储过程和高级映射的持久层框架。与Hibernate 的主要区别就是 Mybatis 是半自动化的，而 Hibernate 是全自动的，所以当应用需求越来越复杂的时候，自动化的 SQL 显得比较笨拙。&lt;br&gt;&amp;emsp;&amp;emsp;本文介绍如何使用Spring MVC整合Mybatis。&lt;br&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合Mybatis</title>
    <link href="http://yoursite.com/2017/08/28/Mybatis_0300_Spring/"/>
    <id>http://yoursite.com/2017/08/28/Mybatis_0300_Spring/</id>
    <published>2017-08-28T05:24:01.000Z</published>
    <updated>2017-09-21T16:38:28.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h3><p>&emsp;&emsp;很多的项目中，通常会用spring这个粘合剂来管理datasource等。充分利用spring基于接口的编程，以及aop,ioc带来的方便。用spring来管理mybatis与管理hibernate有很多类似的地方，本文介绍如何使用Spring整合Mybatis进行数据库的查询操作。<br><a id="more"></a></p>
<h4 id="1-创建数据库表并插入数据"><a href="#1-创建数据库表并插入数据" class="headerlink" title="1. 创建数据库表并插入数据"></a>1. 创建数据库表并插入数据</h4><h5 id="1-1-用户user表"><a href="#1-1-用户user表" class="headerlink" title="1.1 用户user表"></a>1.1 用户user表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `mobile` varchar(16) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `user` VALUES (&apos;1&apos;, &apos;yiibai&apos;, &apos;13838009988&apos;);</div><div class="line">INSERT INTO `user` VALUES (&apos;2&apos;, &apos;saya&apos;, &apos;13838009988&apos;);</div></pre></td></tr></table></figure>
<h5 id="1-2-订单order表"><a href="#1-2-订单order表" class="headerlink" title="1.2 订单order表"></a>1.2 订单order表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `order` (</div><div class="line">  `order_id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `user_id` int(10) unsigned NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `order_no` varchar(16) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `money` float(10,2) unsigned DEFAULT &apos;0.00&apos;,</div><div class="line">  PRIMARY KEY (`order_id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `order` VALUES (&apos;1&apos;, &apos;1&apos;, &apos;1509289090&apos;, &apos;99.90&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;2&apos;, &apos;1&apos;, &apos;1519289091&apos;, &apos;290.80&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;3&apos;, &apos;1&apos;, &apos;1509294321&apos;, &apos;919.90&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;4&apos;, &apos;1&apos;, &apos;1601232190&apos;, &apos;329.90&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;5&apos;, &apos;1&apos;, &apos;1503457384&apos;, &apos;321.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;6&apos;, &apos;1&apos;, &apos;1598572382&apos;, &apos;342.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;7&apos;, &apos;1&apos;, &apos;1500845727&apos;, &apos;458.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;8&apos;, &apos;1&apos;, &apos;1508458923&apos;, &apos;1200.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;9&apos;, &apos;1&apos;, &apos;1504538293&apos;, &apos;2109.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;10&apos;, &apos;1&apos;, &apos;1932428723&apos;, &apos;5888.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;11&apos;, &apos;1&apos;, &apos;2390423712&apos;, &apos;3219.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;12&apos;, &apos;1&apos;, &apos;4587923992&apos;, &apos;123.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;13&apos;, &apos;1&apos;, &apos;4095378812&apos;, &apos;421.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;14&apos;, &apos;1&apos;, &apos;9423890127&apos;, &apos;678.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;15&apos;, &apos;1&apos;, &apos;7859213249&apos;, &apos;7689.00&apos;);</div><div class="line">INSERT INTO `order` VALUES (&apos;16&apos;, &apos;1&apos;, &apos;4598450230&apos;, &apos;909.20&apos;);</div></pre></td></tr></table></figure>
<h4 id="2-工程结构"><a href="#2-工程结构" class="headerlink" title="2. 工程结构"></a>2. 工程结构</h4><p><img src="https://i.imgur.com/ECU3Jju.png" alt=""></p>
<blockquote>
<p>说明：</p>
<ul>
<li>pojo：实体类定义</li>
<li>maper：自定义接口和映射文件</li>
<li>Main.java：测试方法</li>
<li>applicationContext.xml：Mybatis配置文件，定义类型别名和映射文件路径</li>
<li>Configuration.xml：Spring Bean定义</li>
</ul>
</blockquote>
<h4 id="3-实例对象"><a href="#3-实例对象" class="headerlink" title="3. 实例对象"></a>3. 实例对象</h4><h5 id="3-1-User-java"><a href="#3-1-User-java" class="headerlink" title="3.1 User.java"></a>3.1 User.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">public class User implements Serializable &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String username;</div><div class="line">	private String mobile;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getUsername() &#123;</div><div class="line">		return username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsername(String username) &#123;</div><div class="line">		this.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getMobile() &#123;</div><div class="line">		return mobile;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMobile(String mobile) &#123;</div><div class="line">		this.mobile = mobile;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-2-Order-java"><a href="#3-2-Order-java" class="headerlink" title="3.2 Order.java"></a>3.2 Order.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">public class Order &#123;</div><div class="line">	private int orderId;</div><div class="line">	private String orderNo;</div><div class="line">	private float money;</div><div class="line">	private int userId;</div><div class="line">	private User user;</div><div class="line"></div><div class="line">	public int getUserId() &#123;</div><div class="line">		return userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUserId(int userId) &#123;</div><div class="line">		this.userId = userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getOrderId() &#123;</div><div class="line">		return orderId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setOrderId(int orderId) &#123;</div><div class="line">		this.orderId = orderId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public User getUser() &#123;</div><div class="line">		return user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUser(User user) &#123;</div><div class="line">		this.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getOrderNo() &#123;</div><div class="line">		return orderNo;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setOrderNo(String orderNo) &#123;</div><div class="line">		this.orderNo = orderNo;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public float getMoney() &#123;</div><div class="line">		return money;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMoney(float money) &#123;</div><div class="line">		this.money = money;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h4><h5 id="4-1-applicationContext-xml"><a href="#4-1-applicationContext-xml" class="headerlink" title="4.1 applicationContext.xml"></a>4.1 applicationContext.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;typeAliases&gt;</div><div class="line">		&lt;typeAlias alias=&quot;User&quot; type=&quot;com.lidolid.pojo.User&quot; /&gt;</div><div class="line">		&lt;typeAlias alias=&quot;Order&quot; type=&quot;com.lidolid.pojo.Order&quot; /&gt;</div><div class="line">	&lt;/typeAliases&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 删除原配置文件中数据库连接的相关配置，交由Spring管理--&gt;</div><div class="line">	</div><div class="line">	&lt;mappers&gt;</div><div class="line">		&lt;mapper resource=&quot;com/lidolid/maper/UserMaper.xml&quot; /&gt;</div><div class="line">	&lt;/mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：不使用Spring，获取自定义接口对象的方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Reader reader = Resources.getResourceAsReader(&quot;config/Configure.xml&quot;);</div><div class="line">SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</div><div class="line">SqlSession session = sqlSessionFactory.openSession();</div><div class="line">XXXMaper XXXMaper = session.getMapper(XXXMaper.class);</div></pre></td></tr></table></figure>
<p>所以需要在Mybatis配置文件中声明数据库连接信息。</p>
<p>使用Spring后，获取自定义接口对象的方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;config/Configuration.xml&quot;);</div><div class="line">XXXMaper XXXMaper = (XXXMaper) ctx.getBean(&quot;XXXMaper&quot;);</div></pre></td></tr></table></figure>
<p>需要在bean配置文件中定义XXXMaper的property，其中就包括数据库连接信息，所以在使用Spring后，将数据库相关配置定义为bean，交由Spring管理</p>
</blockquote>
<h5 id="4-2-Configuration-xml"><a href="#4-2-Configuration-xml" class="headerlink" title="4.2 Configuration.xml"></a>4.2 Configuration.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;  </div><div class="line">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  </div><div class="line">            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  </div><div class="line">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  </div><div class="line">            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd  </div><div class="line">            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;</div><div class="line">	default-autowire=&quot;byName&quot; default-lazy-init=&quot;false&quot;&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;</div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot;</div><div class="line">			value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class="line">		&lt;!--dataSource属性指定要用到的连接池--&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">		&lt;!--configLocation属性指定mybatis的核心配置文件--&gt;</div><div class="line">		&lt;property name=&quot;configLocation&quot; value=&quot;config/applicationContext.xml&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;userMaper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt; </div><div class="line">		&lt;!--sqlSessionFactory属性指定要用到的SqlSessionFactory实例--&gt;</div><div class="line">		&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</div><div class="line">		&lt;!--mapperInterface属性指定映射器接口，用于实现此接口并生成映射器对象--&gt;</div><div class="line">		&lt;property name=&quot;mapperInterface&quot; value=&quot;com.lidolid.maper.UserMaper&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h5 id="4-3-UserMaper-xml定义查询和数据对象映射"><a href="#4-3-UserMaper-xml定义查询和数据对象映射" class="headerlink" title="4.3 UserMaper.xml定义查询和数据对象映射"></a>4.3 UserMaper.xml定义查询和数据对象映射</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;mapper namespace=&quot;com.lidolid.maper.UserMaper&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 为了返回list 类型而定义的returnMap --&gt;</div><div class="line">	&lt;resultMap type=&quot;User&quot; id=&quot;resultUser&quot;&gt;</div><div class="line">		&lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;</div><div class="line">		&lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt;</div><div class="line">		&lt;result column=&quot;mobile&quot; property=&quot;mobile&quot; /&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line"></div><div class="line">	&lt;!-- User 联合 Order 查询 方法的配置 (多对一的方式) --&gt;</div><div class="line">	&lt;resultMap id=&quot;resultUserOrders&quot; type=&quot;Order&quot;&gt;</div><div class="line">		&lt;id property=&quot;orderId&quot; column=&quot;order_id&quot; /&gt;</div><div class="line">		&lt;result property=&quot;orderNo&quot; column=&quot;order_no&quot; /&gt;</div><div class="line">		&lt;result property=&quot;money&quot; column=&quot;money&quot; /&gt;</div><div class="line">		&lt;result property=&quot;userId&quot; column=&quot;user_id&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;association property=&quot;user&quot; javaType=&quot;User&quot;&gt;</div><div class="line">			&lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</div><div class="line">			&lt;result property=&quot;username&quot; column=&quot;username&quot; /&gt;</div><div class="line">			&lt;result property=&quot;mobile&quot; column=&quot;mobile&quot; /&gt;</div><div class="line">		&lt;/association&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getUserOrders&quot; parameterType=&quot;int&quot; resultMap=&quot;resultUserOrders&quot;&gt;</div><div class="line">		SELECT u.*,o.* FROM `user` u, `order` o</div><div class="line">		WHERE u.id=o.user_id AND u.id=#&#123;id&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getUserById&quot; resultMap=&quot;resultUser&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">		SELECT *</div><div class="line">		FROM user</div><div class="line">		WHERE id=#&#123;id&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div><div class="line">``` </div><div class="line"></div><div class="line">##### 4.4 自定义接口UserMaper.java</div></pre></td></tr></table></figure>
<p>package com.lidolid.maper;</p>
<p>import java.util.List;</p>
<p>import com.lidolid.pojo.Order;<br>import com.lidolid.pojo.User;</p>
<p>public interface UserMaper {<br>    public List<order> getUserOrders(int userID);<br>    public User getUserById(int userID);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 5. 测试执行，输出结果</div></pre></td></tr></table></figure></order></p>
<p>import java.util.List;</p>
<p>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;</p>
<p>import com.lidolid.maper.UserMaper;<br>import com.lidolid.pojo.Order;<br>import com.lidolid.pojo.User;</p>
<p>public class Main {<br>    private static ApplicationContext ctx;</p>
<pre><code>static {
    ctx = new ClassPathXmlApplicationContext(&quot;config/Configuration.xml&quot;);
}

public static void main(String[] args) {
    UserMaper userMaper = (UserMaper) ctx.getBean(&quot;userMaper&quot;);
    // 测试id=1的用户查询，可根据数据库中的情况修改.
    User user = userMaper.getUserById(1);
    System.out.println(&quot;获取用户 ID=1 的用户名：&quot; + user.getUsername());

    // 得到文章列表测试
    System.out.println(&quot;得到用户id为1的所有订单列表:&quot;);
    System.out.println(&quot;=============================================&quot;);
    List&lt;Order&gt; orders = userMaper.getUserOrders(1);

    for (Order order : orders) {
        System.out.println(&quot;订单号：&quot; + order.getOrderNo() + &quot;，订单金额：&quot; + order.getMoney());
    }

}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">结果输出：</div><div class="line">![](https://i.imgur.com/C1xYG8m.png)</div><div class="line"></div><div class="line">#### 6. Maven pom.xml</div></pre></td></tr></table></figure></p>
<p><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"><br>    <modelversion>4.0.0</modelversion><br>    <groupid>com.lidolid</groupid><br>    <artifactid>Mybatis_0100_Configuration</artifactid><br>    <version>0.0.1-SNAPSHOT</version></project></p>
<pre><code>&lt;dependencies&gt;

    &lt;!-- Spring Core --&gt;
    &lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-core --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
        &lt;version&gt;4.3.10.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- Spring Context --&gt;
    &lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-context --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;4.3.10.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.0.2&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.3.0&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
        &lt;version&gt;4.3.10.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;
        &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;
        &lt;version&gt;1.4&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;commons-pool&lt;/groupId&gt;
        &lt;artifactId&gt;commons-pool&lt;/artifactId&gt;
        &lt;version&gt;1.6&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
        &lt;version&gt;1.2.5&lt;/version&gt;
    &lt;/dependency&gt;


&lt;/dependencies&gt;
</code></pre><p><br>```</p>
<p>Jar包：<br><img src="https://i.imgur.com/VPS7LXj.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring整合Mybatis&quot;&gt;&lt;a href=&quot;#Spring整合Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Spring整合Mybatis&quot;&gt;&lt;/a&gt;Spring整合Mybatis&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;很多的项目中，通常会用spring这个粘合剂来管理datasource等。充分利用spring基于接口的编程，以及aop,ioc带来的方便。用spring来管理mybatis与管理hibernate有很多类似的地方，本文介绍如何使用Spring整合Mybatis进行数据库的查询操作。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis表关联many2many</title>
    <link href="http://yoursite.com/2017/08/27/Mybatis_0202_many2many/"/>
    <id>http://yoursite.com/2017/08/27/Mybatis_0202_many2many/</id>
    <published>2017-08-27T01:54:10.000Z</published>
    <updated>2017-09-20T17:40:12.305Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MyBatis表关联many2many"><a href="#MyBatis表关联many2many" class="headerlink" title="MyBatis表关联many2many"></a>MyBatis表关联many2many</h3><p>&emsp;&emsp;mybatis3.0 添加了association和collection标签专门用于对多个相关实体类数据进行级联查询，但<strong><em>仍不支持多个相关实体类数据的级联保存和级联删除操作</em></strong>。因此在进行实体类多对多映射表设计时，需要专门建立一个关联对象类对相关实体类的关联关系进行描述。<br><a id="more"></a></p>
<h4 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a>1. 应用场景</h4><p>&emsp;&emsp;假设项目中存在用户和用户组，从一个用户读取出它所在的用户组，从一个用户组也知道这个组内的所有用户信息。</p>
<h4 id="2-工程结构"><a href="#2-工程结构" class="headerlink" title="2. 工程结构"></a>2. 工程结构</h4><p><img src="https://i.imgur.com/PjNEE9L.png" alt=""></p>
<blockquote>
<p>工程结构说明：<br>pojo：实体bean定义<br>maper： 实体映射文件和自定义接口<br>Main.java：测试程序<br>config：Mybatis配置文件</p>
</blockquote>
<h4 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3. 创建表"></a>3. 创建表</h4><h5 id="3-1-user表"><a href="#3-1-user表" class="headerlink" title="3.1 user表"></a>3.1 user表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `mobile` varchar(16) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `user` VALUES (&apos;1&apos;, &apos;yiibai&apos;, &apos;13838009988&apos;);</div><div class="line">INSERT INTO `user` VALUES (&apos;2&apos;, &apos;User-name-1&apos;, &apos;13838009988&apos;);</div></pre></td></tr></table></figure>
<h5 id="3-2-group表"><a href="#3-2-group表" class="headerlink" title="3.2 group表"></a>3.2 group表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `group` (</div><div class="line">  `group_id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `group_name` varchar(254) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  PRIMARY KEY (`group_id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：建表时虽然使用表明group并未报错，但操作该表时，group表明上必须使用 `，为方便使用，建表时表明尽量不要使用sql关键字</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `group` VALUES (&apos;1&apos;, &apos;Group-1&apos;);</div><div class="line">INSERT INTO `group` VALUES (&apos;2&apos;, &apos;Group-2&apos;);</div></pre></td></tr></table></figure>
<h5 id="3-1-user-group表"><a href="#3-1-user-group表" class="headerlink" title="3.1 user_group表"></a>3.1 user_group表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user_group` (</div><div class="line">  `user_id` int(10) unsigned NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `group_id` int(10) unsigned NOT NULL</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `user_group` VALUES (&apos;1&apos;, &apos;1&apos;);</div><div class="line">INSERT INTO `user_group` VALUES (&apos;2&apos;, &apos;1&apos;);</div><div class="line">INSERT INTO `user_group` VALUES (&apos;1&apos;, &apos;2&apos;);</div></pre></td></tr></table></figure>
<h4 id="4-创建表对应的-JavaBean-对象"><a href="#4-创建表对应的-JavaBean-对象" class="headerlink" title="4. 创建表对应的 JavaBean 对象"></a>4. 创建表对应的 JavaBean 对象</h4><h5 id="4-1-User-java"><a href="#4-1-User-java" class="headerlink" title="4.1 User.java"></a>4.1 User.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class User implements Serializable &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String username;</div><div class="line">	private String mobile;</div><div class="line">	private List&lt;Group&gt; groups;</div><div class="line"></div><div class="line">	public List&lt;Group&gt; getGroups() &#123;</div><div class="line">		return groups;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroups(List&lt;Group&gt; groups) &#123;</div><div class="line">		this.groups = groups;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getUsername() &#123;</div><div class="line">		return username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsername(String username) &#123;</div><div class="line">		this.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getMobile() &#123;</div><div class="line">		return mobile;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMobile(String mobile) &#123;</div><div class="line">		this.mobile = mobile;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-2-Group-java"><a href="#4-2-Group-java" class="headerlink" title="4.2 Group.java"></a>4.2 Group.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class Group implements Serializable &#123;</div><div class="line">	private int groupId;</div><div class="line">	private String groupName;</div><div class="line">	private List&lt;User&gt; users;</div><div class="line"></div><div class="line">	public List&lt;User&gt; getUsers() &#123;</div><div class="line">		return users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsers(List&lt;User&gt; users) &#123;</div><div class="line">		this.users = users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getGroupId() &#123;</div><div class="line">		return groupId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroupId(int groupId) &#123;</div><div class="line">		this.groupId = groupId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getGroupName() &#123;</div><div class="line">		return groupName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroupName(String groupName) &#123;</div><div class="line">		this.groupName = groupName;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-3-UserGroup-java"><a href="#4-3-UserGroup-java" class="headerlink" title="4.3 UserGroup.java"></a>4.3 UserGroup.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">public class UserGroup &#123;</div><div class="line">	private int userId;</div><div class="line">	private int groupId;</div><div class="line"></div><div class="line">	public int getUserId() &#123;</div><div class="line">		return userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUserId(int userId) &#123;</div><div class="line">		this.userId = userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getGroupId() &#123;</div><div class="line">		return groupId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setGroupId(int groupId) &#123;</div><div class="line">		this.groupId = groupId;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-配置文件"><a href="#5-配置文件" class="headerlink" title="5. 配置文件"></a>5. 配置文件</h4><h5 id="5-1-Configure-xml"><a href="#5-1-Configure-xml" class="headerlink" title="5.1 Configure.xml"></a>5.1 Configure.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;typeAliases&gt;</div><div class="line">		&lt;typeAlias alias=&quot;User&quot; type=&quot;com.lidolid.pojo.User&quot; /&gt;</div><div class="line">		&lt;typeAlias alias=&quot;UserGroup&quot; type=&quot;com.lidolid.pojo.UserGroup&quot; /&gt;</div><div class="line">		&lt;typeAlias alias=&quot;Group&quot; type=&quot;com.lidolid.pojo.Group&quot; /&gt;</div><div class="line">	&lt;/typeAliases&gt;</div><div class="line">	&lt;environments default=&quot;development&quot;&gt;</div><div class="line">		&lt;environment id=&quot;development&quot;&gt;</div><div class="line">			&lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">			&lt;dataSource type=&quot;POOLED&quot;&gt;</div><div class="line">				&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">				&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot; /&gt;</div><div class="line">				&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">				&lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">			&lt;/dataSource&gt;</div><div class="line">		&lt;/environment&gt;</div><div class="line">	&lt;/environments&gt;</div><div class="line"></div><div class="line">	&lt;mappers&gt;</div><div class="line">		&lt;mapper resource=&quot;com/lidolid/maper/User.xml&quot; /&gt;</div><div class="line">		&lt;mapper resource=&quot;com/lidolid/maper/Group.xml&quot; /&gt;</div><div class="line">		&lt;mapper resource=&quot;com/lidolid/maper/UserGroup.xml&quot; /&gt;</div><div class="line">	&lt;/mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h5 id="5-2-User-xml"><a href="#5-2-User-xml" class="headerlink" title="5.2 User.xml"></a>5.2 User.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;mapper namespace=&quot;com.lidolid.maper.UserMaper&quot;&gt;</div><div class="line">	&lt;parameterMap type=&quot;User&quot; id=&quot;parameterUserMap&quot;&gt;</div><div class="line">		&lt;parameter property=&quot;id&quot;/&gt;</div><div class="line">		&lt;parameter property=&quot;username&quot;/&gt;</div><div class="line">		&lt;parameter property=&quot;mobile&quot;/&gt;</div><div class="line">	&lt;/parameterMap&gt;</div><div class="line">	</div><div class="line">	&lt;insert id=&quot;insertUser&quot; parameterMap=&quot;parameterUserMap&quot;&gt;	</div><div class="line">		INSERT INTO user(username,mobile)</div><div class="line">		VALUES(#&#123;username&#125;,#&#123;mobile&#125;);</div><div class="line">	&lt;/insert&gt;   </div><div class="line">	</div><div class="line">	&lt;resultMap type=&quot;User&quot; id=&quot;resultUser&quot;&gt;</div><div class="line">		&lt;result property=&quot;id&quot; column=&quot;group_id&quot;/&gt;</div><div class="line">		&lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</div><div class="line">		&lt;collection property=&quot;groups&quot; column=&quot;id&quot; select=&quot;com.lidolid.maper.UserGroup.getGroupsByUserId&quot;/&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line">	</div><div class="line">	&lt;select id=&quot;getUser&quot; resultMap=&quot;resultUser&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">		SELECT *</div><div class="line">		FROM user</div><div class="line">		WHERE id=#&#123;id&#125;</div><div class="line">	&lt;/select&gt;    </div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<h5 id="5-3-Group-xml"><a href="#5-3-Group-xml" class="headerlink" title="5.3 Group.xml"></a>5.3 Group.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;mapper namespace=&quot;com.lidolid.maper.GroupMaper&quot;&gt;</div><div class="line"></div><div class="line">	&lt;parameterMap type=&quot;Group&quot; id=&quot;parameterGroupMap&quot;&gt;</div><div class="line">		&lt;parameter property=&quot;groupId&quot; /&gt;</div><div class="line">		&lt;parameter property=&quot;groupName&quot; /&gt;</div><div class="line">	&lt;/parameterMap&gt;</div><div class="line"></div><div class="line">	&lt;insert id=&quot;insertGroup&quot; parameterMap=&quot;parameterGroupMap&quot;&gt;</div><div class="line">		INSERT INTO `group`</div><div class="line">		(group_name)</div><div class="line">		VALUES(#&#123;groupName&#125;);</div><div class="line">	&lt;/insert&gt;</div><div class="line"></div><div class="line">	&lt;resultMap type=&quot;Group&quot; id=&quot;resultGroupMap_1&quot;&gt;</div><div class="line">		&lt;result property=&quot;id&quot; column=&quot;id&quot; /&gt;</div><div class="line">		&lt;result property=&quot;groupName&quot; column=&quot;group_name&quot; /&gt;</div><div class="line">		&lt;collection property=&quot;users&quot; column=&quot;group_id&quot;</div><div class="line">			select=&quot;com.lidolid.maper.UserGroupMaper.getUsersByGroupId&quot; /&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getGroup&quot; resultMap=&quot;resultGroupMap_1&quot;</div><div class="line">		parameterType=&quot;int&quot;&gt;</div><div class="line">		SELECT *</div><div class="line">		FROM `group`</div><div class="line">		WHERE group_id=#&#123;id&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<h5 id="5-4-UserGroup-xml"><a href="#5-4-UserGroup-xml" class="headerlink" title="5.4 UserGroup.xml"></a>5.4 UserGroup.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;mapper namespace=&quot;com.lidolid.maper.UserGroupMaper&quot;&gt;</div><div class="line">	&lt;parameterMap type=&quot;UserGroup&quot; id=&quot;parameterUserGroupMap&quot;&gt;</div><div class="line">		&lt;parameter property=&quot;userId&quot;/&gt;</div><div class="line">		&lt;parameter property=&quot;groupId&quot;/&gt;</div><div class="line">	&lt;/parameterMap&gt;</div><div class="line">	</div><div class="line">	&lt;insert id=&quot;insertUserGroup&quot;  parameterMap=&quot;parameterUserGroupMap&quot;&gt;</div><div class="line">		INSERT INTO user_group(user_id, group_id)</div><div class="line">		VALUES(#&#123;userId&#125;,#&#123;groupId&#125;)</div><div class="line">	&lt;/insert&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 根据一个用户组ID,查看这个用户组下的所有用户 --&gt;</div><div class="line">	&lt;resultMap type=&quot;User&quot; id=&quot;resultUserMap_2&quot;&gt;</div><div class="line">		&lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;</div><div class="line">		&lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;</div><div class="line">		&lt;result property=&quot;mobile&quot; column=&quot;mobile&quot;/&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line">	</div><div class="line">	&lt;select id=&quot;getUsersByGroupId&quot; resultMap=&quot;resultUserMap_2&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">		SELECT u.*, ug.group_id</div><div class="line">		FROM user u, user_group ug</div><div class="line">		WHERE u.id=ug.user_id AND ug.group_id=#&#123;group_id&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 根据一个用户ID,查看这个用户所对应的组--&gt;</div><div class="line">	&lt;resultMap type=&quot;Group&quot; id=&quot;resultGroupMap_2&quot;&gt;</div><div class="line">		&lt;result property=&quot;groupId&quot; column=&quot;group_id&quot;/&gt;</div><div class="line">		&lt;result property=&quot;groupName&quot; column=&quot;group_name&quot;/&gt;</div><div class="line">	&lt;/resultMap&gt; </div><div class="line">	</div><div class="line">	&lt;select id=&quot;getGroupsByUserId&quot; resultMap=&quot;resultGroupMap_2&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">		SELECT g.*, u.user_id</div><div class="line">		FROM group g, user_group u</div><div class="line">		WHERE g.group_id=u.group_id AND u.user_id=#&#123;user_id&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<h4 id="6-自定义接口"><a href="#6-自定义接口" class="headerlink" title="6. 自定义接口"></a>6. 自定义接口</h4><h5 id="6-1-UserMaper-java"><a href="#6-1-UserMaper-java" class="headerlink" title="6.1 UserMaper.java"></a>6.1 UserMaper.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.maper;</div><div class="line"></div><div class="line">import com.lidolid.pojo.User;</div><div class="line"></div><div class="line">public interface UserMaper &#123;</div><div class="line">	public void insertUser(User user);</div><div class="line">	public User getUser(int id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="6-2-GroupMaper-java"><a href="#6-2-GroupMaper-java" class="headerlink" title="6.2 GroupMaper.java"></a>6.2 GroupMaper.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.maper;</div><div class="line"></div><div class="line">import com.lidolid.pojo.Group;</div><div class="line"></div><div class="line">public interface GroupMaper &#123;</div><div class="line">	public void insertGroup(Group group);</div><div class="line">	public Group getGroup(int id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="6-3-UserGroupMaper-java"><a href="#6-3-UserGroupMaper-java" class="headerlink" title="6.3 UserGroupMaper.java"></a>6.3 UserGroupMaper.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.maper;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.lidolid.pojo.Group;</div><div class="line">import com.lidolid.pojo.User;</div><div class="line">import com.lidolid.pojo.UserGroup;</div><div class="line"></div><div class="line">public interface UserGroupMaper &#123;</div><div class="line">	public void insertUserGroup(UserGroup userGroup);</div><div class="line">	public List&lt;User&gt; getUsersByGroupId(int id);</div><div class="line">	public List&lt;Group&gt; getGroupsByUserId(int id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-运行测试"><a href="#7-运行测试" class="headerlink" title="7. 运行测试"></a>7. 运行测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">import java.io.Reader;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.ibatis.session.SqlSession;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactory;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"></div><div class="line">import com.lidolid.maper.GroupMaper;</div><div class="line">import com.lidolid.maper.UserGroupMaper;</div><div class="line">import com.lidolid.maper.UserMaper;</div><div class="line">import com.lidolid.pojo.Group;</div><div class="line">import com.lidolid.pojo.User;</div><div class="line">import com.lidolid.pojo.UserGroup;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	private static SqlSessionFactory sqlSessionFactory;</div><div class="line">	private static Reader reader;</div><div class="line"></div><div class="line">	static &#123;</div><div class="line">		try &#123;</div><div class="line">			reader = Resources.getResourceAsReader(&quot;config/Configure.xml&quot;);</div><div class="line">			sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static SqlSessionFactory getSession() &#123;</div><div class="line">		return sqlSessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @param args</div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		/*testAddGroup();</div><div class="line">		testAddUser();</div><div class="line">		testAddUserGroup();*/</div><div class="line">		testGetGroupAndUsers();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void testGetGroupAndUsers() &#123;</div><div class="line">		UserGroup userGroup = new UserGroup();</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		try &#123;</div><div class="line">			GroupMaper groupMaper = session.getMapper(GroupMaper.class);</div><div class="line">			Group group = groupMaper.getGroup(1);</div><div class="line">			System.out.println(&quot;Group =&gt; &quot; + group.getGroupName());</div><div class="line">			List&lt;User&gt; users = group.getUsers();</div><div class="line">			for (User user : users) &#123;</div><div class="line">				System.out.println(&quot;\t:&quot; + user.getId() + &quot;\t&quot; + user.getUsername());</div><div class="line">			&#125;</div><div class="line">		&#125; finally &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void testAddUserGroup() &#123;</div><div class="line">		UserGroup userGroup = new UserGroup();</div><div class="line">		userGroup.setGroupId(1);</div><div class="line">		userGroup.setUserId(2);</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		try &#123;</div><div class="line">			UserGroupMaper userGroupMaper = session.getMapper(UserGroupMaper.class);</div><div class="line">			userGroupMaper.insertUserGroup(userGroup);</div><div class="line"></div><div class="line">			session.commit();</div><div class="line">		&#125; finally &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void testAddUser() &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		try &#123;</div><div class="line">			User user = new User();</div><div class="line">			user.setUsername(&quot;User-name-1&quot;);</div><div class="line">			user.setMobile(&quot;13838009988&quot;);</div><div class="line">			UserMaper userMaper = session.getMapper(UserMaper.class);</div><div class="line">			userMaper.insertUser(user);</div><div class="line">			session.commit();</div><div class="line">			// System.out.println(user.getGroupId());</div><div class="line">		&#125; finally &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void testAddGroup() &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		try &#123;</div><div class="line">			Group group = new Group();</div><div class="line">			group.setGroupName(&quot;用户组-1&quot;);</div><div class="line">			GroupMaper groupMapper = session.getMapper(GroupMaper.class);</div><div class="line">			groupMapper.insertGroup(group);</div><div class="line">			session.commit();</div><div class="line">			System.out.println(group.getGroupId());</div><div class="line">		&#125; finally &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><img src="https://i.imgur.com/uEu7kSJ.png" alt=""></p>
<blockquote>
<p>多对多查询实现了级联查询<br>由于不支持多个相关实体类数据的级联保存和级联删除操作，所以在存储时要分步进行存储</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MyBatis表关联many2many&quot;&gt;&lt;a href=&quot;#MyBatis表关联many2many&quot; class=&quot;headerlink&quot; title=&quot;MyBatis表关联many2many&quot;&gt;&lt;/a&gt;MyBatis表关联many2many&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;mybatis3.0 添加了association和collection标签专门用于对多个相关实体类数据进行级联查询，但&lt;strong&gt;&lt;em&gt;仍不支持多个相关实体类数据的级联保存和级联删除操作&lt;/em&gt;&lt;/strong&gt;。因此在进行实体类多对多映射表设计时，需要专门建立一个关联对象类对相关实体类的关联关系进行描述。&lt;br&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="关联" scheme="http://yoursite.com/tags/%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis表关联many2one</title>
    <link href="http://yoursite.com/2017/08/26/Mybatis_0201_many2one/"/>
    <id>http://yoursite.com/2017/08/26/Mybatis_0201_many2one/</id>
    <published>2017-08-26T07:28:57.000Z</published>
    <updated>2017-09-20T17:17:13.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MyBatis表关联many2one"><a href="#MyBatis表关联many2one" class="headerlink" title="MyBatis表关联many2one"></a>MyBatis表关联many2one</h3><p>&emsp;&emsp;本文介绍Mybatis如何进行多对一关联，并实现关联查询。</p>
<a id="more"></a>
<h4 id="1-创建表对应的JavaBean对象"><a href="#1-创建表对应的JavaBean对象" class="headerlink" title="1. 创建表对应的JavaBean对象"></a>1. 创建表对应的JavaBean对象</h4><h5 id="1-1-User-java"><a href="#1-1-User-java" class="headerlink" title="1.1 User.java"></a>1.1 User.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class User implements Serializable &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String username;</div><div class="line">	private String mobile;</div><div class="line">	private List&lt;Post&gt; posts;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getUsername() &#123;</div><div class="line">		return username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsername(String username) &#123;</div><div class="line">		this.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getMobile() &#123;</div><div class="line">		return mobile;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMobile(String mobile) &#123;</div><div class="line">		this.mobile = mobile;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Post&gt; getPosts() &#123;</div><div class="line">		return posts;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPosts(List&lt;Post&gt; posts) &#123;</div><div class="line">		this.posts = posts;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;User [id=&quot; + id + &quot;, name=&quot; + username + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-2-Post-java"><a href="#1-2-Post-java" class="headerlink" title="1.2 Post.java"></a>1.2 Post.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">public class Post implements Serializable &#123;</div><div class="line">	private int id;</div><div class="line">	private User user;</div><div class="line">	private String title;</div><div class="line">	private String content;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public User getUser() &#123;</div><div class="line">		return user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUser(User user) &#123;</div><div class="line">		this.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getTitle() &#123;</div><div class="line">		return title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTitle(String title) &#123;</div><div class="line">		this.title = title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getContent() &#123;</div><div class="line">		return content;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setContent(String content) &#123;</div><div class="line">		this.content = content;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h4><h5 id="2-1-Configure-xml"><a href="#2-1-Configure-xml" class="headerlink" title="2.1 Configure.xml"></a>2.1 Configure.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;typeAliases&gt;</div><div class="line">		&lt;typeAlias alias=&quot;User&quot; type=&quot;com.lidolid.pojo.User&quot; /&gt;</div><div class="line">		&lt;typeAlias alias=&quot;Post&quot; type=&quot;com.lidolid.pojo.Post&quot; /&gt;</div><div class="line">	&lt;/typeAliases&gt;</div><div class="line">	&lt;environments default=&quot;development&quot;&gt;</div><div class="line">		&lt;environment id=&quot;development&quot;&gt;</div><div class="line">			&lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">			&lt;dataSource type=&quot;POOLED&quot;&gt;</div><div class="line">				&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">				&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot; /&gt;</div><div class="line">				&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">				&lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">			&lt;/dataSource&gt;</div><div class="line">		&lt;/environment&gt;</div><div class="line">	&lt;/environments&gt;</div><div class="line"></div><div class="line">	&lt;mappers&gt;</div><div class="line">		&lt;mapper resource=&quot;com/lidolid/pojo/User.xml&quot; /&gt;</div><div class="line">	&lt;/mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h5 id="2-2-User-xml"><a href="#2-2-User-xml" class="headerlink" title="2.2 User.xml"></a>2.2 User.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;mapper namespace=&quot;com.lidolid.userMaper&quot;&gt;</div><div class="line">	&lt;!-- User 级联文章查询 方法配置 (多个文章对一个用户) --&gt;</div><div class="line"></div><div class="line">	&lt;resultMap type=&quot;Post&quot; id=&quot;resultPostsMap&quot;&gt;</div><div class="line">		&lt;result property=&quot;id&quot; column=&quot;post_id&quot; /&gt;</div><div class="line">		&lt;result property=&quot;title&quot; column=&quot;title&quot; /&gt;</div><div class="line">		&lt;result property=&quot;content&quot; column=&quot;content&quot; /&gt;</div><div class="line">		&lt;association property=&quot;user&quot; javaType=&quot;User&quot;&gt;</div><div class="line">			&lt;id property=&quot;id&quot; column=&quot;userid&quot; /&gt;</div><div class="line">			&lt;result property=&quot;username&quot; column=&quot;username&quot; /&gt;</div><div class="line">			&lt;result property=&quot;mobile&quot; column=&quot;mobile&quot; /&gt;</div><div class="line">		&lt;/association&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getPosts&quot; resultMap=&quot;resultPostsMap&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">		SELECT u.*,p.*</div><div class="line">		FROM user u, post p</div><div class="line">		WHERE u.id=p.userid AND</div><div class="line">		p.post_id=#&#123;post_id&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line"></div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意结果类型的定义方式，使用到了一个&lt;association&gt;标签，关联对应的User类。</p>
</blockquote>
<h4 id="4-运行测试"><a href="#4-运行测试" class="headerlink" title="4. 运行测试"></a>4. 运行测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">import java.io.Reader;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.ibatis.session.SqlSession;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactory;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"></div><div class="line">import com.lidolid.pojo.Post;</div><div class="line">import com.lidolid.pojo.User;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	private static SqlSessionFactory sqlSessionFactory;</div><div class="line">	private static Reader reader;</div><div class="line"></div><div class="line">	static &#123;</div><div class="line">		try &#123;</div><div class="line">			reader = Resources.getResourceAsReader(&quot;config/Configure.xml&quot;);</div><div class="line">			sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static SqlSessionFactory getSession() &#123;</div><div class="line">		return sqlSessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @param args</div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		try &#123;</div><div class="line">			int postId = 1;</div><div class="line">			Post post = session.selectOne(&quot;com.lidolid.userMaper.getPosts&quot;, postId);</div><div class="line">			System.out.println(&quot;title: &quot; + post.getTitle());</div><div class="line">			System.out.println(&quot;userName: &quot; + post.getUser().getUsername());</div><div class="line">		&#125; finally &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：<br><img src="https://i.imgur.com/tUtDLXG.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MyBatis表关联many2one&quot;&gt;&lt;a href=&quot;#MyBatis表关联many2one&quot; class=&quot;headerlink&quot; title=&quot;MyBatis表关联many2one&quot;&gt;&lt;/a&gt;MyBatis表关联many2one&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文介绍Mybatis如何进行多对一关联，并实现关联查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="关联" scheme="http://yoursite.com/tags/%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis表关联one2many</title>
    <link href="http://yoursite.com/2017/08/26/Mybatis_0200_one2many/"/>
    <id>http://yoursite.com/2017/08/26/Mybatis_0200_one2many/</id>
    <published>2017-08-26T06:37:31.000Z</published>
    <updated>2017-09-20T15:49:43.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MyBatis表关联one2many"><a href="#MyBatis表关联one2many" class="headerlink" title="MyBatis表关联one2many"></a>MyBatis表关联one2many</h3><p>在实际项目中，经常是关联表的查询，比如：最常见到的多对一，一对多等。在Java实体对象对中，一对多可以根据List和Set来实现，两者在mybitis中都是通过collection标签来配合来加以实现。本文介绍多表中的一对多关联查询。<br><a id="more"></a></p>
<h4 id="1-建表"><a href="#1-建表" class="headerlink" title="1. 建表"></a>1. 建表</h4><h5 id="1-1-建立user表，并插入一个用户"><a href="#1-1-建立user表，并插入一个用户" class="headerlink" title="1.1 建立user表，并插入一个用户"></a>1.1 建立user表，并插入一个用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `mobile` int(10) unsigned NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `created` datetime NOT NULL DEFAULT &apos;0000-00-00 00:00:00&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `user` VALUES (&apos;1&apos;, &apos;yiibai&apos;, &apos;100&apos;, &apos;2015-09-23 20:11:23&apos;);</div></pre></td></tr></table></figure>
<h5 id="1-2-建立post表，并插入两条发表记录"><a href="#1-2-建立post表，并插入两条发表记录" class="headerlink" title="1.2 建立post表，并插入两条发表记录"></a>1.2 建立post表，并插入两条发表记录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `post` (</div><div class="line">  `post_id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `userid` int(10) unsigned NOT NULL,</div><div class="line">  `title` varchar(254) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `content` text,</div><div class="line">  `created` datetime NOT NULL DEFAULT &apos;0000-00-00 00:00:00&apos;,</div><div class="line">  PRIMARY KEY (`post_id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `post` VALUES (&apos;1&apos;, &apos;1&apos;, &apos;MyBatis关联数据查询&apos;, &apos;在实际项目中，经常使用关联表的查询，比如：多对一，一对多等。这些查询是如何处理的呢，这一讲就讲这个问题。我们首先创建一个 post 表，并初始化数据.&apos;, &apos;2015-09-23 21:40:17&apos;);</div><div class="line">INSERT INTO `post` VALUES (&apos;2&apos;, &apos;1&apos;, &apos;MyBatis开发环境搭建&apos;, &apos;为了方便学习，这里直接建立java 工程，但一般都是开发 Web 项目。&apos;, &apos;2015-09-23 21:42:14&apos;);</div><div class="line">INSERT INTO `post` VALUES (&apos;3&apos;, &apos;2&apos;, &apos;这个是别人发的&apos;, &apos;content,内容...&apos;, &apos;0000-00-00 00:00:00&apos;);</div></pre></td></tr></table></figure>
<h4 id="2-创建表对应的JavaBean对象"><a href="#2-创建表对应的JavaBean对象" class="headerlink" title="2. 创建表对应的JavaBean对象"></a>2. 创建表对应的JavaBean对象</h4><h5 id="2-1-User-java"><a href="#2-1-User-java" class="headerlink" title="2.1 User.java"></a>2.1 User.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class User implements Serializable &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String username;</div><div class="line">	private String mobile;</div><div class="line">	private List&lt;Post&gt; posts;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getUsername() &#123;</div><div class="line">		return username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsername(String username) &#123;</div><div class="line">		this.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getMobile() &#123;</div><div class="line">		return mobile;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setMobile(String mobile) &#123;</div><div class="line">		this.mobile = mobile;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Post&gt; getPosts() &#123;</div><div class="line">		return posts;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPosts(List&lt;Post&gt; posts) &#123;</div><div class="line">		this.posts = posts;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;User [id=&quot; + id + &quot;, name=&quot; + username + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-2-Post-java"><a href="#2-2-Post-java" class="headerlink" title="2.2 Post.java"></a>2.2 Post.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.pojo;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">public class Post implements Serializable &#123;</div><div class="line">	private int id;</div><div class="line">	private User user;</div><div class="line">	private String title;</div><div class="line">	private String content;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public User getUser() &#123;</div><div class="line">		return user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUser(User user) &#123;</div><div class="line">		this.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getTitle() &#123;</div><div class="line">		return title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTitle(String title) &#123;</div><div class="line">		this.title = title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getContent() &#123;</div><div class="line">		return content;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setContent(String content) &#123;</div><div class="line">		this.content = content;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h4><h5 id="3-1-Configure-xml"><a href="#3-1-Configure-xml" class="headerlink" title="3.1 Configure.xml"></a>3.1 Configure.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;typeAliases&gt;</div><div class="line">		&lt;typeAlias alias=&quot;User&quot; type=&quot;com.lidolid.pojo.User&quot; /&gt;</div><div class="line">		&lt;typeAlias alias=&quot;Post&quot; type=&quot;com.lidolid.pojo.Post&quot; /&gt;</div><div class="line">	&lt;/typeAliases&gt;</div><div class="line">	&lt;environments default=&quot;development&quot;&gt;</div><div class="line">		&lt;environment id=&quot;development&quot;&gt;</div><div class="line">			&lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">			&lt;dataSource type=&quot;POOLED&quot;&gt;</div><div class="line">				&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">				&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot; /&gt;</div><div class="line">				&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">				&lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">			&lt;/dataSource&gt;</div><div class="line">		&lt;/environment&gt;</div><div class="line">	&lt;/environments&gt;</div><div class="line"></div><div class="line">	&lt;mappers&gt;</div><div class="line">		&lt;mapper resource=&quot;com/lidolid/pojo/User.xml&quot; /&gt;</div><div class="line">	&lt;/mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h5 id="3-2-User-xml"><a href="#3-2-User-xml" class="headerlink" title="3.2 User.xml"></a>3.2 User.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;mapper namespace=&quot;com.lidolid.userMaper&quot;&gt;</div><div class="line">	&lt;!-- User 级联文章查询 方法配置 (一个用户对多个文章)  --&gt;</div><div class="line">	</div><div class="line">	&lt;resultMap type=&quot;User&quot; id=&quot;resultUserMap&quot;&gt;</div><div class="line">		&lt;result property=&quot;id&quot; column=&quot;user_id&quot; /&gt;</div><div class="line">		&lt;result property=&quot;username&quot; column=&quot;username&quot; /&gt;</div><div class="line">		&lt;result property=&quot;mobile&quot; column=&quot;mobile&quot; /&gt;</div><div class="line">		&lt;collection property=&quot;posts&quot; ofType=&quot;com.lidolid.pojo.Post&quot; column=&quot;userid&quot;&gt;</div><div class="line">			&lt;id property=&quot;id&quot; column=&quot;post_id&quot; javaType=&quot;int&quot; jdbcType=&quot;INTEGER&quot;/&gt;    </div><div class="line">            &lt;result property=&quot;title&quot; column=&quot;title&quot; javaType=&quot;string&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</div><div class="line">            &lt;result property=&quot;content&quot; column=&quot;content&quot; javaType=&quot;string&quot; jdbcType=&quot;VARCHAR&quot;/&gt; </div><div class="line">		&lt;/collection&gt;</div><div class="line">	&lt;/resultMap&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getUser&quot; resultMap=&quot;resultUserMap&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">		SELECT u.*,p.*</div><div class="line">		FROM user u, post p</div><div class="line">		WHERE u.id=p.userid AND id=#&#123;user_id&#125; </div><div class="line">  &lt;/select&gt;</div><div class="line"></div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意结果类型的定义方式</p>
</blockquote>
<h4 id="4-运行测试"><a href="#4-运行测试" class="headerlink" title="4. 运行测试"></a>4. 运行测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">import java.io.Reader;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.ibatis.session.SqlSession;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactory;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"></div><div class="line">import com.lidolid.pojo.Post;</div><div class="line">import com.lidolid.pojo.User;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	private static SqlSessionFactory sqlSessionFactory;</div><div class="line">	private static Reader reader;</div><div class="line"></div><div class="line">	static &#123;</div><div class="line">		try &#123;</div><div class="line">			reader = Resources.getResourceAsReader(&quot;config/Configure.xml&quot;);</div><div class="line">			sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static SqlSessionFactory getSession() &#123;</div><div class="line">		return sqlSessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @param args</div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		try &#123;</div><div class="line">			int userid = 1;</div><div class="line">			User user = session.selectOne(&quot;com.lidolid.userMaper.getUser&quot;, 1);</div><div class="line">			System.out.println(&quot;username: &quot; + user.getUsername() + &quot;,&quot;);</div><div class="line">			List&lt;Post&gt; posts = user.getPosts();</div><div class="line">			for (Post p : posts) &#123;</div><div class="line">				System.out.println(&quot;Title:&quot; + p.getTitle());</div><div class="line">				System.out.println(&quot;Content:&quot; + p.getContent());</div><div class="line">			&#125;</div><div class="line">		&#125; finally &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：<br><img src="https://i.imgur.com/yfM1MEv.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MyBatis表关联one2many&quot;&gt;&lt;a href=&quot;#MyBatis表关联one2many&quot; class=&quot;headerlink&quot; title=&quot;MyBatis表关联one2many&quot;&gt;&lt;/a&gt;MyBatis表关联one2many&lt;/h3&gt;&lt;p&gt;在实际项目中，经常是关联表的查询，比如：最常见到的多对一，一对多等。在Java实体对象对中，一对多可以根据List和Set来实现，两者在mybitis中都是通过collection标签来配合来加以实现。本文介绍多表中的一对多关联查询。&lt;br&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="关联" scheme="http://yoursite.com/tags/%E5%85%B3%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis实现CRUD</title>
    <link href="http://yoursite.com/2017/08/25/Mybatis_0102_CRUD/"/>
    <id>http://yoursite.com/2017/08/25/Mybatis_0102_CRUD/</id>
    <published>2017-08-25T15:08:19.000Z</published>
    <updated>2017-09-20T14:45:30.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MyBatis实现CRUD"><a href="#MyBatis实现CRUD" class="headerlink" title="MyBatis实现CRUD"></a>MyBatis实现CRUD</h3><p>&emsp;&emsp;本文介绍如何使用Mybatis自定义接口来实现数据库的增删改查操作，分别通过xml和注解的形式实现。<br>&emsp;&emsp;开发环境：</p>
<ul>
<li>mysql 5.0</li>
<li>jdk 1.8</li>
<li>mybatis 3.3.0</li>
</ul>
<a id="more"></a>
<h4 id="1-创建java类和接口"><a href="#1-创建java类和接口" class="headerlink" title="1. 创建java类和接口"></a>1. 创建java类和接口</h4><h5 id="1-1-User-Java"><a href="#1-1-User-Java" class="headerlink" title="1.1 User.Java"></a>1.1 User.Java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.models;</div><div class="line"></div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private String dept;</div><div class="line">	private String phone;</div><div class="line">	private String website;</div><div class="line"></div><div class="line">	public String getWebsite() &#123;</div><div class="line">		return website;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setWebsite(String website) &#123;</div><div class="line">		this.website = website;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getDept() &#123;</div><div class="line">		return dept;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setDept(String dept) &#123;</div><div class="line">		this.dept = dept;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getPhone() &#123;</div><div class="line">		return phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPhone(String phone) &#123;</div><div class="line">		this.phone = phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-2-IUser-java"><a href="#1-2-IUser-java" class="headerlink" title="1.2 IUser.java"></a>1.2 IUser.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.dao;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.lidolid.mybatis.models.User;</div><div class="line"></div><div class="line">public interface IUser &#123;</div><div class="line">	public List&lt;User&gt; getUserList();</div><div class="line"></div><div class="line">    public void insertUser(User user);</div><div class="line"></div><div class="line">    public void updateUser(User user);</div><div class="line"></div><div class="line">    public void deleteUser(int userId);</div><div class="line"></div><div class="line">    public User getUser(int id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-3-实体映射文件user-xml，并定义自定义接口"><a href="#1-3-实体映射文件user-xml，并定义自定义接口" class="headerlink" title="1.3 实体映射文件user.xml，并定义自定义接口"></a>1.3 实体映射文件user.xml，并定义自定义接口</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;mapper namespace=&quot;com.lidolid.mybatis.dao.IUser&quot;&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getUser&quot; parameterType=&quot;int&quot;</div><div class="line">		resultType=&quot;com.lidolid.mybatis.models.User&quot;&gt;</div><div class="line">		SELECT *</div><div class="line">		FROM USER</div><div class="line">		WHERE id = #&#123;userId&#125;</div><div class="line">	&lt;/select&gt;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;insert id=&quot;insertUser&quot; parameterType=&quot;User&quot;&gt;</div><div class="line">		INSERT INTO USER(name,</div><div class="line">		dept, website,phone)</div><div class="line">		VALUES(#&#123;name&#125;, #&#123;dept&#125;, #&#123;website&#125;, #&#123;phone&#125;)</div><div class="line">	&lt;/insert&gt;</div><div class="line"></div><div class="line">	&lt;select id=&quot;getUserList&quot; resultType=&quot;com.lidolid.mybatis.models.User&quot;&gt;</div><div class="line">		SELECT * FROM USER</div><div class="line">	&lt;/select&gt;</div><div class="line"></div><div class="line">	&lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt;</div><div class="line">		UPDATE USER</div><div class="line">		SET</div><div class="line">		name=</div><div class="line">		#&#123;name&#125;,</div><div class="line">		dept = #&#123;dept&#125;,</div><div class="line">		website = #&#123;website&#125;,</div><div class="line">		phone = #&#123;phone&#125;</div><div class="line">		WHERE</div><div class="line">		id =</div><div class="line">		#&#123;id&#125;</div><div class="line">	&lt;/update&gt;</div><div class="line"></div><div class="line">	&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</div><div class="line">		DELETE FROM USER WHERE id = #&#123;id&#125;</div><div class="line">	&lt;/delete&gt;</div><div class="line"></div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：mapper的namespace属性设置的值一定要和接口的package一致，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;mapper namespace=&quot;com.lidolid.mybatis.dao.IUser&quot;&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-运行测试"><a href="#2-运行测试" class="headerlink" title="2. 运行测试"></a>2. 运行测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.common;</div><div class="line"></div><div class="line">import java.io.Reader;</div><div class="line">import java.text.MessageFormat;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.ibatis.session.SqlSession;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactory;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"></div><div class="line">import com.lidolid.mybatis.dao.IUser;</div><div class="line">import com.lidolid.mybatis.models.User;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	private static SqlSessionFactory sqlSessionFactory;</div><div class="line">	private static Reader reader;</div><div class="line"></div><div class="line">	static &#123;</div><div class="line">		try &#123;</div><div class="line">			reader = Resources.getResourceAsReader(&quot;config/Configure.xml&quot;);</div><div class="line">			sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static SqlSessionFactory getSession() &#123;</div><div class="line">		return sqlSessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @param args</div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		try &#123;</div><div class="line"></div><div class="line">			// 用户数据列表</div><div class="line">			//getUserList();</div><div class="line">			</div><div class="line">			// 插入数据</div><div class="line">			//testInsert();</div><div class="line"></div><div class="line">			// 更新用户</div><div class="line">			//testUpdate();</div><div class="line"></div><div class="line">			// 删除数据</div><div class="line">			testDelete();</div><div class="line"></div><div class="line">		&#125; finally &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//</div><div class="line">	public static void testInsert() &#123;</div><div class="line">		try &#123;</div><div class="line">			// 获取Session连接</div><div class="line">			SqlSession session = sqlSessionFactory.openSession();</div><div class="line">			// 获取Mapper</div><div class="line">			IUser userMapper = session.getMapper(IUser.class);</div><div class="line">			System.out.println(&quot;Test insert start...&quot;);</div><div class="line">			// 执行插入</div><div class="line">			User user = new User();</div><div class="line">			user.setId(0);</div><div class="line">			user.setName(&quot;Google&quot;);</div><div class="line">			user.setDept(&quot;Tech&quot;);</div><div class="line">			user.setWebsite(&quot;http://www.google.com&quot;);</div><div class="line">			user.setPhone(&quot;120&quot;);</div><div class="line">			userMapper.insertUser(user);</div><div class="line">			// 提交事务</div><div class="line">			session.commit();</div><div class="line"></div><div class="line">			// 显示插入之后User信息</div><div class="line">			System.out.println(&quot;After insert&quot;);</div><div class="line">			getUserList();</div><div class="line">			System.out.println(&quot;Test insert finished...&quot;);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 获取用户列表</div><div class="line">	public static void getUserList() &#123;</div><div class="line">		try &#123;</div><div class="line">			SqlSession session = sqlSessionFactory.openSession();</div><div class="line">			IUser iuser = session.getMapper(IUser.class);</div><div class="line">			System.out.println(&quot;Test get start...&quot;);</div><div class="line">			printUsers(iuser.getUserList());</div><div class="line">			System.out.println(&quot;Test Get finished...&quot;);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void testUpdate() &#123;</div><div class="line">		try &#123;</div><div class="line">			SqlSession session = sqlSessionFactory.openSession();</div><div class="line">			IUser iuser = session.getMapper(IUser.class);</div><div class="line">			System.out.println(&quot;Test update start...&quot;);</div><div class="line">			printUsers(iuser.getUserList());</div><div class="line">			// 执行更新</div><div class="line">			User user = iuser.getUser(1);</div><div class="line">			user.setName(&quot;New name&quot;);</div><div class="line">			iuser.updateUser(user);</div><div class="line">			// 提交事务</div><div class="line">			session.commit();</div><div class="line">			// 显示更新之后User信息</div><div class="line">			System.out.println(&quot;After update&quot;);</div><div class="line">			printUsers(iuser.getUserList());</div><div class="line">			System.out.println(&quot;Test update finished...&quot;);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 删除用户信息</div><div class="line">	public static void testDelete() &#123;</div><div class="line">		try &#123;</div><div class="line">			SqlSession session = sqlSessionFactory.openSession();</div><div class="line">			IUser iuser = session.getMapper(IUser.class);</div><div class="line">			System.out.println(&quot;Test delete start...&quot;);</div><div class="line">			// 显示删除之前User信息</div><div class="line">			System.out.println(&quot;Before delete&quot;);</div><div class="line">			printUsers(iuser.getUserList());</div><div class="line">			// 执行删除</div><div class="line">			iuser.deleteUser(2);</div><div class="line">			// 提交事务</div><div class="line">			session.commit();</div><div class="line">			// 显示删除之后User信息</div><div class="line">			System.out.println(&quot;After delete&quot;);</div><div class="line">			printUsers(iuser.getUserList());</div><div class="line">			System.out.println(&quot;Test delete finished...&quot;);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 * 打印用户信息到控制台</div><div class="line">	 * </div><div class="line">	 * @param users</div><div class="line">	 */</div><div class="line">	private static void printUsers(final List&lt;User&gt; users) &#123;</div><div class="line">		int count = 0;</div><div class="line"></div><div class="line">		for (User user : users) &#123;</div><div class="line">			System.out.println(MessageFormat.format(&quot;============= User[&#123;0&#125;]=================&quot;, ++count));</div><div class="line">			System.out.println(&quot;User Id: &quot; + user.getId());</div><div class="line">			System.out.println(&quot;User Name: &quot; + user.getName());</div><div class="line">			System.out.println(&quot;User Dept: &quot; + user.getDept());</div><div class="line">			System.out.println(&quot;User Website: &quot; + user.getWebsite());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意： 在自定义接口和xml配合使用时(sql实现未定义在接口中)，可以通过如下方式调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 获取Session连接</div><div class="line">SqlSession session = sqlSessionFactory.openSession();</div><div class="line">// 获取Mapper</div><div class="line">IUser userMapper = session.getMapper(IUser.class);</div><div class="line">// 执行插入</div><div class="line">User user = new User();</div><div class="line">user.setId(0);</div><div class="line">user.setName(&quot;Google&quot;);</div><div class="line">user.setDept(&quot;Tech&quot;);</div><div class="line">user.setWebsite(&quot;http://www.google.com&quot;);</div><div class="line">user.setPhone(&quot;120&quot;);</div><div class="line">userMapper.insertUser(user);</div><div class="line">// 提交事务</div><div class="line">session.commit();</div></pre></td></tr></table></figure>
<p>若不使用自定义接口(sql实现仅在xml中定义，不存在自定义接口)，只能通过如下方式调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SqlSession session = sqlSessionFactory.openSession();</div><div class="line">List&lt;User&gt; users = session.selectList(&quot;com.lidolid.mybatis.models.UserMapper.getUserList&quot;);</div></pre></td></tr></table></figure>
<p>显然通过配合使用自定义接口的方式更方便</p>
</blockquote>
<h4 id="3-使用注解形式的实现"><a href="#3-使用注解形式的实现" class="headerlink" title="3. 使用注解形式的实现"></a>3. 使用注解形式的实现</h4><p>&emsp;&emsp;在自定义接口定义sql的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.dao;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.annotations.Delete;</div><div class="line">import org.apache.ibatis.annotations.Insert;</div><div class="line">import org.apache.ibatis.annotations.Select;</div><div class="line">import org.apache.ibatis.annotations.Update;</div><div class="line"></div><div class="line">import com.lidolid.mybatis.models.User;</div><div class="line"></div><div class="line">public interface IUser &#123;</div><div class="line">	@Select(&quot;SELECT * FROM USER&quot;)</div><div class="line">	public List&lt;User&gt; getUserList();</div><div class="line"></div><div class="line">	@Insert(&quot;INSERT INTO USER(name, dept, website,phone) VALUES(#&#123;name&#125;, #&#123;dept&#125;, #&#123;website&#125;, #&#123;phone&#125;)&quot;)</div><div class="line">	public void insertUser(User user);</div><div class="line"></div><div class="line">	@Update(&quot;UPDATE USER SET name= #&#123;name&#125;, dept = #&#123;dept&#125;, website = #&#123;website&#125;, phone = #&#123;phone&#125; WHERE id = #&#123;id&#125;&quot;)</div><div class="line">	public void updateUser(User user);</div><div class="line"></div><div class="line">	@Delete(&quot;DELETE FROM USER WHERE id = #&#123;id&#125;&quot;)</div><div class="line">	public void deleteUser(int userId);</div><div class="line"></div><div class="line">	@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</div><div class="line">	public User getUser(int id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;调用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public static void testUpdate() &#123;</div><div class="line">	try &#123;</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		IUser iuser = session.getMapper(IUser.class);</div><div class="line">		System.out.println(&quot;Test update start...&quot;);</div><div class="line">		printUsers(iuser.getUserList());</div><div class="line">		// 执行更新</div><div class="line">		User user = iuser.getUser(3);</div><div class="line">		user.setName(&quot;New name&quot;);</div><div class="line">		iuser.updateUser(user);</div><div class="line">		// 提交事务</div><div class="line">		session.commit();</div><div class="line">		// 显示更新之后User信息</div><div class="line">		System.out.println(&quot;After update&quot;);</div><div class="line">		printUsers(iuser.getUserList());</div><div class="line">		System.out.println(&quot;Test update finished...&quot;);</div><div class="line">	&#125; catch (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用注解时，一定注意自定义接口的注册</p>
<ul>
<li>sqlSessionFactory.getConfiguration().addMapper(IUser.class);</li>
<li>在Mybatis配置文件mappers节点添加package属性声明自定义接口，如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;mappers&gt;</div><div class="line">	&lt;!-- 注册自己的定义的接口 --&gt;</div><div class="line">	&lt;package name=&quot;com.lidolid.mybatis.dao&quot;/&gt;</div><div class="line">&lt;/mappers&gt;</div></pre></td></tr></table></figure></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MyBatis实现CRUD&quot;&gt;&lt;a href=&quot;#MyBatis实现CRUD&quot; class=&quot;headerlink&quot; title=&quot;MyBatis实现CRUD&quot;&gt;&lt;/a&gt;MyBatis实现CRUD&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文介绍如何使用Mybatis自定义接口来实现数据库的增删改查操作，分别通过xml和注解的形式实现。&lt;br&gt;&amp;emsp;&amp;emsp;开发环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql 5.0&lt;/li&gt;
&lt;li&gt;jdk 1.8&lt;/li&gt;
&lt;li&gt;mybatis 3.3.0&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CRUD" scheme="http://yoursite.com/tags/CRUD/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis基础配置之注解</title>
    <link href="http://yoursite.com/2017/08/24/Mybatis_0101_configuration_annotation/"/>
    <id>http://yoursite.com/2017/08/24/Mybatis_0101_configuration_annotation/</id>
    <published>2017-08-24T14:17:45.000Z</published>
    <updated>2017-09-20T14:16:44.489Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MyBatis基础配置之注解"><a href="#MyBatis基础配置之注解" class="headerlink" title="MyBatis基础配置之注解"></a>MyBatis基础配置之注解</h3><p>&emsp;&emsp;在使用xml进行实体类映射，并在xml文件中定义查询接口时，是通过用SqlSession实例来直接执行在User.xml文件中映射的SQL语句：<br>session.selectOne(“com.yiibai.mybatis.models.UserMapper.getUserByID”, 1)，但是还有比这更简单的方法，使用合理描述参数和SQL语句返回值的接口(比如：IUser.class)，这样现在就可以不使用类似User.xml配置文件，至此更简单，代码更安全，不容易发生的字符串文字和转换的错误。<br><a id="more"></a></p>
<h4 id="3-创建User实体类及实体类配置文件"><a href="#3-创建User实体类及实体类配置文件" class="headerlink" title="3. 创建User实体类及实体类配置文件"></a>3. 创建User实体类及实体类配置文件</h4><p>&emsp;&emsp;User实体类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.models;</div><div class="line"></div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private String dept;</div><div class="line">	private String phone;</div><div class="line">	private String website;</div><div class="line"></div><div class="line">	public String getWebsite() &#123;</div><div class="line">		return website;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setWebsite(String website) &#123;</div><div class="line">		this.website = website;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getDept() &#123;</div><div class="line">		return dept;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setDept(String dept) &#123;</div><div class="line">		this.dept = dept;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getPhone() &#123;</div><div class="line">		return phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPhone(String phone) &#123;</div><div class="line">		this.phone = phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-创建一个接口：IUser，并在其中声明对应的操作方法"><a href="#2-创建一个接口：IUser，并在其中声明对应的操作方法" class="headerlink" title="2. 创建一个接口：IUser，并在其中声明对应的操作方法"></a>2. 创建一个接口：IUser，并在其中声明对应的操作方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.dao;</div><div class="line"></div><div class="line">import org.apache.ibatis.annotations.Select;</div><div class="line"></div><div class="line">import com.lidolid.mybatis.models.User;</div><div class="line"></div><div class="line">public interface IUser &#123;</div><div class="line">	@Select(&quot;select * from user where id= #&#123;id&#125;&quot;)</div><div class="line">    public User getUserByID(int id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-创建Mybatis配置文件Configure-xml"><a href="#3-创建Mybatis配置文件Configure-xml" class="headerlink" title="3. 创建Mybatis配置文件Configure.xml"></a>3. 创建Mybatis配置文件Configure.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;typeAliases&gt;</div><div class="line">		&lt;typeAlias alias=&quot;User&quot; type=&quot;com.lidolid.mybatis.models.User&quot; /&gt;</div><div class="line">	&lt;/typeAliases&gt;</div><div class="line">	&lt;environments default=&quot;development&quot;&gt;</div><div class="line">	    &lt;environment id=&quot;development&quot;&gt;</div><div class="line">		&lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">			&lt;dataSource type=&quot;POOLED&quot;&gt;  </div><div class="line">                            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">			    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot; /&gt;</div><div class="line">			    &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">			    &lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">                       &lt;/dataSource&gt;</div><div class="line">		&lt;/environment&gt;</div><div class="line">	&lt;/environments&gt;</div><div class="line"></div><div class="line">	&lt;mappers&gt;</div><div class="line">	    &lt;!-- 注释掉了 --&gt;</div><div class="line">	    &lt;!--  &lt;mapper resource=&quot;com/lidolid/mybatis/models/User.xml&quot; /&gt; --&gt;</div><div class="line">	&lt;/mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h4 id="4-运行测试接口映射"><a href="#4-运行测试接口映射" class="headerlink" title="4. 运行测试接口映射"></a>4. 运行测试接口映射</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.common;</div><div class="line"></div><div class="line">import java.io.Reader;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.ibatis.session.SqlSession;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactory;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"></div><div class="line">import com.lidolid.mybatis.dao.IUser;</div><div class="line">import com.lidolid.mybatis.models.User;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	private static SqlSessionFactory sqlSessionFactory;</div><div class="line">    private static Reader reader;</div><div class="line">    static &#123;</div><div class="line">        try &#123;</div><div class="line">            reader = Resources.getResourceAsReader(&quot;config/Configure.xml&quot;);</div><div class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</div><div class="line">            //请注意下面这行代码，用来注册自己的接口</div><div class="line">            sqlSessionFactory.getConfiguration().addMapper(IUser.class);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static SqlSessionFactory getSession() &#123;</div><div class="line">        return sqlSessionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SqlSession session = sqlSessionFactory.openSession();</div><div class="line">        try &#123;</div><div class="line">            IUser iuser = session.getMapper(IUser.class);</div><div class="line">            User user = iuser.getUserByID(1);</div><div class="line">            System.out.println(&quot;名字：&quot;+user.getName());</div><div class="line">            System.out.println(&quot;所属部门：&quot;+user.getDept());</div><div class="line">            System.out.println(&quot;主页：&quot;+user.getWebsite());</div><div class="line">        &#125; finally &#123;</div><div class="line">            session.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：<br><img src="https://i.imgur.com/jkgyqu3.png" alt=""></p>
<blockquote>
<p>查询接口映射成功<br>在使用注解进行Mybatis映射时，需要对自己定义的接口进行注册，注册方法有以下两种：</p>
<ul>
<li>sqlSessionFactory.getConfiguration().addMapper(IUser.class);</li>
<li>在Mybatis配置文件mappers节点添加package属性声明自定义接口，如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;mappers&gt;</div><div class="line">	&lt;!-- 注册自己的定义的接口 --&gt;</div><div class="line">	&lt;package name=&quot;com.lidolid.mybatis.dao&quot;/&gt;</div><div class="line">&lt;/mappers&gt;</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MyBatis基础配置之注解&quot;&gt;&lt;a href=&quot;#MyBatis基础配置之注解&quot; class=&quot;headerlink&quot; title=&quot;MyBatis基础配置之注解&quot;&gt;&lt;/a&gt;MyBatis基础配置之注解&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在使用xml进行实体类映射，并在xml文件中定义查询接口时，是通过用SqlSession实例来直接执行在User.xml文件中映射的SQL语句：&lt;br&gt;session.selectOne(“com.yiibai.mybatis.models.UserMapper.getUserByID”, 1)，但是还有比这更简单的方法，使用合理描述参数和SQL语句返回值的接口(比如：IUser.class)，这样现在就可以不使用类似User.xml配置文件，至此更简单，代码更安全，不容易发生的字符串文字和转换的错误。&lt;br&gt;
    
    </summary>
    
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="Annotation" scheme="http://yoursite.com/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 基础配置</title>
    <link href="http://yoursite.com/2017/08/24/Mybatis_0100_configuration_xml/"/>
    <id>http://yoursite.com/2017/08/24/Mybatis_0100_configuration_xml/</id>
    <published>2017-08-24T10:46:19.000Z</published>
    <updated>2017-09-20T14:02:01.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MyBatis-基础配置"><a href="#MyBatis-基础配置" class="headerlink" title="MyBatis 基础配置"></a>MyBatis 基础配置</h3><p>&emsp;&emsp;MyBatis 是支持普通SQL查询,存储过程和高级映射的优秀持久层框架。MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis使用简单的XML或注解用于配置和原始映射,将接口和Java的POJOs(Plain Old Java Objects，普通的Java对象)映射成数据库中的记录。<br><a id="more"></a><br>&emsp;&emsp;每个MyBatis应用程序主要都是使用SqlSessionFactory实例的，一个SqlSessionFactory实例可以通过SqlSessionFactoryBuilder获得。SqlSessionFactoryBuilder可以从一个xml配置文件或者一个预定义的配置类的实例获得。<br>&emsp;&emsp;用xml文件构建SqlSessionFactory实例是非常简单的事情。推荐在这个配置中使用类路径资源(classpath resource)，但你可以使用任何Reader实例，包括用文件路径或file://开头的url创建的实例。MyBatis有一个实用类—-Resources，它有很多方法，可以方便地从类路径及其它位置加载资源。<br>&emsp;&emsp;MyBatis最强大的特性之一就是它的动态语句功能。如果以前有使用JDBC或者类似框架的经历，就会明白把SQL语句条件连接在一起是多么的痛苦，要确保不能忘记空格或者不要在columns列后面省略一个逗号等。动态语句能够完全解决掉这些痛苦。尽管与动态SQL一起工作不是在开一个party，但是MyBatis确实能通过在任何映射SQL语句中。</p>
<h4 id="1-MyBatis开发环境配置"><a href="#1-MyBatis开发环境配置" class="headerlink" title="1. MyBatis开发环境配置"></a>1. MyBatis开发环境配置</h4><ul>
<li>mysql 5.0</li>
<li>jdk 1.8</li>
<li>mybatis 3.3.0</li>
</ul>
<p>本文介绍使用xml进行实体类与数据库之间的映射。</p>
<h4 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2. 创建表"></a>2. 创建表</h4><p>&emsp;&emsp;创建一个user表，并插入一条数据，Sql语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `name` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `dept` varchar(254) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `website` varchar(254) DEFAULT &apos;&apos;,</div><div class="line">  `phone` varchar(16) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `user` VALUES (&apos;1&apos;, &apos;lidolid&apos;, &apos;Tech&apos;, &apos;http://www.lidolid.com&apos;, &apos;13127802997&apos;);</div></pre></td></tr></table></figure>
<h4 id="3-创建User实体类及实体类配置文件"><a href="#3-创建User实体类及实体类配置文件" class="headerlink" title="3. 创建User实体类及实体类配置文件"></a>3. 创建User实体类及实体类配置文件</h4><p>&emsp;&emsp;User实体类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.models;</div><div class="line"></div><div class="line">public class User &#123;</div><div class="line"></div><div class="line">	private int id;</div><div class="line">	private String name;</div><div class="line">	private String dept;</div><div class="line">	private String phone;</div><div class="line">	private String website;</div><div class="line"></div><div class="line">	public String getWebsite() &#123;</div><div class="line">		return website;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setWebsite(String website) &#123;</div><div class="line">		this.website = website;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(int id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getDept() &#123;</div><div class="line">		return dept;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setDept(String dept) &#123;</div><div class="line">		this.dept = dept;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getPhone() &#123;</div><div class="line">		return phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPhone(String phone) &#123;</div><div class="line">		this.phone = phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;实体类配置文件User.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; </div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;mapper namespace=&quot;com.lidolid.mybatis.models.UserMapper&quot;&gt;</div><div class="line">	&lt;select id=&quot;GetUserByID&quot; parameterType=&quot;int&quot; resultType=&quot;User&quot;&gt;</div><div class="line">		select * from `user` where id = #&#123;id&#125;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>与hibernate映射文件不同的是，mybatis映射文件并未进行实体字段与数据库字段的映射。而增加了查询接口的定义，这是hibernate不支持的。</p>
</blockquote>
<h4 id="5-创建Mybatis配置文件"><a href="#5-创建Mybatis配置文件" class="headerlink" title="5. 创建Mybatis配置文件"></a>5. 创建Mybatis配置文件</h4><p>&emsp;&emsp;创建 Mybatis配置文件Configure.xml，目录在config文件下，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;typeAliases&gt;</div><div class="line">		&lt;typeAlias alias=&quot;User&quot; type=&quot;com.lidolid.mybatis.models.User&quot; /&gt;</div><div class="line">	&lt;/typeAliases&gt;</div><div class="line">	&lt;environments default=&quot;development&quot;&gt;</div><div class="line">	    &lt;environment id=&quot;development&quot;&gt;</div><div class="line">		&lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">			&lt;dataSource type=&quot;POOLED&quot;&gt;  </div><div class="line">                            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</div><div class="line">			    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot; /&gt;</div><div class="line">			    &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</div><div class="line">			    &lt;property name=&quot;password&quot; value=&quot;cupdata&quot; /&gt;</div><div class="line">                       &lt;/dataSource&gt;</div><div class="line">		&lt;/environment&gt;</div><div class="line">	&lt;/environments&gt;</div><div class="line"></div><div class="line">	&lt;mappers&gt;</div><div class="line">	     &lt;!-- // power by http://www.yiibai.com --&gt;</div><div class="line">	     &lt;mapper resource=&quot;com/lidolid/mybatis/models/User.xml&quot; /&gt;</div><div class="line">	&lt;/mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>配置文件Configure.xml是mybatis用来建立sessionFactory的，里面主要包含了数据库连接相关内容，还有java类所对应的别名，比如：&lt;typeAlias alias=”User” type=”com.yiibai.mybatis.models.User”/&gt; 这个别名非常重要，在具体的类的映射中，比如：User.xml中resultType就是对应这个别名。要保持一致。</li>
<li>Configure.xml里面的&lt;mapper resource=”com/yiibai/mybatis/models/User.xml”/&gt;是包含要映射的类的 xml 配置文件。</li>
<li>在User.xml 文件里面主要是定义各种 SQL 语句，以及这些语句的参数，以及要返回的类型等等。</li>
</ul>
</blockquote>
<h4 id="6-运行"><a href="#6-运行" class="headerlink" title="6. 运行"></a>6. 运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.mybatis.common;</div><div class="line"></div><div class="line">import java.io.Reader;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.ibatis.session.SqlSession;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactory;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"></div><div class="line">import com.lidolid.mybatis.models.User;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	private static SqlSessionFactory sqlSessionFactory;</div><div class="line">	private static Reader reader;</div><div class="line"></div><div class="line">	static &#123;</div><div class="line">		try &#123;</div><div class="line">			reader = Resources.getResourceAsReader(&quot;config/Configure.xml&quot;);</div><div class="line">			sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static SqlSessionFactory getSession() &#123;</div><div class="line">		return sqlSessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		try &#123;</div><div class="line">			User user = (User) session.selectOne(</div><div class="line">					&quot;com.lidolid.mybatis.models.UserMapper.GetUserByID&quot;, 1);</div><div class="line">			if(user!=null)&#123;</div><div class="line">				String userInfo = &quot;名字：&quot;+user.getName()+&quot;, 所属部门：&quot;+user.getDept()+&quot;, 主页：&quot;+user.getWebsite();</div><div class="line">				System.out.println(userInfo);</div><div class="line">			&#125;</div><div class="line">		&#125; finally &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://i.imgur.com/35ROZ2n.png" alt=""></p>
<blockquote>
<p>使用Mybatis实现了对数据库的简单查询</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MyBatis-基础配置&quot;&gt;&lt;a href=&quot;#MyBatis-基础配置&quot; class=&quot;headerlink&quot; title=&quot;MyBatis 基础配置&quot;&gt;&lt;/a&gt;MyBatis 基础配置&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;MyBatis 是支持普通SQL查询,存储过程和高级映射的优秀持久层框架。MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis使用简单的XML或注解用于配置和原始映射,将接口和Java的POJOs(Plain Old Java Objects，普通的Java对象)映射成数据库中的记录。&lt;br&gt;
    
    </summary>
    
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP管理hibernate事务</title>
    <link href="http://yoursite.com/2017/08/23/Spring_0903_HibernateAop/"/>
    <id>http://yoursite.com/2017/08/23/Spring_0903_HibernateAop/</id>
    <published>2017-08-23T10:52:31.000Z</published>
    <updated>2017-09-20T04:36:39.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-AOP管理hibernate事务"><a href="#Spring-AOP管理hibernate事务" class="headerlink" title="Spring AOP管理hibernate事务"></a>Spring AOP管理hibernate事务</h3><p>&emsp;&emsp;事务管理是用来以确保数据库中数据的完整性和一致性。Spring AOP技术允许开发者管理事务的声明。本文介绍一下如何使用Spring AOP进行hibernate事务管理。<br><a id="more"></a></p>
<h4 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1. 创建表"></a>1. 创建表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE  `product` (</div><div class="line">  `PRODUCT_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `PRODUCT_CODE` varchar(20) NOT NULL,</div><div class="line">  `PRODUCT_DESC` varchar(255) NOT NULL,</div><div class="line">  PRIMARY KEY (`PRODUCT_ID`) USING BTREE</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div><div class="line"></div><div class="line">CREATE TABLE  `product_qoh` (</div><div class="line">  `QOH_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `PRODUCT_ID` bigint(20) unsigned NOT NULL,</div><div class="line">  `QTY` int(10) unsigned NOT NULL,</div><div class="line">  PRIMARY KEY (`QOH_ID`),</div><div class="line">  KEY `FK_product_qoh_product_id` (`PRODUCT_ID`),</div><div class="line">  CONSTRAINT `FK_product_qoh_product_id` FOREIGN KEY (`PRODUCT_ID`) </div><div class="line">  REFERENCES `product` (`PRODUCT_ID`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h4 id="2-产品业务对象"><a href="#2-产品业务对象" class="headerlink" title="2. 产品业务对象"></a>2. 产品业务对象</h4><p>&emsp;&emsp;”productBo”实现save()方法通过”ProductDao”插入记录到”product”，并通过”productQohBo”插入记录到”productQoh”表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.product.bo.impl;</div><div class="line"></div><div class="line">import com.lidolid.product.bo.ProductBo;</div><div class="line">import com.lidolid.product.bo.ProductQohBo;</div><div class="line">import com.lidolid.product.dao.ProductDao;</div><div class="line">import com.lidolid.product.model.Product;</div><div class="line">import com.lidolid.product.model.ProductQoh;</div><div class="line"></div><div class="line">public class ProductBoImpl implements ProductBo &#123;</div><div class="line"></div><div class="line">	ProductDao productDao;</div><div class="line">	ProductQohBo productQohBo;</div><div class="line"></div><div class="line">	public void setProductDao(ProductDao productDao) &#123;</div><div class="line">		this.productDao = productDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setProductQohBo(ProductQohBo productQohBo) &#123;</div><div class="line">		this.productQohBo = productQohBo;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void save(Product product, int qoh) &#123;</div><div class="line"></div><div class="line">		productDao.save(product);</div><div class="line">		System.out.println(&quot;Product Inserted&quot;);</div><div class="line"></div><div class="line">		ProductQoh productQoh = new ProductQoh();</div><div class="line">		productQoh.setProductId(product.getProductId());</div><div class="line">		productQoh.setQty(qoh);</div><div class="line"></div><div class="line">		productQohBo.save(productQoh);</div><div class="line">		System.out.println(&quot;ProductQoh Inserted&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Spring的bean配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Product business object --&gt;</div><div class="line">&lt;bean id=&quot;productBo&quot; class=&quot;com.lidolid.product.bo.impl.ProductBoImpl&quot; &gt;</div><div class="line">		&lt;property name=&quot;productDao&quot; ref=&quot;productDao&quot; /&gt;</div><div class="line">		&lt;property name=&quot;productQohBo&quot; ref=&quot;productQohBo&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;!-- Product Data Access Object --&gt;</div><div class="line">&lt;bean id=&quot;productDao&quot; class=&quot;com.lidolid.product.dao.impl.ProductDaoImpl&quot; &gt;</div><div class="line">		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;运行它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Product product = new Product();</div><div class="line">product.setProductCode(&quot;ABC&quot;);</div><div class="line">product.setProductDesc(&quot;This is product ABC&quot;);</div><div class="line">    	</div><div class="line">ProductBo productBo = (ProductBo)appContext.getBean(&quot;productBo&quot;);</div><div class="line">productBo.save(product, 100);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>假设save() 不具有事务功能，如果异常抛出由productQohBo.save()，只插入一条记录到”product”表，没有记录将被插入到”productQoh”表。这是一个严重的问题，在数据库中打破数据一致性。</p>
</blockquote>
<h4 id="3-Spring事务管理"><a href="#3-Spring事务管理" class="headerlink" title="3. Spring事务管理"></a>3. Spring事务管理</h4><h5 id="3-1-工程结构"><a href="#3-1-工程结构" class="headerlink" title="3.1 工程结构"></a>3.1 工程结构</h5><p><img src="https://i.imgur.com/TWslpYU.png" alt=""></p>
<blockquote>
<p>代码说明：</p>
<ul>
<li>model：模型层</li>
<li>dao：数据访问层</li>
<li>bo：业务逻辑层</li>
</ul>
<p>资源文件说明：</p>
<ul>
<li>hibernate： 实体类映射文件，Hibernate事务bean定义</li>
<li>properties： 数据库连接信息</li>
<li>beans：Spring bean定义xml配置文件</li>
<li>config： 汇总配置信息文件</li>
<li>database： 数据库连接信息dataSource bean定义和hibernate配置文件bean定义</li>
</ul>
</blockquote>
<h5 id="3-2-Transaction-xml"><a href="#3-2-Transaction-xml" class="headerlink" title="3.2 Transaction.xml"></a>3.2 Transaction.xml</h5><p>声明”TransactionInterceptor” bean，以及”HibernateTransactionManager” Hibernate事务，并设置必要的属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionInterceptor&quot;</div><div class="line">		class=&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&gt;</div><div class="line">		&lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;</div><div class="line">		&lt;property name=&quot;transactionAttributes&quot;&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;save&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;&gt;</div><div class="line">		&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</div><div class="line">		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<ol>
<li>事务属性说明：<br>定义事务拦截器，必须定义事务的属性”传播行为”。这意味着，如果一个事务”ProductBoImpl.save()”方法调用另外的”productQohBo.save()”方法，事务应该怎么传播？它能继续在现有的事务中运行？或者为自己开始一个新的事务。<br>由Spring支持传播的 7种类型：</li>
</ol>
<ul>
<li>PROPAGATION_REQUIRED – 支持当前事务;如果不存在则创建一个新的。</li>
<li>PROPAGATION_SUPPORTS – 支持当前事务;如果不存在执行非事务。</li>
<li>PROPAGATION_MANDATORY – 支持当前事务;如果当前不存在事务抛出异常。</li>
<li>PROPAGATION_REQUIRES_NEW – 创建一个新的事务，如果当前事务暂停。</li>
<li>PROPAGATION_NOT_SUPPORTED – 不支持当前的事务;而始终执行非事务。</li>
<li>PROPAGATION_NEVER – 不支持当前的事务;如果当前事务存在则抛出异常。</li>
<li>PROPAGATION_NESTED – 如果当前存在事务嵌套事务中执行，表现与 PROPAGATION_REQUIRED 一样。</li>
</ul>
<p>在大多数情况下，可能只需要使用PROPAGATION_REQUIRED。此外，必须定义方法来支持这个事务属性。方法名支持通配符格式，save*会匹配所有的方法名 以save(…)开始的方法 。</p>
<ol>
<li>事务管理器<br>在Hibernate事务，需要使用 HibernateTransactionManager。如果只对付纯JDBC，useDataSourceTransactionManager。而如果是 JTA，需要使用 JtaTransactionManager。</li>
</ol>
</blockquote>
<h5 id="3-3-代理工厂bean"><a href="#3-3-代理工厂bean" class="headerlink" title="3.3 代理工厂bean"></a>3.3 代理工厂bean</h5><p>&emsp;&emsp;创建一个新的代理工厂bean的ProductBo，并设置”interceptorNames”属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- Product business object --&gt;</div><div class="line">   &lt;bean id=&quot;productBo&quot; class=&quot;com.lidolid.product.bo.impl.ProductBoImpl&quot; &gt;</div><div class="line">   		&lt;property name=&quot;productDao&quot; ref=&quot;productDao&quot; /&gt;</div><div class="line">   		&lt;property name=&quot;productQohBo&quot; ref=&quot;productQohBo&quot; /&gt;</div><div class="line">   &lt;/bean&gt;</div><div class="line"> </div><div class="line">   &lt;!-- Product Data Access Object --&gt;</div><div class="line">   &lt;bean id=&quot;productDao&quot; class=&quot;com.lidolid.product.dao.impl.ProductDaoImpl&quot; &gt;</div><div class="line">   		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;</div><div class="line">   &lt;/bean&gt;</div><div class="line">   </div><div class="line">   &lt;bean id=&quot;productBoProxy&quot;</div><div class="line">		class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;productBo&quot; /&gt;</div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;transactionInterceptor&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">   &lt;/bean&gt;   		</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h6 id="3-4-运行"><a href="#3-4-运行" class="headerlink" title="3.4 运行"></a>3.4 运行</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.product.bo.ProductBo;</div><div class="line">import com.lidolid.product.model.Product;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext appContext = new ClassPathXmlApplicationContext(&quot;spring/config/BeanLocations.xml&quot;);</div><div class="line"></div><div class="line">		Product product = new Product();</div><div class="line">		product.setProductCode(&quot;ABC&quot;);</div><div class="line">		product.setProductDesc(&quot;This is product ABC&quot;);</div><div class="line"></div><div class="line">		ProductBo productBo = (ProductBo) appContext.getBean(&quot;productBoProxy&quot;);</div><div class="line">		productBo.save(product, 100);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：<br><img src="https://i.imgur.com/xCOIYja.png" alt=""></p>
<blockquote>
<p>代理 bean”productBoProxy”的save()方法是支持事务的。现在，里面productBo.save()方法任何异常会导致整个事务回滚，没有数据会被插入到数据库中。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-AOP管理hibernate事务&quot;&gt;&lt;a href=&quot;#Spring-AOP管理hibernate事务&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP管理hibernate事务&quot;&gt;&lt;/a&gt;Spring AOP管理hibernate事务&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;事务管理是用来以确保数据库中数据的完整性和一致性。Spring AOP技术允许开发者管理事务的声明。本文介绍一下如何使用Spring AOP进行hibernate事务管理。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合hibernate注解形式</title>
    <link href="http://yoursite.com/2017/08/22/Spring_0902_HibernateAnnotation/"/>
    <id>http://yoursite.com/2017/08/22/Spring_0902_HibernateAnnotation/</id>
    <published>2017-08-21T16:17:06.000Z</published>
    <updated>2017-09-20T02:40:54.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring整合hibernate注解形式"><a href="#Spring整合hibernate注解形式" class="headerlink" title="Spring整合hibernate注解形式"></a>Spring整合hibernate注解形式</h3><p>&emsp;&emsp;在使用hibernate进行实体类映射时，可以使用xml映射或者注解(Annotation)方式，本文简单介绍一下如何使用在spring整合hibernate时使用hibernate注解，通过hibernate实现数据库的增删改查。<br><a id="more"></a></p>
<h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p><img src="https://i.imgur.com/cZgYxHQ.png" alt=""></p>
<h4 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2. 创建表"></a>2. 创建表</h4><p>&emsp;&emsp;在MySQL数据库中创建一张“stock”表。 SQL语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE  `stock` (</div><div class="line">  `STOCK_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `STOCK_CODE` varchar(10) NOT NULL,</div><div class="line">  `STOCK_NAME` varchar(20) NOT NULL,</div><div class="line">  PRIMARY KEY (`STOCK_ID`) USING BTREE,</div><div class="line">  UNIQUE KEY `UNI_STOCK_NAME` (`STOCK_NAME`),</div><div class="line">  UNIQUE KEY `UNI_STOCK_ID` (`STOCK_CODE`) USING BTREE</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>
<h4 id="3-Model-amp-BO-amp-DAO"><a href="#3-Model-amp-BO-amp-DAO" class="headerlink" title="3. Model &amp; BO &amp; DAO"></a>3. Model &amp; BO &amp; DAO</h4><h5 id="3-1-Stock-Model"><a href="#3-1-Stock-Model" class="headerlink" title="3.1 Stock Model"></a>3.1 Stock Model</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.model;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">import javax.persistence.Column;</div><div class="line">import javax.persistence.Entity;</div><div class="line">import javax.persistence.GeneratedValue;</div><div class="line">import javax.persistence.GenerationType;</div><div class="line">import javax.persistence.Id;</div><div class="line">import javax.persistence.Table;</div><div class="line">import javax.persistence.UniqueConstraint;</div><div class="line"></div><div class="line">@Entity</div><div class="line">@Table(name = &quot;stock&quot;, catalog = &quot;yiibai&quot;, uniqueConstraints = &#123; @UniqueConstraint(columnNames = &quot;STOCK_NAME&quot;),</div><div class="line">		@UniqueConstraint(columnNames = &quot;STOCK_CODE&quot;) &#125;)</div><div class="line">public class Stock implements Serializable &#123;</div><div class="line"></div><div class="line">	private Long stockId;</div><div class="line">	private String stockCode;</div><div class="line">	private String stockName;</div><div class="line"></div><div class="line">	public Stock() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Id</div><div class="line">	@GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">	@Column(name = &quot;STOCK_ID&quot;, unique = true, nullable = false)</div><div class="line">	public Long getStockId() &#123;</div><div class="line">		return stockId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStockId(Long stockId) &#123;</div><div class="line">		this.stockId = stockId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Column(name = &quot;STOCK_CODE&quot;, unique = true, nullable = false, length = 10)</div><div class="line">	public String getStockCode() &#123;</div><div class="line">		return stockCode;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void setStockCode(String stockCode) &#123;</div><div class="line">		this.stockCode = stockCode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Column(name = &quot;STOCK_NAME&quot;, unique = true, nullable = false, length = 20)</div><div class="line">	public String getStockName() &#123;</div><div class="line">		return stockName;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void setStockName(String stockName) &#123;</div><div class="line">		this.stockName = stockName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Stock [stockCode=&quot; + stockCode + &quot;, stockId=&quot; + stockId + &quot;, stockName=&quot; + stockName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-2-Stock-Business-Object-BO"><a href="#3-2-Stock-Business-Object-BO" class="headerlink" title="3.2 Stock Business Object (BO)"></a>3.2 Stock Business Object (BO)</h5><p>&emsp;&emsp;Stock 业务对象(BO)接口和实现，它是用来存储项目的业务功能，真正的数据库操作(CRUD)的工作不参与这一个类，而是用一个DAO(StockDao)类来做到这一点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.bo;</div><div class="line"></div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public interface StockBo &#123;</div><div class="line">	void save(Stock stock);</div><div class="line">	void update(Stock stock);</div><div class="line">	void delete(Stock stock);</div><div class="line">	Stock findByStockCode(String stockCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;使这个类中的 Spring IoC容器的 bean”stockBo”自动装配库存DAO类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.bo.impl;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.lidolid.stock.bo.StockBo;</div><div class="line">import com.lidolid.stock.dao.StockDao;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">@Service(&quot;stockBo&quot;)</div><div class="line">public class StockBoImpl implements StockBo &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	StockDao stockDao;</div><div class="line"></div><div class="line">	public void setStockDao(StockDao stockDao) &#123;</div><div class="line">		this.stockDao = stockDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void save(Stock stock) &#123;</div><div class="line">		stockDao.save(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void update(Stock stock) &#123;</div><div class="line">		stockDao.update(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void delete(Stock stock) &#123;</div><div class="line">		stockDao.delete(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Stock findByStockCode(String stockCode) &#123;</div><div class="line">		return stockDao.findByStockCode(stockCode);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-3-Stock-Data-Access-Object-DAO"><a href="#3-3-Stock-Data-Access-Object-DAO" class="headerlink" title="3.3 Stock Data Access Object(DAO)"></a>3.3 Stock Data Access Object(DAO)</h5><p>&emsp;&emsp;Stock DAO接口和实现。在xml配置中，DAO类是直接扩展”HibernateDaoSupport”。但注释方式不可能做到这一点，因为<strong><em>没有办法从DAO类会话到工厂bean自动装配</em></strong>。解决方法是创建一个自定义类(CustomHibernateDaoSupport)，并扩展了”HibernateDaoSupport”和自动装配会话工厂，DAO类扩展了这个类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.util;</div><div class="line"></div><div class="line">import org.hibernate.SessionFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.orm.hibernate5.support.HibernateDaoSupport;</div><div class="line"></div><div class="line">public class CustomHibernateDaoSupport extends HibernateDaoSupport &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">    public void anyMethodName(SessionFactory sessionFactory)</div><div class="line">    &#123;</div><div class="line">        setSessionFactory(sessionFactory);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.dao;</div><div class="line"></div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public interface StockDao &#123;</div><div class="line">	void save(Stock stock);</div><div class="line"></div><div class="line">	void update(Stock stock);</div><div class="line"></div><div class="line">	void delete(Stock stock);</div><div class="line"></div><div class="line">	Stock findByStockCode(String stockCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.dao.impl;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line">import org.springframework.transaction.annotation.Propagation;</div><div class="line">import org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line">import com.lidolid.stock.dao.StockDao;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line">import com.lidolid.util.CustomHibernateDaoSupport;</div><div class="line"></div><div class="line">@Transactional(readOnly = false, propagation = Propagation.REQUIRES_NEW )</div><div class="line">@Repository(&quot;stockDao&quot;)</div><div class="line">public class StockDaoImpl extends CustomHibernateDaoSupport implements StockDao &#123;</div><div class="line">	public void save(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().save(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void update(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().update(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void delete(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().delete(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Stock findByStockCode(String stockCode) &#123;</div><div class="line">		List list = getHibernateTemplate().find(&quot;from Stock where stockCode=?&quot;, stockCode);</div><div class="line">		return (Stock) list.get(0);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-资源配置"><a href="#4-资源配置" class="headerlink" title="4. 资源配置"></a>4. 资源配置</h4><h5 id="4-1-Spring-Configuration"><a href="#4-1-Spring-Configuration" class="headerlink" title="4.1 Spring Configuration"></a>4.1 Spring Configuration</h5><p>&emsp;&emsp;创建一个属性文件(database.properties)来存放数据库的详细信息，把它放到properties文件夹中,用于设置dataSource bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql://localhost:3306/spring</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=cupdata</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;为数据库创建一个”dataSource”bean配置文件(DataSource.xml)，并从database.properties导入的属性，把它放入到database文件夹中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean</div><div class="line">		class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</div><div class="line">		&lt;property name=&quot;location&quot;&gt;</div><div class="line">			&lt;value&gt;properties/database.properties&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;创建一个会话工厂bean配置文件(Hibernate.xml)，把它放入database文件夹中。这个 LocalSessionFactoryBean中设置一个共享的Hibernate SessionFactory。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- Hibernate session factory --&gt;</div><div class="line">	&lt;bean id=&quot;sessionFactory&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;dataSource&quot;&gt;</div><div class="line">			&lt;ref bean=&quot;dataSource&quot; /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;hibernateProperties&quot;&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;annotatedClasses&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;com.lidolid.stock.model.Stock&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;导入所有的 Spring bean 配置文件合并为一个文件(BeanLocations.xml)，把它放到config文件夹,BeanLocations.xml。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</div><div class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </div><div class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</div><div class="line">		p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line">	&lt;tx:advice id=&quot;txAdviceHibernate&quot; transaction-manager=&quot;transactionManager&quot;&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; /&gt;</div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;aop:pointcut id=&quot;serviceMethodsHibnerate&quot;</div><div class="line">			expression=&quot;execution(* com.lidolid.stock.dao..*.*(..))&quot; /&gt;</div><div class="line">		&lt;aop:advisor advice-ref=&quot;txAdviceHibernate&quot; pointcut-ref=&quot;serviceMethodsHibnerate&quot; /&gt;</div><div class="line">	&lt;/aop:config&gt;</div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line">	</div><div class="line">	&lt;!-- Database Configuration --&gt;</div><div class="line">	&lt;import resource=&quot;../database/DataSource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;../database/Hibernate.xml&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- Auto scan the components --&gt;</div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.stock&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>同样需要设置Spring事务</p>
</blockquote>
<h4 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行"></a>5. 运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.stock.bo.StockBo;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext appContext = new ClassPathXmlApplicationContext(&quot;config/BeanLocations.xml&quot;);</div><div class="line"></div><div class="line">		StockBo stockBo = (StockBo) appContext.getBean(&quot;stockBo&quot;);</div><div class="line"></div><div class="line">		/** insert **/</div><div class="line">		Stock stock = new Stock();</div><div class="line">		stock.setStockCode(&quot;7668&quot;);</div><div class="line">		stock.setStockName(&quot;HAIO&quot;);</div><div class="line">		stockBo.save(stock);</div><div class="line"></div><div class="line">		/** select **/</div><div class="line">		Stock stock2 = stockBo.findByStockCode(&quot;7668&quot;);</div><div class="line">		System.out.println(stock2);</div><div class="line"></div><div class="line">		/** update **/</div><div class="line">		stock2.setStockName(&quot;HAIO-1&quot;);</div><div class="line">		stockBo.update(stock2);</div><div class="line"></div><div class="line">		/** delete **/</div><div class="line">		stockBo.delete(stock2);</div><div class="line"></div><div class="line">		System.out.println(&quot;Done&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果输出：<br><img src="https://i.imgur.com/jCtOTbt.png" alt=""></p>
<h4 id="6-注意"><a href="#6-注意" class="headerlink" title="6. 注意"></a>6. 注意</h4><ul>
<li>在使用Annotation注解后，不在需要stock.xml bean定义文件和实体类映射文件Stock.hbm.xml</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring整合hibernate注解形式&quot;&gt;&lt;a href=&quot;#Spring整合hibernate注解形式&quot; class=&quot;headerlink&quot; title=&quot;Spring整合hibernate注解形式&quot;&gt;&lt;/a&gt;Spring整合hibernate注解形式&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在使用hibernate进行实体类映射时，可以使用xml映射或者注解(Annotation)方式，本文简单介绍一下如何使用在spring整合hibernate时使用hibernate注解，通过hibernate实现数据库的增删改查。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合hibernate问题汇总</title>
    <link href="http://yoursite.com/2017/08/21/Spring_0901_Hibernateproblems/"/>
    <id>http://yoursite.com/2017/08/21/Spring_0901_Hibernateproblems/</id>
    <published>2017-08-21T11:37:14.000Z</published>
    <updated>2017-09-19T17:05:32.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring整合hibernate问题汇总"><a href="#Spring整合hibernate问题汇总" class="headerlink" title="Spring整合hibernate问题汇总"></a>Spring整合hibernate问题汇总</h3><p>&emsp;&emsp;我在使用Spring整合Hibernate时，出现了一系列的问题。通过查询各种资料最后才得以解决。下面我总结一下我认为比较棘手的问题，供学习参考。</p>
<ul>
<li>InvalidDataAccessApiUsageException</li>
<li>NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext</li>
</ul>
<a id="more"></a>
<h4 id="1-InvalidDataAccessApiUsageException"><a href="#1-InvalidDataAccessApiUsageException" class="headerlink" title="1. InvalidDataAccessApiUsageException"></a>1. InvalidDataAccessApiUsageException</h4><p>&emsp;&emsp;DAO实现类扩展了Spring的”HibernateDaoSupport”，以使Spring框架支持Hibernate。之后可以通过getHibernateTemplate()执行Hibernate功能。但在实际做更新操作(增、改、删)时，却出现了异常，报错信息如下：</p>
<blockquote>
<p>Exception in thread “main” org.springframework.dao.InvalidDataAccessApiUsageException: Write operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove ‘readOnly’ marker from transaction definition.<br><img src="https://i.imgur.com/L5rfS9t.png" alt=""></p>
</blockquote>
<h5 id="1-1-问题分析："><a href="#1-1-问题分析：" class="headerlink" title="1.1 问题分析："></a>1.1 问题分析：</h5><p>&emsp;&emsp;这个异常是因为，在hibernate事务管理中，你在dao中写的方法，被hibernate列为了只读属性，只能从数据库中读取数据，不能进行增加和更新和删除操作。</p>
<h5 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h5><p>&emsp;&emsp;配置Spring事务,让spring 来管理hibernate session。<br>BeanLocations.xml文件添加事务配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</div><div class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </div><div class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</div><div class="line">		p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line">	&lt;tx:advice id=&quot;txAdviceHibernate&quot; transaction-manager=&quot;transactionManager&quot;&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; /&gt;</div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;aop:pointcut id=&quot;serviceMethodsHibnerate&quot;</div><div class="line">			expression=&quot;execution(* com.lidolid.stock.dao..*.*(..))&quot; /&gt;</div><div class="line">		&lt;aop:advisor advice-ref=&quot;txAdviceHibernate&quot; pointcut-ref=&quot;serviceMethodsHibnerate&quot; /&gt;</div><div class="line">	&lt;/aop:config&gt;</div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line"></div><div class="line">	&lt;!-- Database Configuration --&gt;</div><div class="line">	&lt;import resource=&quot;../database/DataSource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;../database/Hibernate.xml&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- Beans Declaration --&gt;</div><div class="line">	&lt;import resource=&quot;../spring/Stock.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：在进行事务配置时，使用了p模式和tx模式，需要进行声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; </div><div class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div></pre></td></tr></table></figure>
</blockquote>
<p><a href="http://blog.csdn.net/longxia1987/article/details/7819242" target="_blank" rel="external">参考链接</a></p>
<h4 id="2-NoClassDefFoundError-org-hibernate-engine-transaction-spi-TransactionContext"><a href="#2-NoClassDefFoundError-org-hibernate-engine-transaction-spi-TransactionContext" class="headerlink" title="2. NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext"></a>2. NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext</h4><p>&emsp;&emsp;在进行Spring事务配置时，在xml文件中添加了一段配置，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;transactionManager&quot;</div><div class="line">	class=&quot;org.springframework.orm.hibernate4.HibernateTransactionManager&quot;</div><div class="line">	p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>结果产生了异常，报错信息如下：</p>
<blockquote>
<p>Exception in thread “main” org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is java.lang.NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext<br><img src="https://i.imgur.com/QnorTH5.png" alt=""></p>
</blockquote>
<h5 id="2-1-问题分析："><a href="#2-1-问题分析：" class="headerlink" title="2.1 问题分析："></a>2.1 问题分析：</h5><p>&emsp;&emsp;我在项目中使用的时Hibernate5.2.8，但我声明的时hibernate4，所以产生了此错误。</p>
<h5 id="2-2-解决方案："><a href="#2-2-解决方案：" class="headerlink" title="2.2 解决方案："></a>2.2 解决方案：</h5><p>将事务配置中声明由hibernate4改为hibernate5，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;transactionManager&quot;</div><div class="line">	class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</div><div class="line">	p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在使用hibernate时，请注意版本</p>
</blockquote>
<p><a href="http://www.cnblogs.com/Hdaydayup/p/6534982.html" target="_blank" rel="external">参考链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring整合hibernate问题汇总&quot;&gt;&lt;a href=&quot;#Spring整合hibernate问题汇总&quot; class=&quot;headerlink&quot; title=&quot;Spring整合hibernate问题汇总&quot;&gt;&lt;/a&gt;Spring整合hibernate问题汇总&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我在使用Spring整合Hibernate时，出现了一系列的问题。通过查询各种资料最后才得以解决。下面我总结一下我认为比较棘手的问题，供学习参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InvalidDataAccessApiUsageException&lt;/li&gt;
&lt;li&gt;NoClassDefFoundError: org/hibernate/engine/transaction/spi/TransactionContext&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring+Hibernate+MySql</title>
    <link href="http://yoursite.com/2017/08/20/Spring_0900_Hibernate/"/>
    <id>http://yoursite.com/2017/08/20/Spring_0900_Hibernate/</id>
    <published>2017-08-20T15:04:11.000Z</published>
    <updated>2017-09-19T16:31:56.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Hibernate-MySql"><a href="#Spring-Hibernate-MySql" class="headerlink" title="Spring+Hibernate+MySql"></a>Spring+Hibernate+MySql</h3><p>&emsp;&emsp;使用JDBC与数据库交互时，总是避免不了写一些重复的sql脚本，且不符合面向对象的编程理念，而Hibernate则解决了这个问题。本文展示如何使用Spring+Hibernate+Mysql实现对数据库的增删改查操作。<br><a id="more"></a></p>
<h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p><img src="https://i.imgur.com/COpEqja.png" alt=""></p>
<blockquote>
<p>代码说明：</p>
<ul>
<li>model：模型层</li>
<li>dao：数据访问层</li>
<li>bo：业务逻辑层</li>
</ul>
<p>资源文件说明：</p>
<ul>
<li>spring：Spring bean定义xml配置文件</li>
<li>properties： 数据库连接信息</li>
<li>hibernate： 实体类映射文件</li>
<li>database： 数据库连接信息dataSource bean定义和hibernate配置文件bean定义</li>
<li>config： 汇总配置信息文件</li>
</ul>
</blockquote>
<h4 id="2-创建表stock"><a href="#2-创建表stock" class="headerlink" title="2. 创建表stock"></a>2. 创建表stock</h4><p>&emsp;&emsp;在MySQL数据库中创建一张”stock”表。 SQL语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE  `stock` (</div><div class="line">  `STOCK_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `STOCK_CODE` varchar(10) NOT NULL,</div><div class="line">  `STOCK_NAME` varchar(20) NOT NULL,</div><div class="line">  PRIMARY KEY (`STOCK_ID`) USING BTREE,</div><div class="line">  UNIQUE KEY `UNI_STOCK_NAME` (`STOCK_NAME`),</div><div class="line">  UNIQUE KEY `UNI_STOCK_ID` (`STOCK_CODE`) USING BTREE</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>
<h4 id="3-Model-amp-BO-amp-DAO"><a href="#3-Model-amp-BO-amp-DAO" class="headerlink" title="3. Model &amp; BO &amp; DAO"></a>3. Model &amp; BO &amp; DAO</h4><h5 id="3-1-Stock-Model"><a href="#3-1-Stock-Model" class="headerlink" title="3.1 Stock Model"></a>3.1 Stock Model</h5><p>&emsp;&emsp;Stock模型类以后用于存储库存数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.model;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">public class Stock implements Serializable &#123;</div><div class="line"></div><div class="line">	private Long stockId;</div><div class="line">	private String stockCode;</div><div class="line">	private String stockName;</div><div class="line"></div><div class="line">	public Stock() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Long getStockId() &#123;</div><div class="line">		return stockId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStockId(Long stockId) &#123;</div><div class="line">		this.stockId = stockId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getStockCode() &#123;</div><div class="line">		return stockCode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStockCode(String stockCode) &#123;</div><div class="line">		this.stockCode = stockCode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getStockName() &#123;</div><div class="line">		return stockName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStockName(String stockName) &#123;</div><div class="line">		this.stockName = stockName;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="3-2-Stock-Business-Object-BO"><a href="#3-2-Stock-Business-Object-BO" class="headerlink" title="3.2 Stock Business Object (BO)"></a>3.2 Stock Business Object (BO)</h5><p>&emsp;&emsp;Stock 业务对象(BO)接口和实现，它是用来存储项目的业务功能，真正的数据库操作(CRUD)的工作不应该参与这一个类，而是有一个DAO(StockDao)类来做到这一点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.bo;</div><div class="line"></div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public interface StockBo &#123;</div><div class="line">	void save(Stock stock);</div><div class="line">	void update(Stock stock);</div><div class="line">	void delete(Stock stock);</div><div class="line">	Stock findByStockCode(String stockCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.bo.impl;</div><div class="line"></div><div class="line">import com.lidolid.stock.bo.StockBo;</div><div class="line">import com.lidolid.stock.dao.StockDao;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public class StockBoImpl implements StockBo &#123;</div><div class="line"></div><div class="line">	StockDao stockDao;</div><div class="line"></div><div class="line">	public void setStockDao(StockDao stockDao) &#123;</div><div class="line">		this.stockDao = stockDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void save(Stock stock) &#123;</div><div class="line">		stockDao.save(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void update(Stock stock) &#123;</div><div class="line">		stockDao.update(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void delete(Stock stock) &#123;</div><div class="line">		stockDao.delete(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Stock findByStockCode(String stockCode) &#123;</div><div class="line">		return stockDao.findByStockCode(stockCode);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-3-Stock-Data-Access-Object-DAO"><a href="#3-3-Stock-Data-Access-Object-DAO" class="headerlink" title="3.3 Stock Data Access Object(DAO)"></a>3.3 Stock Data Access Object(DAO)</h5><p>&emsp;&emsp;Stock DAO接口和实现，DAO实现类扩展了Spring的”HibernateDaoSupport”，以使Spring框架支持Hibernate。之后可以通过getHibernateTemplate()执行Hibernate功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.dao;</div><div class="line"></div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public interface StockDao &#123;</div><div class="line">	void save(Stock stock);</div><div class="line"></div><div class="line">	void update(Stock stock);</div><div class="line"></div><div class="line">	void delete(Stock stock);</div><div class="line"></div><div class="line">	Stock findByStockCode(String stockCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.stock.dao.impl;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.orm.hibernate5.support.HibernateDaoSupport;</div><div class="line"></div><div class="line">import com.lidolid.stock.dao.StockDao;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public class StockDaoImpl extends HibernateDaoSupport implements StockDao &#123;</div><div class="line">	public void save(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().save(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void update(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().update(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void delete(Stock stock) &#123;</div><div class="line">		getHibernateTemplate().delete(stock);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Stock findByStockCode(String stockCode) &#123;</div><div class="line">		List list = getHibernateTemplate().find(&quot;from Stock where stockCode=?&quot;, stockCode);</div><div class="line">		return (Stock) list.get(0);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-资源配置"><a href="#4-资源配置" class="headerlink" title="4.资源配置"></a>4.资源配置</h4><h5 id="4-1-Hibernate-Configuration"><a href="#4-1-Hibernate-Configuration" class="headerlink" title="4.1 Hibernate Configuration"></a>4.1 Hibernate Configuration</h5><p>&emsp;&emsp;创建Hibernate映射文件(Stock.hbm.xml)的Stock表，把它放在hibernate文件夹中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</div><div class="line">&quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">    &lt;class name=&quot;com.lidolid.stock.model.Stock&quot; table=&quot;stock&quot; catalog=&quot;lidolid&quot;&gt;</div><div class="line">        &lt;id name=&quot;stockId&quot; type=&quot;java.lang.Long&quot;&gt;</div><div class="line">            &lt;column name=&quot;STOCK_ID&quot; /&gt;</div><div class="line">            &lt;generator class=&quot;identity&quot; /&gt;</div><div class="line">        &lt;/id&gt;</div><div class="line">        &lt;property name=&quot;stockCode&quot; type=&quot;string&quot;&gt;</div><div class="line">            &lt;column name=&quot;STOCK_CODE&quot; length=&quot;10&quot; not-null=&quot;true&quot; unique=&quot;true&quot; /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=&quot;stockName&quot; type=&quot;string&quot;&gt;</div><div class="line">            &lt;column name=&quot;STOCK_NAME&quot; length=&quot;20&quot; not-null=&quot;true&quot; unique=&quot;true&quot; /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure></p>
<h5 id="4-2-Spring-Configuration"><a href="#4-2-Spring-Configuration" class="headerlink" title="4.2 Spring Configuration"></a>4.2 Spring Configuration</h5><p>&emsp;&emsp;创建一个属性文件(database.properties)数据库的详细信息，把它放在properties 文件夹中，用于设置dataSource bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line">jdbc.url=jdbc:mysql://localhost:3306/spring</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=cupdata</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;为数据库创建一个”dataSource”bean配置文件(DataSource.xml)，并从database.properties导入的属性，把它放入到database文件夹中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean</div><div class="line">		class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</div><div class="line">		&lt;property name=&quot;location&quot;&gt;</div><div class="line">			&lt;value&gt;properties/database.properties&lt;/value&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot;</div><div class="line">		class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</div><div class="line">		&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;创建一个会话工厂bean配置文件(Hibernate.xml)，把它放入database文件夹中。这个 LocalSessionFactoryBean中设置一个共享的Hibernate SessionFactory。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">   </div><div class="line">	&lt;!-- Hibernate session factory --&gt;</div><div class="line">	&lt;bean id=&quot;sessionFactory&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;dataSource&quot;&gt;</div><div class="line">			&lt;ref bean=&quot;dataSource&quot; /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;hibernateProperties&quot;&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;mappingResources&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hibernate/Stock.hbm.xml&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;创建一个bean配置文件(Stock.xml)的BO和DAO类，把它放入spring文件夹中。依赖的 DAO(stockDao)bean 注入到 bo(stockBo)bean; SessionFactory bean到stockDao。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- Stock business object --&gt;</div><div class="line">	&lt;bean id=&quot;stockBo&quot; class=&quot;com.lidolid.stock.bo.impl.StockBoImpl&quot;&gt;</div><div class="line">		&lt;property name=&quot;stockDao&quot; ref=&quot;stockDao&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- Stock Data Access Object --&gt;</div><div class="line">	&lt;bean id=&quot;stockDao&quot; class=&quot;com.lidolid.stock.dao.impl.StockDaoImpl&quot;&gt;</div><div class="line">		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;导入所有的Spring bean配置文件合并为一个文件(BeanLocations.xml)，把它变成了config文件夹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</div><div class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </div><div class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;transactionManager&quot;</div><div class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</div><div class="line">		p:sessionFactory-ref=&quot;sessionFactory&quot;&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line">	&lt;tx:advice id=&quot;txAdviceHibernate&quot; transaction-manager=&quot;transactionManager&quot;&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;</div><div class="line">			&lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; /&gt;</div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;aop:pointcut id=&quot;serviceMethodsHibnerate&quot;</div><div class="line">			expression=&quot;execution(* com.lidolid.stock.dao..*.*(..))&quot; /&gt;</div><div class="line">		&lt;aop:advisor advice-ref=&quot;txAdviceHibernate&quot; pointcut-ref=&quot;serviceMethodsHibnerate&quot; /&gt;</div><div class="line">	&lt;/aop:config&gt;</div><div class="line">	&lt;!-- xml配置事务 --&gt;</div><div class="line"></div><div class="line">	&lt;!-- Database Configuration --&gt;</div><div class="line">	&lt;import resource=&quot;../database/DataSource.xml&quot; /&gt;</div><div class="line">	&lt;import resource=&quot;../database/Hibernate.xml&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- Beans Declaration --&gt;</div><div class="line">	&lt;import resource=&quot;../spring/Stock.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：在配置文件中要进行事务配置，否则执行更新(增、改、删)操作时，会报错操作权限错误</p>
</blockquote>
<h4 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行"></a>5. 运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.stock.bo.StockBo;</div><div class="line">import com.lidolid.stock.model.Stock;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext appContext = new ClassPathXmlApplicationContext(&quot;config/BeanLocations.xml&quot;);</div><div class="line"></div><div class="line">		StockBo stockBo = (StockBo) appContext.getBean(&quot;stockBo&quot;);</div><div class="line"></div><div class="line">		/** insert **/</div><div class="line">		Stock stock = new Stock();</div><div class="line">		stock.setStockCode(&quot;7668&quot;);</div><div class="line">		stock.setStockName(&quot;HAIO&quot;);</div><div class="line">		stockBo.save(stock);</div><div class="line"></div><div class="line">		/** select **/</div><div class="line">		Stock stock2 = stockBo.findByStockCode(&quot;7668&quot;);</div><div class="line">		System.out.println(stock2);</div><div class="line"></div><div class="line">		/** update **/</div><div class="line">		stock2.setStockName(&quot;HAIO-1&quot;);</div><div class="line">		stockBo.update(stock2);</div><div class="line"></div><div class="line">		/** delete **/</div><div class="line">		stockBo.delete(stock2);</div><div class="line"></div><div class="line">		System.out.println(&quot;Done&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;结果输出：<br><img src="https://i.imgur.com/eY9NWqV.png" alt=""></p>
<h4 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a>6. 注意事项</h4><h5 id="6-1-Spring整合Hibernate必要jar包"><a href="#6-1-Spring整合Hibernate必要jar包" class="headerlink" title="6.1 Spring整合Hibernate必要jar包"></a>6.1 Spring整合Hibernate必要jar包</h5><p><img src="https://i.imgur.com/cHVAyU5.png" alt=""></p>
<p>Maven pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">	&lt;groupId&gt;com.lidolid&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;Spring_0100_HelloWorld&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line"></div><div class="line">		&lt;!-- Spring Core --&gt;</div><div class="line">		&lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- Spring Context --&gt;</div><div class="line">		&lt;!-- http://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;5.0.2&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;5.2.8.Final&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.3.10.RELEASE&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.aspectj&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.8.5&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;同时，使用时请注意各个包之间的版本兼容，如果jar包冲突，调试也将是一件很麻烦的事情。此时，使用Maven在一定程度上减轻了这种麻烦。本工程Hibernate-core本来我使用的版本是5.2.20，但是却出现了jar包冲突问题，经了解Hibernate-core 5.2.20版本做了很大改动，容易与Spring产生冲突，所以试验中我该用了5.2.8版本</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Hibernate-MySql&quot;&gt;&lt;a href=&quot;#Spring-Hibernate-MySql&quot; class=&quot;headerlink&quot; title=&quot;Spring+Hibernate+MySql&quot;&gt;&lt;/a&gt;Spring+Hibernate+MySql&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用JDBC与数据库交互时，总是避免不了写一些重复的sql脚本，且不符合面向对象的编程理念，而Hibernate则解决了这个问题。本文展示如何使用Spring+Hibernate+Mysql实现对数据库的增删改查操作。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring自动代理</title>
    <link href="http://yoursite.com/2017/08/19/Spring_0802_AutoProxyCreator/"/>
    <id>http://yoursite.com/2017/08/19/Spring_0802_AutoProxyCreator/</id>
    <published>2017-08-19T12:46:29.000Z</published>
    <updated>2017-09-19T14:55:04.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring自动代理"><a href="#Spring自动代理" class="headerlink" title="Spring自动代理"></a>Spring自动代理</h3><p>&emsp;&emsp;要对一个bean进行拦截，必须手动创建一个代理bean(ProxyFactryBean)。若要拦截多个bean，则需要对每个Bean AOP支持。这不是一种有效的方式，例如，如果想在客户模块，所有的DAO类实现SQL日志支持(提醒)的AOP功能，那么必须手动创建很多代理工厂bean，因此在bean配置文件可能会泛滥代理类。这显然是不合适的，在实际开发中，可以使用自动代理来创建代理bean。<br><a id="more"></a><br>&emsp;&emsp;自动代理分为以下两种方式：</p>
<ul>
<li>BeanNameAutoProxyCreator</li>
<li>DefaultAdvisorAutoProxyCreator</li>
</ul>
<h4 id="1-不使用自动代理示例"><a href="#1-不使用自动代理示例" class="headerlink" title="1. 不使用自动代理示例"></a>1. 不使用自动代理示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; </div><div class="line">                class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;customerAdvisor&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt; --&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 上述配置等价于下面的配置 --&gt;</div><div class="line">	&lt;bean id=&quot;customerYiibaicut&quot; </div><div class="line">                class=&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot; </div><div class="line">                 class=&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;pointcut&quot; ref=&quot;customerYiibaicut&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用代理名称”customerServiceProxy”来获得bean</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)appContext.getBean(&quot;customerServiceProxy&quot;);</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-BeanNameAutoProxyCreator示例"><a href="#2-BeanNameAutoProxyCreator示例" class="headerlink" title="2. BeanNameAutoProxyCreator示例"></a>2. BeanNameAutoProxyCreator示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean class=&quot;org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator&quot;&gt;</div><div class="line">		&lt;property name=&quot;beanNames&quot;&gt;</div><div class="line">            &lt;list&gt;</div><div class="line">                &lt;value&gt;*Service&lt;/value&gt;</div><div class="line">            &lt;/list&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">            &lt;list&gt;</div><div class="line">                &lt;value&gt;customerAdvisor&lt;/value&gt;</div><div class="line">            &lt;/list&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>自动代理机制，只需要创建一个的 BeanNameAutoProxyCreator，并包含所有你的bean(通过bean的名字，或正则表达式名)和”advisor”作为一个单位。<br>可以通过“CustomerService”的原始名称获取bean, 如果知道这个bean已经代理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)appContext.getBean(&quot;customerService&quot;);</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-DefaultAdvisorAutoProxyCreator示例"><a href="#2-DefaultAdvisorAutoProxyCreator示例" class="headerlink" title="2. DefaultAdvisorAutoProxyCreator示例"></a>2. DefaultAdvisorAutoProxyCreator示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>DefaultAdvisorAutoProxyCreator是非常强大的，如果有bean相关连，Spring会自动创建一个代理。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring自动代理&quot;&gt;&lt;a href=&quot;#Spring自动代理&quot; class=&quot;headerlink&quot; title=&quot;Spring自动代理&quot;&gt;&lt;/a&gt;Spring自动代理&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;要对一个bean进行拦截，必须手动创建一个代理bean(ProxyFactryBean)。若要拦截多个bean，则需要对每个Bean AOP支持。这不是一种有效的方式，例如，如果想在客户模块，所有的DAO类实现SQL日志支持(提醒)的AOP功能，那么必须手动创建很多代理工厂bean，因此在bean配置文件可能会泛滥代理类。这显然是不合适的，在实际开发中，可以使用自动代理来创建代理bean。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="自动代理" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP切入点</title>
    <link href="http://yoursite.com/2017/08/19/Spring_0801_pointcut/"/>
    <id>http://yoursite.com/2017/08/19/Spring_0801_pointcut/</id>
    <published>2017-08-18T16:06:38.000Z</published>
    <updated>2017-09-19T14:27:08.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-AOP切入点"><a href="#Spring-AOP切入点" class="headerlink" title="Spring AOP切入点"></a>Spring AOP切入点</h3><p>&emsp;&emsp;如果不设置AOP切入点的话，一个类所有的方法都会被自动拦截。但在大多数情况下，可能只需要一种方式来拦截一个或两个方法，这时候接需要设置切入点，它允许你通过它的方法名来拦截方法。<br>&emsp;&emsp;在Spring AOP中，有三个非常专业术语- Advices，Yiibaicut，Advisor</p>
<ul>
<li>Advice – 指示之前或方法执行后采取的行动</li>
<li>Yiibaicut – 指明哪些方法应该拦截，通过方法的名称或正则表达式模式</li>
<li>Advisor – 分组”通知”和”切入点“成为一个单元，并把它传递到代理工厂对象</li>
</ul>
<a id="more"></a>
<h4 id="1-切入点：名称匹配"><a href="#1-切入点：名称匹配" class="headerlink" title="1. 切入点：名称匹配"></a>1. 切入点：名称匹配</h4><h5 id="1-1-CustomerService定义"><a href="#1-1-CustomerService定义" class="headerlink" title="1.1 CustomerService定义"></a>1.1 CustomerService定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">public class CustomerService &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private String url;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUrl(String url) &#123;</div><div class="line">		this.url = url;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printName() &#123;</div><div class="line">		System.out.println(&quot;Customer name : &quot; + this.name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printURL() &#123;</div><div class="line">		System.out.println(&quot;Customer website : &quot; + this.url);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printThrowException() &#123;</div><div class="line">		throw new IllegalArgumentException();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-2-创建一个实现MethodInterceptor接口的类"><a href="#1-2-创建一个实现MethodInterceptor接口的类" class="headerlink" title="1.2 创建一个实现MethodInterceptor接口的类"></a>1.2 创建一个实现MethodInterceptor接口的类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">import org.aopalliance.intercept.MethodInterceptor;</div><div class="line">import org.aopalliance.intercept.MethodInvocation;</div><div class="line"></div><div class="line">public class HijackAroundMethod implements MethodInterceptor &#123;</div><div class="line"></div><div class="line">	public HijackAroundMethod() &#123;</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;Method name : &quot; + methodInvocation.getMethod().getName());</div><div class="line">		System.out.println(&quot;Method arguments : &quot; + Arrays.toString(methodInvocation.getArguments()));</div><div class="line"></div><div class="line">		// same with MethodBeforeAdvice</div><div class="line">		System.out.println(&quot;HijackAroundMethod : Before method hijacked!&quot;);</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			// proceed to original method call</div><div class="line">			Object result = methodInvocation.proceed();</div><div class="line"></div><div class="line">			// same with AfterReturningAdvice</div><div class="line">			System.out.println(&quot;HijackAroundMethod : Before after hijacked!&quot;);</div><div class="line"></div><div class="line">			return result;</div><div class="line"></div><div class="line">		&#125; catch (IllegalArgumentException e) &#123;</div><div class="line">			// same with ThrowsAdvice</div><div class="line">			System.out.println(&quot;HijackAroundMethod : Throw exception hijacked!&quot;);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-3-Bean配置文件-beans-pointcut-xml"><a href="#1-3-Bean配置文件-beans-pointcut-xml" class="headerlink" title="1.3 Bean配置文件(beans_pointcut.xml)"></a>1.3 Bean配置文件(beans_pointcut.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; </div><div class="line">                class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;customerAdvisor&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt; --&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 上述配置等价于下面的配置 --&gt;</div><div class="line">	&lt;bean id=&quot;customerYiibaicut&quot; </div><div class="line">                class=&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;&gt;</div><div class="line">		&lt;property name=&quot;mappedName&quot; value=&quot;printName&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot; </div><div class="line">                 class=&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;pointcut&quot; ref=&quot;customerYiibaicut&quot; /&gt;</div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：xml定义切入点和分组可以分开两个bean定义，也可以合为一个bean定义，定义方式见上述xml文件配置</p>
<ul>
<li>Yiibaicut：指明哪些方法应该拦截，通过方法的名称或正则表达式模式</li>
<li>Advisor：分组”通知”和”切入点”成为一个单元，并把它传递到代理工厂对象</li>
</ul>
</blockquote>
<h5 id="1-4-运行"><a href="#1-4-运行" class="headerlink" title="1.4 运行"></a>1.4 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_pointcut.xml&quot;);</div><div class="line">		</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-5-运行结果"><a href="#1-5-运行结果" class="headerlink" title="1.5 运行结果"></a>1.5 运行结果</h5><p><img src="https://i.imgur.com/LxbqEI6.png" alt=""></p>
<blockquote>
<p>只有printName()方法被拦截</p>
</blockquote>
<h4 id="2-切入点：正则表达式匹配"><a href="#2-切入点：正则表达式匹配" class="headerlink" title="2. 切入点：正则表达式匹配"></a>2. 切入点：正则表达式匹配</h4><p>&emsp;&emsp;可以通过使用正则表达式匹配切入点方法的名称  – RegexpMethodYiibaicutAdvisor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; </div><div class="line">                class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;customerAdvisor&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerAdvisor&quot;</div><div class="line">		class=&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;&gt;</div><div class="line">		&lt;property name=&quot;patterns&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;.*URL.*&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;advice&quot; ref=&quot;hijackAroundMethodBean&quot; /&gt;</div><div class="line">	&lt;/bean&gt; </div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>它拦截方法名称中有“URL”的方法。在实践中，可以用它来管理DAO层，声明“.<em>DAO.</em>” 拦截所有的DAO类来支持事务。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-AOP切入点&quot;&gt;&lt;a href=&quot;#Spring-AOP切入点&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP切入点&quot;&gt;&lt;/a&gt;Spring AOP切入点&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果不设置AOP切入点的话，一个类所有的方法都会被自动拦截。但在大多数情况下，可能只需要一种方式来拦截一个或两个方法，这时候接需要设置切入点，它允许你通过它的方法名来拦截方法。&lt;br&gt;&amp;emsp;&amp;emsp;在Spring AOP中，有三个非常专业术语- Advices，Yiibaicut，Advisor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advice – 指示之前或方法执行后采取的行动&lt;/li&gt;
&lt;li&gt;Yiibaicut – 指明哪些方法应该拦截，通过方法的名称或正则表达式模式&lt;/li&gt;
&lt;li&gt;Advisor – 分组”通知”和”切入点“成为一个单元，并把它传递到代理工厂对象&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP通知</title>
    <link href="http://yoursite.com/2017/08/18/Spring_0800_aop/"/>
    <id>http://yoursite.com/2017/08/18/Spring_0800_aop/</id>
    <published>2017-08-17T16:37:29.000Z</published>
    <updated>2017-09-19T14:14:57.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-AOP通知"><a href="#Spring-AOP通知" class="headerlink" title="Spring AOP通知"></a>Spring AOP通知</h3><p>&emsp;&emsp;Spring AOP(面向方面编程)框架，用于在模块化方面的横切关注点。简单得说，它只是一个拦截器拦截一些过程，例如，当一个方法执行，Spring AOP 可以劫持一个执行的方法，在方法执行之前或之后添加额外的功能。在Spring AOP中，有4种类型通知(advices)的支持：</p>
<ul>
<li>通知(Advice)之前 - 该方法执行前运行</li>
<li>通知(Advice)返回之后 – 运行后，该方法返回一个结果</li>
<li>通知(Advice)抛出之后 – 运行方法抛出异常后</li>
<li>环绕通知 – 环绕方法执行运行，结合以上这三个通知</li>
</ul>
<a id="more"></a>
<h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p><img src="https://i.imgur.com/FH7yCuN.png" alt=""></p>
<p>&emsp;&emsp;CustomerService定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">public class CustomerService &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private String url;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUrl(String url) &#123;</div><div class="line">		this.url = url;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printName() &#123;</div><div class="line">		System.out.println(&quot;Customer name : &quot; + this.name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printURL() &#123;</div><div class="line">		System.out.println(&quot;Customer website : &quot; + this.url);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void printThrowException() &#123;</div><div class="line">		throw new IllegalArgumentException();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-之前通知"><a href="#2-之前通知" class="headerlink" title="2. 之前通知"></a>2. 之前通知</h4><h5 id="2-1-创建一个实现MethodBeforeAdvice接口的类，它会在方法执行之前执行"><a href="#2-1-创建一个实现MethodBeforeAdvice接口的类，它会在方法执行之前执行" class="headerlink" title="2.1 创建一个实现MethodBeforeAdvice接口的类，它会在方法执行之前执行"></a>2.1 创建一个实现MethodBeforeAdvice接口的类，它会在方法执行之前执行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">import org.springframework.aop.MethodBeforeAdvice;</div><div class="line"></div><div class="line">public class HijackBeforeMethod implements MethodBeforeAdvice &#123;</div><div class="line">	@Override</div><div class="line">	public void before(Method arg0, Object[] arg1, Object arg2) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;HijackBeforeMethod : Before method hijacked!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-2-Bean配置文件-beans-beforeadvice-xml"><a href="#2-2-Bean配置文件-beans-beforeadvice-xml" class="headerlink" title="2.2 Bean配置文件(beans_beforeadvice.xml)"></a>2.2 Bean配置文件(beans_beforeadvice.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackBeforeMethodBean&quot; class=&quot;com.lidolid.aop.HijackBeforeMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hijackBeforeMethodBean&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个 bean 的 HijackBeforeMethod 类，并命名为“customerServiceProxy” 作为一个新的代理对象。</p>
<ul>
<li>“target” - 定义想拦截的bean</li>
<li>“interceptorNames” - 定义要应用这个代理/目标对象的类(通知)</li>
</ul>
</blockquote>
<h5 id="2-3-运行"><a href="#2-3-运行" class="headerlink" title="2.3 运行"></a>2.3 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_beforeadvice.xml&quot;);</div><div class="line">				</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：现在得到新的 customerServiceProxy bean，而不是原来的CustomerService bean</p>
</blockquote>
<h5 id="2-4-运行结果"><a href="#2-4-运行结果" class="headerlink" title="2.4 运行结果"></a>2.4 运行结果</h5><p><img src="https://i.imgur.com/wBxlrk1.png" alt=""></p>
<h4 id="3-返回后通知"><a href="#3-返回后通知" class="headerlink" title="3. 返回后通知"></a>3. 返回后通知</h4><h5 id="3-1-创建一个实现AfterReturningAdvice接口的类，它会在方法返回结果之后执行"><a href="#3-1-创建一个实现AfterReturningAdvice接口的类，它会在方法返回结果之后执行" class="headerlink" title="3.1 创建一个实现AfterReturningAdvice接口的类，它会在方法返回结果之后执行"></a>3.1 创建一个实现AfterReturningAdvice接口的类，它会在方法返回结果之后执行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">import org.springframework.aop.AfterReturningAdvice;</div><div class="line"></div><div class="line">public class HijackAfterMethod implements AfterReturningAdvice &#123;</div><div class="line"></div><div class="line">	public HijackAfterMethod() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void afterReturning(Object arg0, Method arg1, Object[] arg2, Object arg3) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;HijackAfterMethod : After method hijacked!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-2-Bean配置文件-beans-afterreturningadvice-xml"><a href="#3-2-Bean配置文件-beans-afterreturningadvice-xml" class="headerlink" title="3.2 Bean配置文件(beans_afterreturningadvice.xml)"></a>3.2 Bean配置文件(beans_afterreturningadvice.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAfterMethodBean&quot; class=&quot;com.lidolid.aop.HijackAfterMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hijackAfterMethodBean&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h5 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_afterreturningadvice.xml&quot;);</div><div class="line">		</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-4-运行结果"><a href="#3-4-运行结果" class="headerlink" title="3.4 运行结果"></a>3.4 运行结果</h5><p><img src="https://i.imgur.com/0hPAdde.png" alt=""></p>
<h4 id="4-抛出后通知"><a href="#4-抛出后通知" class="headerlink" title="4. 抛出后通知"></a>4. 抛出后通知</h4><h5 id="4-1-创建一个实现ThrowsAdvice接口的类"><a href="#4-1-创建一个实现ThrowsAdvice接口的类" class="headerlink" title="4.1 创建一个实现ThrowsAdvice接口的类"></a>4.1 创建一个实现ThrowsAdvice接口的类</h5><p>&emsp;&emsp;它将在执行方法抛出一个异常后。创建一个实现ThrowsAdvice接口的类，并创建一个afterThrowing方法拦截抛出：IllegalArgumentException异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import org.springframework.aop.ThrowsAdvice;</div><div class="line"></div><div class="line">public class HijackThrowException implements ThrowsAdvice &#123;</div><div class="line"></div><div class="line">	public HijackThrowException() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void afterThrowing(IllegalArgumentException e) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;HijackThrowException : Throw exception hijacked!&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="4-2-Bean配置文件-beans-thorowsadvice-xml"><a href="#4-2-Bean配置文件-beans-thorowsadvice-xml" class="headerlink" title="4.2 Bean配置文件(beans_thorowsadvice.xml)"></a>4.2 Bean配置文件(beans_thorowsadvice.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lidolid Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackThrowExceptionBean&quot; class=&quot;com.lidolid.aop.HijackThrowException&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hijackThrowExceptionBean&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h5 id="4-3-运行"><a href="#4-3-运行" class="headerlink" title="4.3 运行"></a>4.3 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		/*ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_beforeadvice.xml&quot;);*/</div><div class="line">		/*ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_afterreturningadvice.xml&quot;);*/</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_thorowsadvice.xml&quot;);</div><div class="line">		/*ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_methodinterceptor.xml&quot;);*/</div><div class="line">		</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-4-执行结果："><a href="#4-4-执行结果：" class="headerlink" title="4.4 执行结果："></a>4.4 执行结果：</h5><p><img src="https://i.imgur.com/VacnNSi.png" alt=""></p>
<h4 id="5-环绕通知"><a href="#5-环绕通知" class="headerlink" title="5. 环绕通知"></a>5. 环绕通知</h4><h5 id="5-1-创建一个实现MethodInterceptor接口的类"><a href="#5-1-创建一个实现MethodInterceptor接口的类" class="headerlink" title="5.1 创建一个实现MethodInterceptor接口的类"></a>5.1 创建一个实现MethodInterceptor接口的类</h5><p>&emsp;&emsp;它结合了上面的三个通知，在方法执行过程中执行。创建一个实现了MethodInterceptor接口的类。必须调用”methodInvocation.proceed()”继续在原来的方法执行，否则原来的方法将不会执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.aop;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">import org.aopalliance.intercept.MethodInterceptor;</div><div class="line">import org.aopalliance.intercept.MethodInvocation;</div><div class="line"></div><div class="line">public class HijackAroundMethod implements MethodInterceptor &#123;</div><div class="line"></div><div class="line">	public HijackAroundMethod() &#123;</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</div><div class="line">		System.out.println(&quot;Method name : &quot; + methodInvocation.getMethod().getName());</div><div class="line">		System.out.println(&quot;Method arguments : &quot; + Arrays.toString(methodInvocation.getArguments()));</div><div class="line"></div><div class="line">		// same with MethodBeforeAdvice</div><div class="line">		System.out.println(&quot;HijackAroundMethod : Before method hijacked!&quot;);</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			// proceed to original method call</div><div class="line">			Object result = methodInvocation.proceed();</div><div class="line"></div><div class="line">			// same with AfterReturningAdvice</div><div class="line">			System.out.println(&quot;HijackAroundMethod : Before after hijacked!&quot;);</div><div class="line"></div><div class="line">			return result;</div><div class="line"></div><div class="line">		&#125; catch (IllegalArgumentException e) &#123;</div><div class="line">			// same with ThrowsAdvice</div><div class="line">			System.out.println(&quot;HijackAroundMethod : Throw exception hijacked!&quot;);</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="5-2-Bean配置文件-beans-methodinterceptor-xml"><a href="#5-2-Bean配置文件-beans-methodinterceptor-xml" class="headerlink" title="5.2 Bean配置文件(beans_methodinterceptor.xml)"></a>5.2 Bean配置文件(beans_methodinterceptor.xml)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Yong Mook Kim&quot; /&gt;</div><div class="line">		&lt;property name=&quot;url&quot; value=&quot;http://www.lidolid.com&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;hijackAroundMethodBean&quot; class=&quot;com.lidolid.aop.HijackAroundMethod&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerServiceProxy&quot; </div><div class="line">                class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;target&quot; ref=&quot;customerService&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;interceptorNames&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;hijackAroundMethodBean&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h5 id="5-3-运行"><a href="#5-3-运行" class="headerlink" title="5.3 运行"></a>5.3 运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.common;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.lidolid.customer.services.CustomerService;</div><div class="line"></div><div class="line">public class App &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans_methodinterceptor.xml&quot;);</div><div class="line">		</div><div class="line">		CustomerService cust = (CustomerService) context.getBean(&quot;customerServiceProxy&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printName();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		cust.printURL();</div><div class="line">		System.out.println(&quot;*************************&quot;);</div><div class="line">		try &#123;</div><div class="line">			cust.printThrowException();</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="5-4-运行结果"><a href="#5-4-运行结果" class="headerlink" title="5.4 运行结果"></a>5.4 运行结果</h5><p><img src="https://i.imgur.com/HuREDx9.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-AOP通知&quot;&gt;&lt;a href=&quot;#Spring-AOP通知&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP通知&quot;&gt;&lt;/a&gt;Spring AOP通知&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring AOP(面向方面编程)框架，用于在模块化方面的横切关注点。简单得说，它只是一个拦截器拦截一些过程，例如，当一个方法执行，Spring AOP 可以劫持一个执行的方法，在方法执行之前或之后添加额外的功能。在Spring AOP中，有4种类型通知(advices)的支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通知(Advice)之前 - 该方法执行前运行&lt;/li&gt;
&lt;li&gt;通知(Advice)返回之后 – 运行后，该方法返回一个结果&lt;/li&gt;
&lt;li&gt;通知(Advice)抛出之后 – 运行方法抛出异常后&lt;/li&gt;
&lt;li&gt;环绕通知 – 环绕方法执行运行，结合以上这三个通知&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring 自动扫描组件</title>
    <link href="http://yoursite.com/2017/08/17/Spring_0700_component/"/>
    <id>http://yoursite.com/2017/08/17/Spring_0700_component/</id>
    <published>2017-08-17T05:07:31.000Z</published>
    <updated>2017-09-19T06:21:15.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-自动扫描组件"><a href="#Spring-自动扫描组件" class="headerlink" title="Spring 自动扫描组件"></a>Spring 自动扫描组件</h3><p>&emsp;&emsp;通常情况下，要声明所有的Bean类或组件的XML bean配置文件，这样Spring容器可以检测并注册Bean类或组件。 其实，Spring是能够自动扫描，检测和预定义的项目包并实例化bean的，可以在XML文件中省略繁琐的Bean类声明。<br><a id="more"></a></p>
<h4 id="1-手动声明方式"><a href="#1-手动声明方式" class="headerlink" title="1. 手动声明方式"></a>1. 手动声明方式</h4><p>&emsp;&emsp;手动声明xml配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;customerService&quot; class=&quot;com.lidolid.customer.services.CustomerService&quot;&gt;</div><div class="line">		&lt;property name=&quot;customerDAO&quot; ref=&quot;customerDAO&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerDAO&quot; class=&quot;com.lidolid.customer.dao.CustomerDAO&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-自动扫描组件"><a href="#2-自动扫描组件" class="headerlink" title="2. 自动扫描组件"></a>2. 自动扫描组件</h4><h5 id="2-1-DAO层，添加-Component，表明这也是一个自动扫描组件。"><a href="#2-1-DAO层，添加-Component，表明这也是一个自动扫描组件。" class="headerlink" title="2.1 DAO层，添加@Component，表明这也是一个自动扫描组件。"></a>2.1 DAO层，添加@Component，表明这也是一个自动扫描组件。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line">@Component</div><div class="line">public class CustomerService </div><div class="line">&#123;</div><div class="line">	@Autowired</div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;CustomerService [customerDAO=&quot; + customerDAO + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-2-注册自动扫描组件"><a href="#2-2-注册自动扫描组件" class="headerlink" title="2.2 注册自动扫描组件"></a>2.2 注册自动扫描组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.customer&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>“context:component”在bean配置文件，意味着，在Spring中启用自动扫描功能。base-package是指明存储组件，Spring将扫描该文件夹，并找出Bean(注解为@Component)并注册到Spring容器。</p>
</blockquote>
<h4 id="3-自定义自动扫描组件名称"><a href="#3-自定义自动扫描组件名称" class="headerlink" title="3. 自定义自动扫描组件名称"></a>3. 自定义自动扫描组件名称</h4><p>&emsp;&emsp;默认情况下，Spring 将小写部件的第一字符,从’CustomerService’到’customerService’。可以检索该组件名称为”CustomerService”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)context.getBean(&quot;customerService&quot;);</div></pre></td></tr></table></figure></p>
<p>要创建组件的自定义名称，可以这样自定义名称：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Service(&quot;AAA&quot;)</div><div class="line">public class CustomerService </div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>现在，可以用’AAA’这个名称进行检索了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)context.getBean(&quot;AAA&quot;);</div></pre></td></tr></table></figure></p>
<h4 id="4-自动扫描组件注释类型"><a href="#4-自动扫描组件注释类型" class="headerlink" title="4. 自动扫描组件注释类型"></a>4. 自动扫描组件注释类型</h4><p>&emsp;&emsp;在Spring2.5中，有4种类型的自动扫描组件注释类型</p>
<ul>
<li>@Component:指示自动扫描组件。</li>
<li>@Repository:表示在持久层DAO组件。</li>
<li>@Service:表示在业务层服务组件。</li>
<li>@Controller:表示在表示层控制器组件。</li>
</ul>
<blockquote>
<p>查看@Component，@Repository，@Service 或 @Controller 源代码可以发现，所有的 @Repository, @Service 或 @Controller 被注解为 @Component。因此，我们可以只使用 @Component 对所有组件进行自动扫描。但为便于阅读，应该始终声明@Repository，@ Service或@Controller在指定的层。</p>
</blockquote>
<h4 id="5-过滤自动扫描组件"><a href="#5-过滤自动扫描组件" class="headerlink" title="5. 过滤自动扫描组件"></a>5. 过滤自动扫描组件</h4><p>&emsp;&emsp;使用过滤自动扫描组件，Spring会”过滤”扫描并注册匹配定义”regex”，即使该类组件的名称未标注@Component。<br>&emsp;&emsp;DAO层：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.dao;</div><div class="line"></div><div class="line">public class CustomerDAO </div><div class="line">&#123;</div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Hello , This is CustomerDAO&quot;;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Service层:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.customer.services;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import com.lidolid.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line">public class CustomerService </div><div class="line">&#123;</div><div class="line">	@Autowired</div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;CustomerService [customerDAO=&quot; + customerDAO + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Spring过滤，包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid&quot; &gt;</div><div class="line"></div><div class="line">		&lt;context:include-filter type=&quot;regex&quot; </div><div class="line">                       expression=&quot;com.lidolid.customer.dao.*DAO.*&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;context:include-filter type=&quot;regex&quot; </div><div class="line">                       expression=&quot;com.lidolid.customer.services.*Service.*&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在这个XML过滤中，所有文件的名称中包含DAO或Service(<em>DAO.</em>, <em>Services.</em>)单词将被检测并在 Spring 容器中注册。</p>
</blockquote>
<p>&emsp;&emsp;Spring过滤，不包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;context:component-scan base-package=&quot;com.yiibai&quot; &gt;</div><div class="line">		&lt;context:exclude-filter type=&quot;regex&quot; </div><div class="line">			expression=&quot;com.yiibai.customer.dao.*DAO.*&quot; /&gt;		</div><div class="line">&lt;/context:component-scan&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>不包括那些包含DAO这个词组文件名</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-自动扫描组件&quot;&gt;&lt;a href=&quot;#Spring-自动扫描组件&quot; class=&quot;headerlink&quot; title=&quot;Spring 自动扫描组件&quot;&gt;&lt;/a&gt;Spring 自动扫描组件&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;通常情况下，要声明所有的Bean类或组件的XML bean配置文件，这样Spring容器可以检测并注册Bean类或组件。 其实，Spring是能够自动扫描，检测和预定义的项目包并实例化bean的，可以在XML文件中省略繁琐的Bean类声明。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring EL表达式</title>
    <link href="http://yoursite.com/2017/08/16/Spring_0600_EL/"/>
    <id>http://yoursite.com/2017/08/16/Spring_0600_EL/</id>
    <published>2017-08-16T12:13:52.000Z</published>
    <updated>2017-09-19T05:06:59.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-EL表达式"><a href="#Spring-EL表达式" class="headerlink" title="Spring EL表达式"></a>Spring EL表达式</h3><p>&emsp;&emsp;Spring EL与OGNL和JSF EL相似，计算评估或在bean创建时执行。此外，所有的Spring表达式都可以通过XML或注解。本文简单介绍如何使用Spring EL表达式注入字符串，整数，Bean到属性。<br><a id="more"></a></p>
<h4 id="1-Spring-Beans定义"><a href="#1-Spring-Beans定义" class="headerlink" title="1. Spring Beans定义"></a>1. Spring Beans定义</h4><p>&emsp;&emsp;Item Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">public class Item &#123;</div><div class="line"></div><div class="line">	private String name;</div><div class="line">	private int qty;</div><div class="line"></div><div class="line">	public Item() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getQty() &#123;</div><div class="line">		return qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setQty(int qty) &#123;</div><div class="line">		this.qty = qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Item [name=&quot; + name + &quot;, qty=&quot; + qty + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	private Item item;</div><div class="line">	private String itemName;</div><div class="line"></div><div class="line">	public Item getItem() &#123;</div><div class="line">		return item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItem(Item item) &#123;</div><div class="line">		this.item = item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getItemName() &#123;</div><div class="line">		return itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItemName(String itemName) &#123;</div><div class="line">		this.itemName = itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [item=&quot; + item + &quot;, itemName=&quot; + itemName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-Spring-EL以XML形式"><a href="#2-Spring-EL以XML形式" class="headerlink" title="2. Spring EL以XML形式"></a>2. Spring EL以XML形式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/util</div><div class="line">	http://www.springframework.org/schema/util/spring-util-2.5.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;itemBean&quot; class=&quot;com.lidolid.core.Item&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;itemA&quot; /&gt;</div><div class="line">		&lt;property name=&quot;qty&quot; value=&quot;10&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;customerBean&quot; class=&quot;com.lidolid.core.Customer&quot;&gt;</div><div class="line">		&lt;property name=&quot;item&quot; value=&quot;#&#123;itemBean&#125;&quot; /&gt;</div><div class="line">		&lt;property name=&quot;itemName&quot; value=&quot;#&#123;itemBean.name&#125;&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>#{itemBean} – 注入“itemBean”到“customerBean”Bean 的“item”属性。</li>
<li>#{itemBean.name} – 注入“itemBean”的“name”属性到 “customerBean” bean的”itemname”属性。</li>
</ul>
</blockquote>
<h4 id="3-Spring-EL以注解形式"><a href="#3-Spring-EL以注解形式" class="headerlink" title="3. Spring EL以注解形式"></a>3. Spring EL以注解形式</h4><p>&emsp;&emsp;Item Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">@Component(&quot;itemBean&quot;)</div><div class="line">public class Item &#123;</div><div class="line"></div><div class="line">	@Value(&quot;itemA&quot;) //inject String directly</div><div class="line">	private String name;</div><div class="line">	@Value(&quot;10&quot;) //inject interger directly</div><div class="line">	private int qty;</div><div class="line">	</div><div class="line">	public Item() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getQty() &#123;</div><div class="line">		return qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setQty(int qty) &#123;</div><div class="line">		this.qty = qty;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Item [name=&quot; + name + &quot;, qty=&quot; + qty + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Customer Bean定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.lidolid.core;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Value;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">@Component(&quot;customerBean&quot;)</div><div class="line">public class Customer &#123;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;itemBean&#125;&quot;)</div><div class="line">	private Item item;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;itemBean.name&#125;&quot;)</div><div class="line">	private String itemName;</div><div class="line"></div><div class="line">	public Item getItem() &#123;</div><div class="line">		return item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItem(Item item) &#123;</div><div class="line">		this.item = item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getItemName() &#123;</div><div class="line">		return itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setItemName(String itemName) &#123;</div><div class="line">		this.itemName = itemName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Customer [item=&quot; + item + &quot;, itemName=&quot; + itemName + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：要在注解使用使用SpEL，必须通过注解自动扫描组件，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=&quot;com.lidolid.core&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-EL表达式&quot;&gt;&lt;a href=&quot;#Spring-EL表达式&quot; class=&quot;headerlink&quot; title=&quot;Spring EL表达式&quot;&gt;&lt;/a&gt;Spring EL表达式&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Spring EL与OGNL和JSF EL相似，计算评估或在bean创建时执行。此外，所有的Spring表达式都可以通过XML或注解。本文简单介绍如何使用Spring EL表达式注入字符串，整数，Bean到属性。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="EL" scheme="http://yoursite.com/tags/EL/"/>
    
  </entry>
  
</feed>
